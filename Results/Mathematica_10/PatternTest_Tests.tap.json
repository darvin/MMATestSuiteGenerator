{
    "stats": {
        "suites": 0,
        "tests": 27,
        "passes": 27,
        "pending": 0,
        "failures": 0,
        "start": "2018-06-11T04:14:16.244Z",
        "end": "2018-06-11T04:14:16.244Z",
        "duration": 0,
        "testsRegistered": 27,
        "passPercent": 100,
        "pendingPercent": 0,
        "other": 0,
        "hasOther": false,
        "skipped": 0,
        "hasSkipped": false,
        "passPercentClass": "danger",
        "pendingPercentClass": "danger"
    },
    "suites": {
        "title": "",
        "suites": [],
        "tests": [
            {
                "title": "Cases[{1, 2, 3.5, x, y, 4}, _?NumberQ]    ➡️     {1, 2, 3.5, 4}",
                "fullTitle": "Cases[{1, 2, 3.5, x, y, 4}, _?NumberQ]    ➡️     {1, 2, 3.5, 4}",
                "timedOut": false,
                "duration": 0,
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "",
                "isRoot": false,
                "uuid": "932bbc72-4114-40c3-8bce-2e7d12739a52",
                "parentUUID": "5c930cca-4d5c-4c83-8b52-4ea3df5ff08d",
                "skipped": false,
                "isHook": false,
                "context": "\"#! DOCKER > wolfram -script output/Tests/PatternTest_Tests.m\\n#! TextForm[ColonForm[MessageName[$IterationLimit, itlim], StringForm[Iteration limit of `1` exceeded., Short[HoldForm[4096], 3]]]]\\n#! TextForm[ColonForm[MessageName[$IterationLimit, itlim], StringForm[Iteration limit of `1` exceeded., Short[HoldForm[4096], 3]]]]\\n#! TextForm[ColonForm[MessageName[$IterationLimit, itlim], StringForm[Iteration limit of `1` exceeded., Short[HoldForm[4096], 3]]]]\\n#! TextForm[ColonForm[MessageName[General, stop], StringForm[Further output of `1` will be suppressed during this calculation., Short[HoldForm[MessageName[$IterationLimit, itlim]], 3]]]]\\n#! 5\\n# SYSTEM: Mathematica_10\\n# TEST: PatternTest_Tests\\n# Find cases of any expression that satisfies the RefLink[NumberQ,paclet:ref/NumberQ] test:\\n\\n\\ndata: \\n  got: \\n    1:   null\\n    2:   null\\n    4:   null\\n    3.5: null\\n  expect: \\n    1:   null\\n    2:   null\\n    4:   null\\n    3.5: null\\n  expect_evaluated: \\n    1:   null\\n    2:   null\\n    4:   null\\n    3.5: null\"",
                "state": "passed",
                "err": {
                    "name": "",
                    "message": "",
                    "showDiff": true,
                    "actual": {
                        "1": null,
                        "2": null,
                        "4": null,
                        "3.5": null
                    },
                    "expected": {
                        "1": null,
                        "2": null,
                        "4": null,
                        "3.5": null
                    }
                }
            },
            {
                "title": "MatchQ[{1, E, Pi}, {__?Positive}]    ➡️     True",
                "fullTitle": "MatchQ[{1, E, Pi}, {__?Positive}]    ➡️     True",
                "timedOut": false,
                "duration": 0,
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "",
                "isRoot": false,
                "uuid": "8c90e39d-8822-4930-979b-9385ee398a4f",
                "parentUUID": "5c930cca-4d5c-4c83-8b52-4ea3df5ff08d",
                "skipped": false,
                "isHook": false,
                "context": "\"# Test whether a list has only positive elements:\\n\\n\\ndata: \\n  got:              true\\n  expect:           true\\n  expect_evaluated: true\"",
                "state": "passed",
                "err": {
                    "name": "",
                    "message": "",
                    "showDiff": true,
                    "actual": true,
                    "expected": true
                }
            },
            {
                "title": "MatchQ[{1, I, 0}, {__?Positive}]    ➡️     False",
                "fullTitle": "MatchQ[{1, I, 0}, {__?Positive}]    ➡️     False",
                "timedOut": false,
                "duration": 0,
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "",
                "isRoot": false,
                "uuid": "bbf1821e-3516-4777-9a72-fb5c2222eb51",
                "parentUUID": "5c930cca-4d5c-4c83-8b52-4ea3df5ff08d",
                "skipped": false,
                "isHook": false,
                "context": "\"\\n\\ndata: \\n  got:              false\\n  expect:           false\\n  expect_evaluated: false\"",
                "state": "passed",
                "err": {
                    "name": "",
                    "message": "",
                    "showDiff": true,
                    "expected": false
                }
            },
            {
                "title": "f[(x_)?NumericQ] := NIntegrate[Sin[t^3], {t, 0, x}]; f[2]    ➡️     0.451948",
                "fullTitle": "f[(x_)?NumericQ] := NIntegrate[Sin[t^3], {t, 0, x}]; f[2]    ➡️     0.451948",
                "timedOut": false,
                "duration": 0,
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "",
                "isRoot": false,
                "uuid": "01b319b0-8693-45d5-936e-46e1d4e982ea",
                "parentUUID": "5c930cca-4d5c-4c83-8b52-4ea3df5ff08d",
                "skipped": false,
                "isHook": false,
                "context": "\"# Create a definition that only applies to numeric arguments:\\n\\n\\ndata: \\n  got:              0.451948\\n  expect:           0.451948\\n  expect_evaluated: 0.451948\"",
                "state": "passed",
                "err": {
                    "name": "",
                    "message": "",
                    "showDiff": true,
                    "actual": 0.451948,
                    "expected": 0.451948
                }
            },
            {
                "title": "f[(1 + Sqrt[2])/5]    ➡️     0.0135768",
                "fullTitle": "f[(1 + Sqrt[2])/5]    ➡️     0.0135768",
                "timedOut": false,
                "duration": 0,
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "",
                "isRoot": false,
                "uuid": "976b008c-d034-485f-b5f4-25a7b598a4ce",
                "parentUUID": "5c930cca-4d5c-4c83-8b52-4ea3df5ff08d",
                "skipped": false,
                "isHook": false,
                "context": "\"\\n\\ndata: \\n  got:              0.0135768\\n  expect:           0.0135768\\n  expect_evaluated: 0.0135768\"",
                "state": "passed",
                "err": {
                    "name": "",
                    "message": "",
                    "showDiff": true,
                    "actual": 0.0135768,
                    "expected": 0.0135768
                }
            },
            {
                "title": "f[a]    ➡️     f[a]",
                "fullTitle": "f[a]    ➡️     f[a]",
                "timedOut": false,
                "duration": 0,
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "",
                "isRoot": false,
                "uuid": "84e6afd5-a337-461d-bacd-e4876b2077c2",
                "parentUUID": "5c930cca-4d5c-4c83-8b52-4ea3df5ff08d",
                "skipped": false,
                "isHook": false,
                "context": "\"\\n\\ndata: \\n  got:              f[a]\\n  expect:           f[a]\\n  expect_evaluated: f[a]\"",
                "state": "passed",
                "err": {
                    "name": "",
                    "message": "",
                    "showDiff": true,
                    "actual": "f[a]",
                    "expected": "f[a]"
                }
            },
            {
                "title": "{3, -5, 2, 7, -6, 3} /. _?Negative :> 0    ➡️     {3, 0, 2, 7, 0, 3}",
                "fullTitle": "{3, -5, 2, 7, -6, 3} /. _?Negative :> 0    ➡️     {3, 0, 2, 7, 0, 3}",
                "timedOut": false,
                "duration": 0,
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "",
                "isRoot": false,
                "uuid": "2f4b9727-e259-427a-bc52-bb0f38a5bfa2",
                "parentUUID": "5c930cca-4d5c-4c83-8b52-4ea3df5ff08d",
                "skipped": false,
                "isHook": false,
                "context": "\"# Replace negative numbers with zero:\\n\"",
                "state": "passed",
                "err": {}
            },
            {
                "title": "Cases[Range[0, 70], _?(Divisible[#1, 7] & )]    ➡️     {0, 7, 14, 21, 28, 35, 42, 49, 56, 63, 70}",
                "fullTitle": "Cases[Range[0, 70], _?(Divisible[#1, 7] & )]    ➡️     {0, 7, 14, 21, 28, 35, 42, 49, 56, 63, 70}",
                "timedOut": false,
                "duration": 0,
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "",
                "isRoot": false,
                "uuid": "e41d8ddb-384f-4a26-8336-dc5b6fdaeb3e",
                "parentUUID": "5c930cca-4d5c-4c83-8b52-4ea3df5ff08d",
                "skipped": false,
                "isHook": false,
                "context": "\"# Find elements in a list that are divisible by 7:\\n\\n\\ndata: \\n  got: \\n    0:  null\\n    7:  null\\n    14: null\\n    21: null\\n    28: null\\n    35: null\\n    42: null\\n    49: null\\n    56: null\\n    63: null\\n    70: null\\n  expect: \\n    0:  null\\n    7:  null\\n    14: null\\n    21: null\\n    28: null\\n    35: null\\n    42: null\\n    49: null\\n    56: null\\n    63: null\\n    70: null\\n  expect_evaluated: \\n    0:  null\\n    7:  null\\n    14: null\\n    21: null\\n    28: null\\n    35: null\\n    42: null\\n    49: null\\n    56: null\\n    63: null\\n    70: null\"",
                "state": "passed",
                "err": {
                    "name": "",
                    "message": "",
                    "showDiff": true,
                    "actual": {
                        "0": null,
                        "7": null,
                        "14": null,
                        "21": null,
                        "28": null,
                        "35": null,
                        "42": null,
                        "49": null,
                        "56": null,
                        "63": null,
                        "70": null
                    },
                    "expected": {
                        "0": null,
                        "7": null,
                        "14": null,
                        "21": null,
                        "28": null,
                        "35": null,
                        "42": null,
                        "49": null,
                        "56": null,
                        "63": null,
                        "70": null
                    }
                }
            },
            {
                "title": "Cases[Range[0, 350], _?(Divisible[#1, 7] && Divisible[#1, 5] & )]    ➡️     {0, 35, 70, 105, 140, 175, 210, 245, 280, 315, 350}",
                "fullTitle": "Cases[Range[0, 350], _?(Divisible[#1, 7] && Divisible[#1, 5] & )]    ➡️     {0, 35, 70, 105, 140, 175, 210, 245, 280, 315, 350}",
                "timedOut": false,
                "duration": 0,
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "",
                "isRoot": false,
                "uuid": "6439af97-955b-4fc0-94f7-bd1b04b96c06",
                "parentUUID": "5c930cca-4d5c-4c83-8b52-4ea3df5ff08d",
                "skipped": false,
                "isHook": false,
                "context": "\"# Elements that are divisible by both 5 and 7:\\n\\n\\ndata: \\n  got: \\n    0:   null\\n    35:  null\\n    70:  null\\n    105: null\\n    140: null\\n    175: null\\n    210: null\\n    245: null\\n    280: null\\n    315: null\\n    350: null\\n  expect: \\n    0:   null\\n    35:  null\\n    70:  null\\n    105: null\\n    140: null\\n    175: null\\n    210: null\\n    245: null\\n    280: null\\n    315: null\\n    350: null\\n  expect_evaluated: \\n    0:   null\\n    35:  null\\n    70:  null\\n    105: null\\n    140: null\\n    175: null\\n    210: null\\n    245: null\\n    280: null\\n    315: null\\n    350: null\"",
                "state": "passed",
                "err": {
                    "name": "",
                    "message": "",
                    "showDiff": true,
                    "actual": {
                        "0": null,
                        "35": null,
                        "70": null,
                        "105": null,
                        "140": null,
                        "175": null,
                        "210": null,
                        "245": null,
                        "280": null,
                        "315": null,
                        "350": null
                    },
                    "expected": {
                        "0": null,
                        "35": null,
                        "70": null,
                        "105": null,
                        "140": null,
                        "175": null,
                        "210": null,
                        "245": null,
                        "280": null,
                        "315": null,
                        "350": null
                    }
                }
            },
            {
                "title": "Cases[Range[0, 35], _?(Divisible[#1, 7] || Divisible[#1, 5] & )]    ➡️     {0, 5, 7, 10, 14, 15, 20, 21, 25, 28, 30, 35}",
                "fullTitle": "Cases[Range[0, 35], _?(Divisible[#1, 7] || Divisible[#1, 5] & )]    ➡️     {0, 5, 7, 10, 14, 15, 20, 21, 25, 28, 30, 35}",
                "timedOut": false,
                "duration": 0,
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "",
                "isRoot": false,
                "uuid": "1da07090-61ca-45c0-9f2f-c15f48b1685d",
                "parentUUID": "5c930cca-4d5c-4c83-8b52-4ea3df5ff08d",
                "skipped": false,
                "isHook": false,
                "context": "\"# Elements that are divisible by either 5 or 7:\\n\\n\\ndata: \\n  got: \\n    0:  null\\n    5:  null\\n    7:  null\\n    10: null\\n    14: null\\n    15: null\\n    20: null\\n    21: null\\n    25: null\\n    28: null\\n    30: null\\n    35: null\\n  expect: \\n    0:  null\\n    5:  null\\n    7:  null\\n    10: null\\n    14: null\\n    15: null\\n    20: null\\n    21: null\\n    25: null\\n    28: null\\n    30: null\\n    35: null\\n  expect_evaluated: \\n    0:  null\\n    5:  null\\n    7:  null\\n    10: null\\n    14: null\\n    15: null\\n    20: null\\n    21: null\\n    25: null\\n    28: null\\n    30: null\\n    35: null\"",
                "state": "passed",
                "err": {
                    "name": "",
                    "message": "",
                    "showDiff": true,
                    "actual": {
                        "0": null,
                        "5": null,
                        "7": null,
                        "10": null,
                        "14": null,
                        "15": null,
                        "20": null,
                        "21": null,
                        "25": null,
                        "28": null,
                        "30": null,
                        "35": null
                    },
                    "expected": {
                        "0": null,
                        "5": null,
                        "7": null,
                        "10": null,
                        "14": null,
                        "15": null,
                        "20": null,
                        "21": null,
                        "25": null,
                        "28": null,
                        "30": null,
                        "35": null
                    }
                }
            },
            {
                "title": "f[(n_)?NonNegative, (p_)?PrimeQ] := n^p; f[0, 3]    ➡️     0",
                "fullTitle": "f[(n_)?NonNegative, (p_)?PrimeQ] := n^p; f[0, 3]    ➡️     0",
                "timedOut": false,
                "duration": 0,
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "",
                "isRoot": false,
                "uuid": "defe87f1-ec6c-4184-959d-e4e16a218f74",
                "parentUUID": "5c930cca-4d5c-4c83-8b52-4ea3df5ff08d",
                "skipped": false,
                "isHook": false,
                "context": "\"# Create a function that only evaluates when given a non-negative number and a prime:\\n\\n\\ndata: \\n  got:              0\\n  expect:           0\\n  expect_evaluated: 0\"",
                "state": "passed",
                "err": {
                    "name": "",
                    "message": "",
                    "showDiff": true,
                    "expected": 0
                }
            },
            {
                "title": "f[2, 4]    ➡️     f[2, 4]",
                "fullTitle": "f[2, 4]    ➡️     f[2, 4]",
                "timedOut": false,
                "duration": 0,
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "",
                "isRoot": false,
                "uuid": "52642f10-afeb-4179-a306-922f5d708038",
                "parentUUID": "5c930cca-4d5c-4c83-8b52-4ea3df5ff08d",
                "skipped": false,
                "isHook": false,
                "context": "\"\\n\\ndata: \\n  got:              f[2, 4]\\n  expect:           f[2, 4]\\n  expect_evaluated: f[2, 4]\"",
                "state": "passed",
                "err": {
                    "name": "",
                    "message": "",
                    "showDiff": true,
                    "actual": "f[2, 4]",
                    "expected": "f[2, 4]"
                }
            },
            {
                "title": "f[-1, 3]    ➡️     f[-1, 3]",
                "fullTitle": "f[-1, 3]    ➡️     f[-1, 3]",
                "timedOut": false,
                "duration": 0,
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "",
                "isRoot": false,
                "uuid": "885d93a2-c56a-4913-926f-18291f4854a8",
                "parentUUID": "5c930cca-4d5c-4c83-8b52-4ea3df5ff08d",
                "skipped": false,
                "isHook": false,
                "context": "\"\\n\\ndata: \\n  got:              f[-1, 3]\\n  expect:           f[-1, 3]\\n  expect_evaluated: f[-1, 3]\"",
                "state": "passed",
                "err": {
                    "name": "",
                    "message": "",
                    "showDiff": true,
                    "actual": "f[-1, 3]",
                    "expected": "f[-1, 3]"
                }
            },
            {
                "title": "f[(p_)?(Negative[#1] && PrimeQ[#1] & )] := p^p; f[-2]    ➡️     1/4 # skip",
                "fullTitle": "f[(p_)?(Negative[#1] && PrimeQ[#1] & )] := p^p; f[-2]    ➡️     1/4 # skip",
                "timedOut": false,
                "duration": 0,
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "",
                "isRoot": false,
                "uuid": "c902ce42-b662-4a50-a697-f2aee156796f",
                "parentUUID": "5c930cca-4d5c-4c83-8b52-4ea3df5ff08d",
                "skipped": false,
                "isHook": false,
                "context": "\"# Create a function that only evaluates for negative primes:\\n\"",
                "state": "passed",
                "err": {}
            },
            {
                "title": "f[2]    ➡️     f[2]",
                "fullTitle": "f[2]    ➡️     f[2]",
                "timedOut": false,
                "duration": 0,
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "",
                "isRoot": false,
                "uuid": "1f4b8a56-7d76-4993-8245-04d442ede10f",
                "parentUUID": "5c930cca-4d5c-4c83-8b52-4ea3df5ff08d",
                "skipped": false,
                "isHook": false,
                "context": "\"\\n\\ndata: \\n  got:              0.451948\\n  expect:           f[2]\\n  expect_evaluated: 0.451948\"",
                "state": "passed",
                "err": {
                    "name": "",
                    "message": "",
                    "showDiff": true,
                    "actual": 0.451948,
                    "expected": "f[2]"
                }
            },
            {
                "title": "f[-4]    ➡️     f[-4]",
                "fullTitle": "f[-4]    ➡️     f[-4]",
                "timedOut": false,
                "duration": 0,
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "",
                "isRoot": false,
                "uuid": "41395d8a-e7b8-46e9-9d6d-f974558d2fef",
                "parentUUID": "5c930cca-4d5c-4c83-8b52-4ea3df5ff08d",
                "skipped": false,
                "isHook": false,
                "context": "\"\\n\\ndata: \\n  got:              0.438129\\n  expect:           f[-4]\\n  expect_evaluated: 0.438129\"",
                "state": "passed",
                "err": {
                    "name": "",
                    "message": "",
                    "showDiff": true,
                    "actual": 0.438129,
                    "expected": "f[-4]"
                }
            },
            {
                "title": "MatchQ[{{a, b}, {c, d}}, ({_, _})?MatrixQ]    ➡️     True",
                "fullTitle": "MatchQ[{{a, b}, {c, d}}, ({_, _})?MatrixQ]    ➡️     True",
                "timedOut": false,
                "duration": 0,
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "",
                "isRoot": false,
                "uuid": "8ef5d483-84fd-4205-bcf4-8de48b5971ba",
                "parentUUID": "5c930cca-4d5c-4c83-8b52-4ea3df5ff08d",
                "skipped": false,
                "isHook": false,
                "context": "\"# Use RefLink[PatternTest,paclet:ref/PatternTest] on a complex pattern:\\n\\n\\ndata: \\n  got:              true\\n  expect:           true\\n  expect_evaluated: true\"",
                "state": "passed",
                "err": {
                    "name": "",
                    "message": "",
                    "showDiff": true,
                    "actual": true,
                    "expected": true
                }
            },
            {
                "title": "MatchQ[{a, b}, ({_, _})?MatrixQ]    ➡️     False",
                "fullTitle": "MatchQ[{a, b}, ({_, _})?MatrixQ]    ➡️     False",
                "timedOut": false,
                "duration": 0,
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "",
                "isRoot": false,
                "uuid": "7da9a0c4-921a-4ec2-a368-0d4dcaca86c6",
                "parentUUID": "5c930cca-4d5c-4c83-8b52-4ea3df5ff08d",
                "skipped": false,
                "isHook": false,
                "context": "\"\\n\\ndata: \\n  got:              false\\n  expect:           false\\n  expect_evaluated: false\"",
                "state": "passed",
                "err": {
                    "name": "",
                    "message": "",
                    "showDiff": true,
                    "expected": false
                }
            },
            {
                "title": "Cases[Hold[Print[5], Sin, 2 + 2, 7, Sqrt[2]], _?(Function[{n}, NumberQ[Unevaluated[n]], HoldAll])]    ➡️     {7}",
                "fullTitle": "Cases[Hold[Print[5], Sin, 2 + 2, 7, Sqrt[2]], _?(Function[{n}, NumberQ[Unevaluated[n]], HoldAll])]    ➡️     {7}",
                "timedOut": false,
                "duration": 0,
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "",
                "isRoot": false,
                "uuid": "ca7c6637-46d1-4ec3-9196-63ef3e40d929",
                "parentUUID": "5c930cca-4d5c-4c83-8b52-4ea3df5ff08d",
                "skipped": false,
                "isHook": false,
                "context": "\"# Search for numbers without allowing expressions to evaluate:\\n\\n\\ndata: \\n  got: \\n    7: null\\n  expect: \\n    7: null\\n  expect_evaluated: \\n    7: null\"",
                "state": "passed",
                "err": {
                    "name": "",
                    "message": "",
                    "showDiff": true,
                    "actual": {
                        "7": null
                    },
                    "expected": {
                        "7": null
                    }
                }
            },
            {
                "title": "Cases[Hold[Print[5], Sin, 2 + 2, 7, Sqrt[2]], _?NumberQ]    ➡️     {4, 7}",
                "fullTitle": "Cases[Hold[Print[5], Sin, 2 + 2, 7, Sqrt[2]], _?NumberQ]    ➡️     {4, 7}",
                "timedOut": false,
                "duration": 0,
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "",
                "isRoot": false,
                "uuid": "9b6cd28d-8026-49d4-a938-233f2dfe8f17",
                "parentUUID": "5c930cca-4d5c-4c83-8b52-4ea3df5ff08d",
                "skipped": false,
                "isHook": false,
                "context": "\"# Just using RefLink[NumberQ,paclet:ref/NumberQ] would allow each element to evaluate:\\n\\n\\ndata: \\n  got: \\n    4: null\\n    7: null\\n  expect: \\n    4: null\\n    7: null\\n  expect_evaluated: \\n    4: null\\n    7: null\"",
                "state": "passed",
                "err": {
                    "name": "",
                    "message": "",
                    "showDiff": true,
                    "actual": {
                        "4": null,
                        "7": null
                    },
                    "expected": {
                        "4": null,
                        "7": null
                    }
                }
            },
            {
                "title": "Cases[{{a, b}, {1, 2, 3}, {{d, 6}, {d, 10}}}, ({_, _})?VectorQ]    ➡️     {{a, b}}",
                "fullTitle": "Cases[{{a, b}, {1, 2, 3}, {{d, 6}, {d, 10}}}, ({_, _})?VectorQ]    ➡️     {{a, b}}",
                "timedOut": false,
                "duration": 0,
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "",
                "isRoot": false,
                "uuid": "648d6fa0-a0c2-4cdf-ac12-70fe89127cfe",
                "parentUUID": "5c930cca-4d5c-4c83-8b52-4ea3df5ff08d",
                "skipped": false,
                "isHook": false,
                "context": "\"# RefLink[PatternTest,paclet:ref/PatternTest] applies test functions to patterns, which need not have names:\\n\\n\\ndata: \\n  got: \\n    [object Object]: null\\n  expect: \\n    [object Object]: null\\n  expect_evaluated: \\n    [object Object]: null\"",
                "state": "passed",
                "err": {
                    "name": "",
                    "message": "",
                    "showDiff": true,
                    "actual": {
                        "[object Object]": null
                    },
                    "expected": {
                        "[object Object]": null
                    }
                }
            },
            {
                "title": "Cases[{{a, b}, {1, 2, 3}, {{d, 6}, {d, 10}}}, {x_, y_} /;  !ListQ[x] &&  !ListQ[y]]    ➡️     {{a, b}}",
                "fullTitle": "Cases[{{a, b}, {1, 2, 3}, {{d, 6}, {d, 10}}}, {x_, y_} /;  !ListQ[x] &&  !ListQ[y]]    ➡️     {{a, b}}",
                "timedOut": false,
                "duration": 0,
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "",
                "isRoot": false,
                "uuid": "34239639-5e6d-47ad-bd83-9c11e147aa4e",
                "parentUUID": "5c930cca-4d5c-4c83-8b52-4ea3df5ff08d",
                "skipped": false,
                "isHook": false,
                "context": "\"# RefLink[Condition,paclet:ref/Condition] evaluates a Boolean expression on named parts of a pattern:\\n\\n\\ndata: \\n  got: \\n    [object Object]: null\\n  expect: \\n    [object Object]: null\\n  expect_evaluated: \\n    [object Object]: null\"",
                "state": "passed",
                "err": {
                    "name": "",
                    "message": "",
                    "showDiff": true,
                    "actual": {
                        "[object Object]": null
                    },
                    "expected": {
                        "[object Object]": null
                    }
                }
            },
            {
                "title": "Replace[{1, 7, \"Hi\", 3, Indeterminate}, Except[_?NumericQ] :> 0, 1]    ➡️     {1, 7, 0, 3, 0}",
                "fullTitle": "Replace[{1, 7, \"Hi\", 3, Indeterminate}, Except[_?NumericQ] :> 0, 1]    ➡️     {1, 7, 0, 3, 0}",
                "timedOut": false,
                "duration": 0,
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "",
                "isRoot": false,
                "uuid": "d6b5604c-f661-4b7b-a655-e86a111683ef",
                "parentUUID": "5c930cca-4d5c-4c83-8b52-4ea3df5ff08d",
                "skipped": false,
                "isHook": false,
                "context": "\"# Use RefLink[Except,paclet:ref/Except] to effectively negate RefLink[PatternTest,paclet:ref/PatternTest]:\\n\"",
                "state": "passed",
                "err": {}
            },
            {
                "title": "MatchQ[Hold[2 + 3], Hold[_?IntegerQ]]    ➡️     True",
                "fullTitle": "MatchQ[Hold[2 + 3], Hold[_?IntegerQ]]    ➡️     True",
                "timedOut": false,
                "duration": 0,
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "",
                "isRoot": false,
                "uuid": "83332dfc-642e-48cf-90e4-6b705e190eaa",
                "parentUUID": "5c930cca-4d5c-4c83-8b52-4ea3df5ff08d",
                "skipped": false,
                "isHook": false,
                "context": "\"# RefLink[PatternTest,paclet:ref/PatternTest] evaluates potential matches that are a part of a held expression:\\n\\n\\ndata: \\n  got:              true\\n  expect:           true\\n  expect_evaluated: true\"",
                "state": "passed",
                "err": {
                    "name": "",
                    "message": "",
                    "showDiff": true,
                    "actual": true,
                    "expected": true
                }
            },
            {
                "title": "MatchQ[Hold[2 + 3], Hold[_?(IntegerQ[Unevaluated[#1]] & )]]    ➡️     True",
                "fullTitle": "MatchQ[Hold[2 + 3], Hold[_?(IntegerQ[Unevaluated[#1]] & )]]    ➡️     True",
                "timedOut": false,
                "duration": 0,
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "",
                "isRoot": false,
                "uuid": "a21a6153-feba-4f10-9c91-3fceda58e794",
                "parentUUID": "5c930cca-4d5c-4c83-8b52-4ea3df5ff08d",
                "skipped": false,
                "isHook": false,
                "context": "\"# Due to normal evaluation rules, expressions may evaluate before being examined by the test function:\\n\\n\\ndata: \\n  got:              true\\n  expect:           true\\n  expect_evaluated: true\"",
                "state": "passed",
                "err": {
                    "name": "",
                    "message": "",
                    "showDiff": true,
                    "actual": true,
                    "expected": true
                }
            },
            {
                "title": "MatchQ[Hold[2 + 3], Hold[_?(Function[{n}, IntegerQ[Unevaluated[n]], HoldAll])]]    ➡️     False",
                "fullTitle": "MatchQ[Hold[2 + 3], Hold[_?(Function[{n}, IntegerQ[Unevaluated[n]], HoldAll])]]    ➡️     False",
                "timedOut": false,
                "duration": 0,
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "",
                "isRoot": false,
                "uuid": "1d9f3ffb-07a1-4a0d-b4ba-3889273fc10b",
                "parentUUID": "5c930cca-4d5c-4c83-8b52-4ea3df5ff08d",
                "skipped": false,
                "isHook": false,
                "context": "\"# Use the three-argument form of RefLink[Function,paclet:ref/Function] or write the pattern using RefLink[Condition,paclet:ref/Condition] to prevent this:\\n\\n\\ndata: \\n  got:              false\\n  expect:           false\\n  expect_evaluated: false\"",
                "state": "passed",
                "err": {
                    "name": "",
                    "message": "",
                    "showDiff": true,
                    "expected": false
                }
            },
            {
                "title": "MatchQ[Hold[2 + 3], Hold[n_] /; IntegerQ[Unevaluated[n]]]    ➡️     False",
                "fullTitle": "MatchQ[Hold[2 + 3], Hold[n_] /; IntegerQ[Unevaluated[n]]]    ➡️     False",
                "timedOut": false,
                "duration": 0,
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "",
                "isRoot": false,
                "uuid": "872389c2-8bb1-4d90-9d3a-97f5d1fe6728",
                "parentUUID": "5c930cca-4d5c-4c83-8b52-4ea3df5ff08d",
                "skipped": false,
                "isHook": false,
                "context": "\"\\n\\ndata: \\n  got:              false\\n  expect:           false\\n  expect_evaluated: false\"",
                "state": "passed",
                "err": {
                    "name": "",
                    "message": "",
                    "showDiff": true,
                    "expected": false
                }
            }
        ],
        "root": true,
        "fullFile": "",
        "file": "",
        "pending": [],
        "passes": [
            "932bbc72-4114-40c3-8bce-2e7d12739a52",
            "8c90e39d-8822-4930-979b-9385ee398a4f",
            "bbf1821e-3516-4777-9a72-fb5c2222eb51",
            "01b319b0-8693-45d5-936e-46e1d4e982ea",
            "976b008c-d034-485f-b5f4-25a7b598a4ce",
            "84e6afd5-a337-461d-bacd-e4876b2077c2",
            "2f4b9727-e259-427a-bc52-bb0f38a5bfa2",
            "e41d8ddb-384f-4a26-8336-dc5b6fdaeb3e",
            "6439af97-955b-4fc0-94f7-bd1b04b96c06",
            "1da07090-61ca-45c0-9f2f-c15f48b1685d",
            "defe87f1-ec6c-4184-959d-e4e16a218f74",
            "52642f10-afeb-4179-a306-922f5d708038",
            "885d93a2-c56a-4913-926f-18291f4854a8",
            "c902ce42-b662-4a50-a697-f2aee156796f",
            "1f4b8a56-7d76-4993-8245-04d442ede10f",
            "41395d8a-e7b8-46e9-9d6d-f974558d2fef",
            "8ef5d483-84fd-4205-bcf4-8de48b5971ba",
            "7da9a0c4-921a-4ec2-a368-0d4dcaca86c6",
            "ca7c6637-46d1-4ec3-9196-63ef3e40d929",
            "9b6cd28d-8026-49d4-a938-233f2dfe8f17",
            "648d6fa0-a0c2-4cdf-ac12-70fe89127cfe",
            "34239639-5e6d-47ad-bd83-9c11e147aa4e",
            "d6b5604c-f661-4b7b-a655-e86a111683ef",
            "83332dfc-642e-48cf-90e4-6b705e190eaa",
            "a21a6153-feba-4f10-9c91-3fceda58e794",
            "1d9f3ffb-07a1-4a0d-b4ba-3889273fc10b",
            "872389c2-8bb1-4d90-9d3a-97f5d1fe6728"
        ],
        "failures": [],
        "skipped": [],
        "duration": 0,
        "rootEmpty": false,
        "_timeout": 0,
        "uuid": "5c930cca-4d5c-4c83-8b52-4ea3df5ff08d",
        "beforeHooks": [],
        "afterHooks": []
    },
    "copyrightYear": 2018
}
