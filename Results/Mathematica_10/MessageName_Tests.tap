#! DOCKER > wolfram -script output/Tests/MessageName_Tests.m
#! TextForm[ColonForm[MessageName[Sin, argx], StringForm[`1` called with `2` arguments; 1 argument is expected., Short[HoldForm[Sin], 3], Short[HoldForm[2], 3]]]]
#! TextForm[ColonForm[MessageName[Exp, argx], StringForm[`1` called with `2` arguments; 1 argument is expected., Short[HoldForm[Exp], 3], Short[HoldForm[2], 3]]]]
#! TextForm[ColonForm[MessageName[$IterationLimit, itlim], StringForm[Iteration limit of `1` exceeded., Short[HoldForm[4096], 3]]]]
#! TextForm[ColonForm[MessageName[Sin, argx], StringForm[`1` called with `2` arguments; 1 argument is expected., Short[HoldForm[Sin], 3], Short[HoldForm[2], 3]]]]
#! TextForm[ColonForm[MessageName[Exp, argx], StringForm[`1` called with `2` arguments; 1 argument is expected., Short[HoldForm[Exp], 3], Short[HoldForm[2], 3]]]]
#! TextForm[ColonForm[MessageName[$IterationLimit, itlim], StringForm[Iteration limit of `1` exceeded., Short[HoldForm[4096], 3]]]]
#! TextForm[ColonForm[MessageName[$IterationLimit, itlim], StringForm[Iteration limit of `1` exceeded., Short[HoldForm[4096], 3]]]]
#! TextForm[ColonForm[MessageName[General, stop], StringForm[Further output of `1` will be suppressed during this calculation., Short[HoldForm[MessageName[$IterationLimit, itlim]], 3]]]]
#! TextForm[ColonForm[MessageName[g, argx], StringForm[`1` called with `2` arguments; 1 argument is expected., Short[2, 3], Short[1, 3]]]]
#! TextForm[ColonForm[MessageName[g, argx], StringForm[`1` called with `2` arguments; 1 argument is expected., Short[2, 3], Short[1, 3]]]]
#! TextForm[ColonForm[MessageName[g, argx], StringForm[`1` called with `2` arguments; 1 argument is expected., Short[2, 3], Short[1, 3]]]]
#! TextForm[ColonForm[MessageName[General, stop], StringForm[Further output of `1` will be suppressed during this calculation., Short[HoldForm[MessageName[g, argx]], 3]]]]
# SYSTEM: Mathematica_10
# TEST: MessageName_Tests
# Process messages generated during an evaluation:
ok  {Sin[1, 2.], BesselJ[3, 4.], Log[5, 6.], Exp[7, 8.]}    ==>     {Sin[1, 2.], 0.430171, 1.11328, Exp[7, 8.]}
    ---
    data:
        got: {Sin[1, 2.], 0.430171, 1.11328, Exp[7, 8.]}
        expect: {Sin[1, 2.], 0.430171, 1.11328, Exp[7, 8.]}
        expect_evaluated: {Sin[1, 2.], 0.430171, 1.11328, Exp[7, 8.]}
    ...
ok  mess = MessageList[-1]    ==>     {Sin::argx, Exp::argx} # skip
ok  mest = Cases[mess, HoldForm[MessageName[f_, s_]] -> {f, s}]    ==>     {{Sin, argx}, {Exp, argx}} # skip
# Define a function that will test another function and give the argx message if needed:
ok  oneargtest[f_, args___] := Module[{nargs = Length[{args}]}, If[nargs != 1, Message[f::argx, nargs, 1]; False, True]]; oneargtest[g, 1, 2]    ==>     False
    ---
    data:
        got: False
        expect: False
        expect_evaluated: False
    ...
# Define g to use the test and return unevaluated when it fails:
ok  g[args___] := Module[{x = First[{args}]}, (x - 1)*(x + 1)] /; oneargtest[g, args]; g[1, 2]    ==>     g[1, 2]
    ---
    data:
        got: g[1, 2]
        expect: g[1, 2]
        expect_evaluated: g[1, 2]
    ...
ok  g[1.5]    ==>     1.25
    ---
    data:
        got: 1.25
        expect: 1.25
        expect_evaluated: 1.25
    ...
