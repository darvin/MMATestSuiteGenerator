#! DOCKER > wolfram -script output/Tests/Array_Tests.m
# SYSTEM: Mathematica_10
# TEST: Array_Tests
ok  Array[f, 10]    ==>     {f[1], f[2], f[3], f[4], f[5], f[6], f[7], f[8], f[9], f[10]}
    ---
    data:
        got: {f[1], f[2], f[3], f[4], f[5], f[6], f[7], f[8], f[9], f[10]}
        expect: {f[1], f[2], f[3], f[4], f[5], f[6], f[7], f[8], f[9], f[10]}
        expect_evaluated: {f[1], f[2], f[3], f[4], f[5], f[6], f[7], f[8], f[9], f[10]}
    ...
ok  Array[1 + #1^2 & , 10]    ==>     {2, 5, 10, 17, 26, 37, 50, 65, 82, 101}
    ---
    data:
        got: {2, 5, 10, 17, 26, 37, 50, 65, 82, 101}
        expect: {2, 5, 10, 17, 26, 37, 50, 65, 82, 101}
        expect_evaluated: {2, 5, 10, 17, 26, 37, 50, 65, 82, 101}
    ...
# Generate a 3*2 array:
ok  Array[f, {3, 2}]    ==>     {{f[1, 1], f[1, 2]}, {f[2, 1], f[2, 2]}, {f[3, 1], f[3, 2]}}
    ---
    data:
        got: {{f[1, 1], f[1, 2]}, {f[2, 1], f[2, 2]}, {f[3, 1], f[3, 2]}}
        expect: {{f[1, 1], f[1, 2]}, {f[2, 1], f[2, 2]}, {f[3, 1], f[3, 2]}}
        expect_evaluated: {{f[1, 1], f[1, 2]}, {f[2, 1], f[2, 2]}, {f[3, 1], f[3, 2]}}
    ...
# Generate a 3*4 array:
ok  Array[10*#1 + #2 & , {3, 4}]    ==>     {{11, 12, 13, 14}, {21, 22, 23, 24}, {31, 32, 33, 34}}
    ---
    data:
        got: {{11, 12, 13, 14}, {21, 22, 23, 24}, {31, 32, 33, 34}}
        expect: {{11, 12, 13, 14}, {21, 22, 23, 24}, {31, 32, 33, 34}}
        expect_evaluated: {{11, 12, 13, 14}, {21, 22, 23, 24}, {31, 32, 33, 34}}
    ...
# Use index origin 0 instead of 1:
ok  Array[f, 10, 0]    ==>     {f[0], f[1], f[2], f[3], f[4], f[5], f[6], f[7], f[8], f[9]}
    ---
    data:
        got: {f[0], f[1], f[2], f[3], f[4], f[5], f[6], f[7], f[8], f[9]}
        expect: {f[0], f[1], f[2], f[3], f[4], f[5], f[6], f[7], f[8], f[9]}
        expect_evaluated: {f[0], f[1], f[2], f[3], f[4], f[5], f[6], f[7], f[8], f[9]}
    ...
# Start with indices 0 and 4 instead of 1: 
ok  Array[f, {2, 3}, {0, 4}]    ==>     {{f[0, 4], f[0, 5], f[0, 6]}, {f[1, 4], f[1, 5], f[1, 6]}}
    ---
    data:
        got: {{f[0, 4], f[0, 5], f[0, 6]}, {f[1, 4], f[1, 5], f[1, 6]}}
        expect: {{f[0, 4], f[0, 5], f[0, 6]}, {f[1, 4], f[1, 5], f[1, 6]}}
        expect_evaluated: {{f[0, 4], f[0, 5], f[0, 6]}, {f[1, 4], f[1, 5], f[1, 6]}}
    ...
# Sample between 0 and 1:
ok  Array[f, 10, {0, 1}]    ==>     {f[0], f[1/9], f[2/9], f[1/3], f[4/9], f[5/9], f[2/3], f[7/9], f[8/9], f[1]}
    ---
    data:
        got: {f[0], f[1/9], f[2/9], f[1/3], f[4/9], f[5/9], f[2/3], f[7/9], f[8/9], f[1]}
        expect: {f[0], f[1/9], f[2/9], f[1/3], f[4/9], f[5/9], f[2/3], f[7/9], f[8/9], f[1]}
        expect_evaluated: {f[0], f[1/9], f[2/9], f[1/3], f[4/9], f[5/9], f[2/3], f[7/9], f[8/9], f[1]}
    ...
# Use ranges {-1/2,1/2} and {0,1}:
ok  Array[f, {2, 3}, {{-2^(-1), 1/2}, {0, 1}}]    ==>     {{f[-(1/2), 0], f[-(1/2), 1/2], f[-(1/2), 1]}, {f[1/2, 0], f[1/2, 1/2], f[1/2, 1]}}
    ---
    data:
        got: {{f[-1/2, 0], f[-1/2, 1/2], f[-1/2, 1]}, {f[1/2, 0], f[1/2, 1/2], f[1/2, 1]}}
        expect: {{f[-(1/2), 0], f[-(1/2), 1/2], f[-(1/2), 1]}, {f[1/2, 0], f[1/2, 1/2], f[1/2, 1]}}
        expect_evaluated: {{f[-1/2, 0], f[-1/2, 1/2], f[-1/2, 1]}, {f[1/2, 0], f[1/2, 1/2], f[1/2, 1]}}
    ...
# Use ## to pick up a sequence of indices:
ok  Array[FromDigits[{##1}] & , {2, 3, 4}]    ==>     {{{111, 112, 113, 114}, {121, 122, 123, 124}, {131, 132, 133, 134}}, {{211, 212, 213, 214}, {221, 222, 223, 224}, {231, 232, 233, 234}}}
    ---
    data:
        got: {{{111, 112, 113, 114}, {121, 122, 123, 124}, {131, 132, 133, 134}}, {{211, 212, 213, 214}, {221, 222, 223, 224}, {231, 232, 233, 234}}}
        expect: {{{111, 112, 113, 114}, {121, 122, 123, 124}, {131, 132, 133, 134}}, {{211, 212, 213, 214}, {221, 222, 223, 224}, {231, 232, 233, 234}}}
        expect_evaluated: {{{111, 112, 113, 114}, {121, 122, 123, 124}, {131, 132, 133, 134}}, {{211, 212, 213, 214}, {221, 222, 223, 224}, {231, 232, 233, 234}}}
    ...
# Use RefLink[Plus,paclet:ref/Plus] instead of RefLink[List,paclet:ref/List] to combine elements:
ok  Array[a, {2, 3}, 1, Plus]    ==>     a[1, 1] + a[1, 2] + a[1, 3] + a[2, 1] + a[2, 2] + a[2, 3]
    ---
    data:
        got: a[1, 1] + a[1, 2] + a[1, 3] + a[2, 1] + a[2, 2] + a[2, 3]
        expect: a[1, 1] + a[1, 2] + a[1, 3] + a[2, 1] + a[2, 2] + a[2, 3]
        expect_evaluated: a[1, 1] + a[1, 2] + a[1, 3] + a[2, 1] + a[2, 2] + a[2, 3]
    ...
# 3*3 matrix of 0s:
ok  Array[0 & , {3, 3}]    ==>     {{0, 0, 0}, {0, 0, 0}, {0, 0, 0}}
    ---
    data:
        got: {{0, 0, 0}, {0, 0, 0}, {0, 0, 0}}
        expect: {{0, 0, 0}, {0, 0, 0}, {0, 0, 0}}
        expect_evaluated: {{0, 0, 0}, {0, 0, 0}, {0, 0, 0}}
    ...
# Totally antisymmetric tensor:
ok  Array[Signature[{##1}] & , {3, 3, 3}]    ==>     {{{0, 0, 0}, {0, 0, 1}, {0, -1, 0}}, {{0, 0, -1}, {0, 0, 0}, {1, 0, 0}}, {{0, 1, 0}, {-1, 0, 0}, {0, 0, 0}}}
    ---
    data:
        got: {{{0, 0, 0}, {0, 0, 1}, {0, -1, 0}}, {{0, 0, -1}, {0, 0, 0}, {1, 0, 0}}, {{0, 1, 0}, {-1, 0, 0}, {0, 0, 0}}}
        expect: {{{0, 0, 0}, {0, 0, 1}, {0, -1, 0}}, {{0, 0, -1}, {0, 0, 0}, {1, 0, 0}}, {{0, 1, 0}, {-1, 0, 0}, {0, 0, 0}}}
        expect_evaluated: {{{0, 0, 0}, {0, 0, 1}, {0, -1, 0}}, {{0, 0, -1}, {0, 0, 0}, {1, 0, 0}}, {{0, 1, 0}, {-1, 0, 0}, {0, 0, 0}}}
    ...
# Lower-triangular matrix:
ok  MatrixForm[Boole[Array[Greater, {5, 5}]]]    ==>     0*0*0*0*0*1*0*0*0*0*1*1*0*0*0*1*1*1*0*0*1*1*1*1*0 # skip
# Matrix with generic symbolic entries:
ok  m = Array[Subscript[a, ##1] & , {3, 4}]    ==>     {{Subscript[a, 1, 1], Subscript[a, 1, 2], Subscript[a, 1, 3], Subscript[a, 1, 4]}, {Subscript[a, 2, 1], Subscript[a, 2, 2], Subscript[a, 2, 3], Subscript[a, 2, 4]}, {Subscript[a, 3, 1], Subscript[a, 3, 2], Subscript[a, 3, 3], Subscript[a, 3, 4]}}
    ---
    data:
        got: {{Subscript[a, 1, 1], Subscript[a, 1, 2], Subscript[a, 1, 3], Subscript[a, 1, 4]}, {Subscript[a, 2, 1], Subscript[a, 2, 2], Subscript[a, 2, 3], Subscript[a, 2, 4]}, {Subscript[a, 3, 1], Subscript[a, 3, 2], Subscript[a, 3, 3], Subscript[a, 3, 4]}}
        expect: {{Subscript[a, 1, 1], Subscript[a, 1, 2], Subscript[a, 1, 3], Subscript[a, 1, 4]}, {Subscript[a, 2, 1], Subscript[a, 2, 2], Subscript[a, 2, 3], Subscript[a, 2, 4]}, {Subscript[a, 3, 1], Subscript[a, 3, 2], Subscript[a, 3, 3], Subscript[a, 3, 4]}}
        expect_evaluated: {{Subscript[a, 1, 1], Subscript[a, 1, 2], Subscript[a, 1, 3], Subscript[a, 1, 4]}, {Subscript[a, 2, 1], Subscript[a, 2, 2], Subscript[a, 2, 3], Subscript[a, 2, 4]}, {Subscript[a, 3, 1], Subscript[a, 3, 2], Subscript[a, 3, 3], Subscript[a, 3, 4]}}
    ...
ok  MatrixForm[m]    ==>     Subscript[a, 1, 1]*Subscript[a, 1, 2]*Subscript[a, 1, 3]*Subscript[a, 1, 4]*Subscript[a, 2, 1]*Subscript[a, 2, 2]*Subscript[a, 2, 3]*Subscript[a, 2, 4]*Subscript[a, 3, 1]*Subscript[a, 3, 2]*Subscript[a, 3, 3]*Subscript[a, 3, 4] # skip
# Use it to see the effects of some linear algebra functions:
ok  HoldComplete[MatrixForm[RowReduce[m]]]    ==>     $Failed # skip
ok  Det[Take[m, All, 3]]    ==>     (-Subscript[a, 1, 3])*Subscript[a, 2, 2]*Subscript[a, 3, 1] + Subscript[a, 1, 2]*Subscript[a, 2, 3]*Subscript[a, 3, 1] + Subscript[a, 1, 3]*Subscript[a, 2, 1]*Subscript[a, 3, 2] - Subscript[a, 1, 1]*Subscript[a, 2, 3]*Subscript[a, 3, 2] - Subscript[a, 1, 2]*Subscript[a, 2, 1]*Subscript[a, 3, 3] + Subscript[a, 1, 1]*Subscript[a, 2, 2]*Subscript[a, 3, 3]
    ---
    data:
        got: -(Subscript[a, 1, 3]*Subscript[a, 2, 2]*Subscript[a, 3, 1]) + Subscript[a, 1, 2]*Subscript[a, 2, 3]*Subscript[a, 3, 1] + Subscript[a, 1, 3]*Subscript[a, 2, 1]*Subscript[a, 3, 2] - Subscript[a, 1, 1]*Subscript[a, 2, 3]*Subscript[a, 3, 2] - Subscript[a, 1, 2]*Subscript[a, 2, 1]*Subscript[a, 3, 3] + Subscript[a, 1, 1]*Subscript[a, 2, 2]*Subscript[a, 3, 3]
        expect: (-Subscript[a, 1, 3])*Subscript[a, 2, 2]*Subscript[a, 3, 1] + Subscript[a, 1, 2]*Subscript[a, 2, 3]*Subscript[a, 3, 1] + Subscript[a, 1, 3]*Subscript[a, 2, 1]*Subscript[a, 3, 2] - Subscript[a, 1, 1]*Subscript[a, 2, 3]*Subscript[a, 3, 2] - Subscript[a, 1, 2]*Subscript[a, 2, 1]*Subscript[a, 3, 3] + Subscript[a, 1, 1]*Subscript[a, 2, 2]*Subscript[a, 3, 3]
        expect_evaluated: -(Subscript[a, 1, 3]*Subscript[a, 2, 2]*Subscript[a, 3, 1]) + Subscript[a, 1, 2]*Subscript[a, 2, 3]*Subscript[a, 3, 1] + Subscript[a, 1, 3]*Subscript[a, 2, 1]*Subscript[a, 3, 2] - Subscript[a, 1, 1]*Subscript[a, 2, 3]*Subscript[a, 3, 2] - Subscript[a, 1, 2]*Subscript[a, 2, 1]*Subscript[a, 3, 3] + Subscript[a, 1, 1]*Subscript[a, 2, 2]*Subscript[a, 3, 3]
    ...
# Sample a function uniformly on an interval:
ok  HoldComplete[ListPlot[Array[Sin[2*#1] - Cos[3*#1] & , 50, {0, 2*Pi}], Filling -> Axis, DataRange -> {0, 2*Pi}]]    ==>     $Failed # skip
ok  ConstantArray[c, dims] === Array[c & , dims]    ==>     True # skip
# When c is a machine number, RefLink[ConstantArray,paclet:ref/ConstantArray] is much faster for large arrays:
ok  {First[Timing[ca = ConstantArray[0., {2000, 2000}]]], First[Timing[a = Array[0. & , {2000, 2000}]]], ca === a}    ==>     {0.03, 0.23, True} # skip
# Set up the RefLink[Table,paclet:ref/Table] limit specifications:
ok  v = Array[x, Length[dims]]; tl = Transpose[{v, dims}]    ==>     {{x[1], 4}, {x[2], 5}} # skip
# The result is identical to the array generated using RefLink[Array,paclet:ref/Array]:
ok  a === t    ==>     True # skip
ok  HoldComplete[s = SparseArray[{i_, j_} -> f[i, j], dims]]    ==>     $Failed # skip
ok  a = Array[f, dims]    ==>     {{-1, -3, -5, -7, -9, -11, -13, -15}, {0, -2, -4, -6, -8, -10, -12, -14}, {1, -1, -3, -5, -7, -9, -11, -13}, {2, 0, -2, -4, -6, -8, -10, -12}, {3, 1, -1, -3, -5, -7, -9, -11}, {4, 2, 0, -2, -4, -6, -8, -10}, {5, 3, 1, -1, -3, -5, -7, -9}, {6, 4, 2, 0, -2, -4, -6, -8}, {7, 5, 3, 1, -1, -3, -5, -7}} # skip
# The results are RefLink[Equal,paclet:ref/Equal]:
ok  s == a    ==>     True # skip
# The objects are not identical, but the represented arrays are:
ok  {s === a, Normal[s] === a}    ==>     {False, True} # skip
# Array of powers:
ok  Array[Power, {5, 5}]    ==>     {{1, 1, 1, 1, 1}, {2, 4, 8, 16, 32}, {3, 9, 27, 81, 243}, {4, 16, 64, 256, 1024}, {5, 25, 125, 625, 3125}}
    ---
    data:
        got: {{1, 1, 1, 1, 1}, {2, 4, 8, 16, 32}, {3, 9, 27, 81, 243}, {4, 16, 64, 256, 1024}, {5, 25, 125, 625, 3125}}
        expect: {{1, 1, 1, 1, 1}, {2, 4, 8, 16, 32}, {3, 9, 27, 81, 243}, {4, 16, 64, 256, 1024}, {5, 25, 125, 625, 3125}}
        expect_evaluated: {{1, 1, 1, 1, 1}, {2, 4, 8, 16, 32}, {3, 9, 27, 81, 243}, {4, 16, 64, 256, 1024}, {5, 25, 125, 625, 3125}}
    ...
# Array of GCDs:
ok  HoldComplete[ArrayPlot[Array[GCD, {20, 20}]]]    ==>     $Failed # skip
# Array of arrays:
ok  Array[Array[x & , #1] & , {6}]    ==>     {{x}, {x, x}, {x, x, x}, {x, x, x, x}, {x, x, x, x, x}, {x, x, x, x, x, x}}
    ---
    data:
        got: {{x}, {x, x}, {x, x, x}, {x, x, x, x}, {x, x, x, x, x}, {x, x, x, x, x, x}}
        expect: {{x}, {x, x}, {x, x, x}, {x, x, x, x}, {x, x, x, x, x}, {x, x, x, x, x, x}}
        expect_evaluated: {{x}, {x, x}, {x, x, x}, {x, x, x, x}, {x, x, x, x, x}, {x, x, x, x, x, x}}
    ...
