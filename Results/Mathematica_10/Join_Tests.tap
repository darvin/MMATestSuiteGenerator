# SYSTEM: Mathematica_10
# TEST: Join_Tests
# OUTPUT: output/Results/Mathematica_10/Join_Tests.json
ok  Join[{a, b, c}, {x, y}, {u, v, w}]    ==>     {a, b, c, x, y, u, v, w}
    ---
    data:
        got: {a, b, c, x, y, u, v, w}
        expect: {a, b, c, x, y, u, v, w}
        expect_evaluated: {a, b, c, x, y, u, v, w}
    ...
# Infix syntax:
ok  Join[Join[{a, b, c}, {x, y}], {u, v, w}]    ==>     {a, b, c, x, y, u, v, w}
    ---
    data:
        got: {a, b, c, x, y, u, v, w}
        expect: {a, b, c, x, y, u, v, w}
        expect_evaluated: {a, b, c, x, y, u, v, w}
    ...
# Join two associations:
ok  Join[<| a -> b |>, <| c -> d, a -> e |>]    ==>     <| a -> e, c -> d |>
    ---
    data:
        got: <|a -> e, c -> d|>
        expect: <| a -> e, c -> d |>
        expect_evaluated: <|a -> e, c -> d|>
    ...
# Join two matrices to make longer columns:
ok  Join[{{a, b}, {c, d}}, {{1, 2}, {3, 4}}]    ==>     {{a, b}, {c, d}, {1, 2}, {3, 4}}
    ---
    data:
        got: {{a, b}, {c, d}, {1, 2}, {3, 4}}
        expect: {{a, b}, {c, d}, {1, 2}, {3, 4}}
        expect_evaluated: {{a, b}, {c, d}, {1, 2}, {3, 4}}
    ...
# Join columns of two matrices to make longer rows:
ok  Join[{{a, b}, {c, d}}, {{1, 2}, {3, 4}}, 2]    ==>     {{a, b, 1, 2}, {c, d, 3, 4}}
    ---
    data:
        got: {{a, b, 1, 2}, {c, d, 3, 4}}
        expect: {{a, b, 1, 2}, {c, d, 3, 4}}
        expect_evaluated: {{a, b, 1, 2}, {c, d, 3, 4}}
    ...
# With ragged arrays, successive elements are effectively concatenated:
ok  Join[{{1}, {5, 6}}, {{2, 3}, {7}}, {{4}, {8}}, 2]    ==>     {{1, 2, 3, 4}, {5, 6, 7, 8}}
    ---
    data:
        got: {{1, 2, 3, 4}, {5, 6, 7, 8}}
        expect: {{1, 2, 3, 4}, {5, 6, 7, 8}}
        expect_evaluated: {{1, 2, 3, 4}, {5, 6, 7, 8}}
    ...
# The second row comes from the concatenation of nothing with {3,4}:
ok  Join[{{x}}, {{1, 2}, {3, 4}}, 2]    ==>     {{x, 1, 2}, {3, 4}}
    ---
    data:
        got: {{x, 1, 2}, {3, 4}}
        expect: {{x, 1, 2}, {3, 4}}
        expect_evaluated: {{x, 1, 2}, {3, 4}}
    ...
ok  Join[aa, bb]    ==>     {{{Subscript[a, 1], Subscript[a, 1]}, {Subscript[a, 1], Subscript[a, 1]}}, {{Subscript[a, 2], Subscript[a, 2]}, {Subscript[a, 2], Subscript[a, 2]}}, {{Subscript[b, 1], Subscript[b, 1]}, {Subscript[b, 1], Subscript[b, 1]}}, {{Subscript[b, 2], Subscript[b, 2]}, {Subscript[b, 2], Subscript[b, 2]}}} # skip
ok  Join[aa, bb, 2]    ==>     {{{Subscript[a, 1], Subscript[a, 1]}, {Subscript[a, 1], Subscript[a, 1]}, {Subscript[b, 1], Subscript[b, 1]}, {Subscript[b, 1], Subscript[b, 1]}}, {{Subscript[a, 2], Subscript[a, 2]}, {Subscript[a, 2], Subscript[a, 2]}, {Subscript[b, 2], Subscript[b, 2]}, {Subscript[b, 2], Subscript[b, 2]}}} # skip
ok  Join[aa, bb, 3]    ==>     {{{Subscript[a, 1], Subscript[a, 1], Subscript[b, 1], Subscript[b, 1]}, {Subscript[a, 1], Subscript[a, 1], Subscript[b, 1], Subscript[b, 1]}}, {{Subscript[a, 2], Subscript[a, 2], Subscript[b, 2], Subscript[b, 2]}, {Subscript[a, 2], Subscript[a, 2], Subscript[b, 2], Subscript[b, 2]}}} # skip
# Join expressions with any head:
ok  Join[f[a, b, c], f[x, y], f[u, v, w]]    ==>     f[a, b, c, x, y, u, v, w]
    ---
    data:
        got: f[a, b, c, x, y, u, v, w]
        expect: f[a, b, c, x, y, u, v, w]
        expect_evaluated: f[a, b, c, x, y, u, v, w]
    ...
# RefLink[Join,paclet:ref/Join] works with RefLink[SparseArray,paclet:ref/SparseArray] objects:
ok  HoldComplete[SparseArray[Range[5]]]    ==>     $Failed # skip
ok  HoldComplete[Join[%, %, %]]    ==>     $Failed # skip
# Augment a matrix by adding a row:
ok  MatrixForm[Join[IdentityMatrix[3], {{1, 2, 3}}]]    ==>     1*0*0*0*1*0*0*0*1*1*2*3 # skip
# Augment by a column:
ok  MatrixForm[Join[IdentityMatrix[3], Transpose[{{1, 2, 3}}], 2]]    ==>     1*0*0*1*0*1*0*2*0*0*1*3 # skip
# Make a block matrix:
ok  MatrixForm[Join[Join[Subscript[a, 1]*Subscript[a, 1]*Subscript[a, 1]*Subscript[a, 2]*Subscript[a, 2]*Subscript[a, 2]*Subscript[a, 3]*Subscript[a, 3]*Subscript[a, 3], Subscript[b, 1]*Subscript[b, 1]*Subscript[b, 1]*Subscript[b, 2]*Subscript[b, 2]*Subscript[b, 2]*Subscript[b, 3]*Subscript[b, 3]*Subscript[b, 3], 2], Join[Subscript[c, 1]*Subscript[c, 1]*Subscript[c, 1]*Subscript[c, 2]*Subscript[c, 2]*Subscript[c, 2]*Subscript[c, 3]*Subscript[c, 3]*Subscript[c, 3], Subscript[d, 1]*Subscript[d, 1]*Subscript[d, 1]*Subscript[d, 2]*Subscript[d, 2]*Subscript[d, 2]*Subscript[d, 3]*Subscript[d, 3]*Subscript[d, 3], 2]]]    ==>     Subscript[a, 1]*Subscript[a, 1]*Subscript[a, 1]*Subscript[b, 1]*Subscript[b, 1]*Subscript[b, 1]*Subscript[a, 2]*Subscript[a, 2]*Subscript[a, 2]*Subscript[b, 2]*Subscript[b, 2]*Subscript[b, 2]*Subscript[a, 3]*Subscript[a, 3]*Subscript[a, 3]*Subscript[b, 3]*Subscript[b, 3]*Subscript[b, 3]*Subscript[c, 1]*Subscript[c, 1]*Subscript[c, 1]*Subscript[d, 1]*Subscript[d, 1]*Subscript[d, 1]*Subscript[c, 2]*Subscript[c, 2]*Subscript[c, 2]*Subscript[d, 2]*Subscript[d, 2]*Subscript[d, 2]*Subscript[c, 3]*Subscript[c, 3]*Subscript[c, 3]*Subscript[d, 3]*Subscript[d, 3]*Subscript[d, 3] # skip
# This can also be done with RefLink[ArrayFlatten,paclet:ref/ArrayFlatten]:
ok  MatrixForm[ArrayFlatten[(Subscript[a, 1]*Subscript[a, 1]*Subscript[a, 1]*Subscript[a, 2]*Subscript[a, 2]*Subscript[a, 2]*Subscript[a, 3]*Subscript[a, 3]*Subscript[a, 3])*(Subscript[b, 1]*Subscript[b, 1]*Subscript[b, 1]*Subscript[b, 2]*Subscript[b, 2]*Subscript[b, 2]*Subscript[b, 3]*Subscript[b, 3]*Subscript[b, 3])*(Subscript[c, 1]*Subscript[c, 1]*Subscript[c, 1]*Subscript[c, 2]*Subscript[c, 2]*Subscript[c, 2]*Subscript[c, 3]*Subscript[c, 3]*Subscript[c, 3])*(Subscript[d, 1]*Subscript[d, 1]*Subscript[d, 1]*Subscript[d, 2]*Subscript[d, 2]*Subscript[d, 2]*Subscript[d, 3]*Subscript[d, 3]*Subscript[d, 3])]]    ==>     Subscript[a, 1]*Subscript[a, 1]*Subscript[a, 1]*Subscript[b, 1]*Subscript[b, 1]*Subscript[b, 1]*Subscript[a, 2]*Subscript[a, 2]*Subscript[a, 2]*Subscript[b, 2]*Subscript[b, 2]*Subscript[b, 2]*Subscript[a, 3]*Subscript[a, 3]*Subscript[a, 3]*Subscript[b, 3]*Subscript[b, 3]*Subscript[b, 3]*Subscript[c, 1]*Subscript[c, 1]*Subscript[c, 1]*Subscript[d, 1]*Subscript[d, 1]*Subscript[d, 1]*Subscript[c, 2]*Subscript[c, 2]*Subscript[c, 2]*Subscript[d, 2]*Subscript[d, 2]*Subscript[d, 2]*Subscript[c, 3]*Subscript[c, 3]*Subscript[c, 3]*Subscript[d, 3]*Subscript[d, 3]*Subscript[d, 3] # skip
# RefLink[Join,paclet:ref/Join][Subscript[list, 1],Subscript[list, 2],\[Ellipsis]] is equivalent to RefLink[Flatten,paclet:ref/Flatten][{Subscript[list, 1],Subscript[list, 2],\[Ellipsis]},1]:
ok  Join[{1, 2}, {{a, b}, {c, d}}, {3, 4, 5}]    ==>     {1, 2, {a, b}, {c, d}, 3, 4, 5}
    ---
    data:
        got: {1, 2, {a, b}, {c, d}, 3, 4, 5}
        expect: {1, 2, {a, b}, {c, d}, 3, 4, 5}
        expect_evaluated: {1, 2, {a, b}, {c, d}, 3, 4, 5}
    ...
ok  Flatten[{{1, 2}, {{a, b}, {c, d}}, {3, 4, 5}}, 1]    ==>     {1, 2, {a, b}, {c, d}, 3, 4, 5}
    ---
    data:
        got: {1, 2, {a, b}, {c, d}, 3, 4, 5}
        expect: {1, 2, {a, b}, {c, d}, 3, 4, 5}
        expect_evaluated: {1, 2, {a, b}, {c, d}, 3, 4, 5}
    ...
# Successively double a list by joining to itself:
ok  NestList[Join[#1, #1] & , {x}, 4]    ==>     {{x}, {x, x}, {x, x, x, x}, {x, x, x, x, x, x, x, x}, {x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x}}
    ---
    data:
        got: {{x}, {x, x}, {x, x, x, x}, {x, x, x, x, x, x, x, x}, {x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x}}
        expect: {{x}, {x, x}, {x, x, x, x}, {x, x, x, x, x, x, x, x}, {x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x}}
        expect_evaluated: {{x}, {x, x}, {x, x, x, x}, {x, x, x, x, x, x, x, x}, {x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x}}
    ...
# Build up the Thue\[Dash]Morse sequence [WebLink[more info,http://www.wolframscience.com/nksonline/page-889c-text]]:
ok  NestList[Join[#1, 1 - #1] & , {1}, 5]    ==>     {{1}, {1, 0}, {1, 0, 0, 1}, {1, 0, 0, 1, 0, 1, 1, 0}, {1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1}, {1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0}}
    ---
    data:
        got: {{1}, {1, 0}, {1, 0, 0, 1}, {1, 0, 0, 1, 0, 1, 1, 0}, {1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1}, {1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0}}
        expect: {{1}, {1, 0}, {1, 0, 0, 1}, {1, 0, 0, 1, 0, 1, 1, 0}, {1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1}, {1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0}}
        expect_evaluated: {{1}, {1, 0}, {1, 0, 0, 1}, {1, 0, 0, 1, 0, 1, 1, 0}, {1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1}, {1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0}}
    ...
