#! DOCKER > wolfram -script output/Tests/Max_Tests.m
# SYSTEM: Mathematica_10
# TEST: Max_Tests
# Maximum of two numbers:
ok  Max[9, 2]    ==>     9
    ---
    data:
        got: 9
        expect: 9
        expect_evaluated: 9
    ...
# Maximum of a list:
ok  Max[{4, 1, 7, 2}]    ==>     7
    ---
    data:
        got: 7
        expect: 7
        expect_evaluated: 7
    ...
# RefLink[Max,paclet:ref/Max] works with exact numeric quantities:
ok  Max[{Pi, E, Sqrt[2]}]    ==>     Pi
    ---
    data:
        got: Pi
        expect: Pi
        expect_evaluated: Pi
    ...
# RefLink[Max,paclet:ref/Max] effectively flattens out all lists:
ok  Max[{3, 4, 1}, {2, 2}, 7]    ==>     7
    ---
    data:
        got: 7
        expect: 7
        expect_evaluated: 7
    ...
ok  Max[mat]    ==>     6 # skip
# The maxima of all rows:
ok  Max /@ mat    ==>     {2, 6, 0} # skip
# The maxima of all columns:
ok  Max /@ Transpose[mat]    ==>     {0, 2, 4, 6} # skip
# Basic symbolic simplification is done automatically:
ok  Max[x, y, Max[x, z]]    ==>     Max[x, y, z]
    ---
    data:
        got: Max[x, y, z]
        expect: Max[x, y, z]
        expect_evaluated: Max[x, y, z]
    ...
# Simplify a symbolic RefLink[Max,paclet:ref/Max]:
ok  Simplify[Max[1 - x, x, 1 + x]]    ==>     Max[1 - x, 1 + x]
    ---
    data:
        got: Max[1 - x, 1 + x]
        expect: Max[1 - x, 1 + x]
        expect_evaluated: Max[1 - x, 1 + x]
    ...
# Integrate expressions involving RefLink[Max,paclet:ref/Max]:
ok  Integrate[Max[Sin[x], Cos[x]], {x, 0, Pi}]    ==>     1 + Sqrt[2] # skip
ok  Integrate[Exp[Max[x, a - x]], {x, 0, 1}]    ==>     Inequality[Piecewise[-1] + E*a, LessEqual, 0*(-1 + E)*E^(-1 + a)*a, GreaterEqual, 2*E - 2*E^(a/2) + E^a*True] # skip
ok  HoldComplete[Plot[Max[Sin[x], Cos[x]], {x, 0, 2*Pi}, PlotRange -> All]]    ==>     $Failed # skip
# Reduce inequalities involving RefLink[Max,paclet:ref/Max]:
ok  Reduce[{Max[Sin[x], Cos[x]] > 0, 0 < x < 20}, x]    ==>     0 < x < Pi || (3*Pi)/2 < x < 3*Pi || (7*Pi)/2 < x < 5*Pi || (11*Pi)/2 < x < 20 # skip
# RefLink[Max,paclet:ref/Max] works on sparse arrays:
ok  Max[SparseArray[{1 -> x, 2 -> y}, 10]]    ==>     Max[0, x, y]
    ---
    data:
        got: Max[0, x, y]
        expect: Max[0, x, y]
        expect_evaluated: Max[0, x, y]
    ...
# Use in bounds of iterator variables:
ok  Table[i*j*k, {i, 3}, {j, 3}, {k, Max[i, j], 3}]    ==>     {{{1, 2, 3}, {4, 6}, {9}}, {{4, 6}, {8, 12}, {18}}, {{9}, {18}, {27}}}
    ---
    data:
        got: {{{1, 2, 3}, {4, 6}, {9}}, {{4, 6}, {8, 12}, {18}}, {{9}, {18}, {27}}}
        expect: {{{1, 2, 3}, {4, 6}, {9}}, {{4, 6}, {8, 12}, {18}}, {{9}, {18}, {27}}}
        expect_evaluated: {{{1, 2, 3}, {4, 6}, {9}}, {{4, 6}, {8, 12}, {18}}, {{9}, {18}, {27}}}
    ...
# Cumulative maxima:
ok  Rest[FoldList[Max, 0, {4, 2, 8, 3, 9, 12, 11, 18, 10}]]    ==>     {4, 4, 8, 8, 9, 12, 12, 18, 18}
    ---
    data:
        got: {4, 4, 8, 8, 9, 12, 12, 18, 18}
        expect: {4, 4, 8, 8, 9, 12, 12, 18, 18}
        expect_evaluated: {4, 4, 8, 8, 9, 12, 12, 18, 18}
    ...
# Find the highest point of a plotted curve:
ok  HoldComplete[Plot[Sin[x] + Sin[Sqrt[3]*x], {x, 0, 20*Pi}]]    ==>     $Failed # skip
ok  Max[Last /@ Level[Cases[%, _Line, Infinity], {-2}]]    ==>     1.9922 # skip
# Mean of the length ratio of a randomly broken stick:
ok  Integrate[Min[x, 1 - x]/Max[x, 1 - x], {x, 0, 1}]    ==>     -1 + 2*Log[2]
    ---
    data:
        got: -1 + 2*Log[2]
        expect: -1 + 2*Log[2]
        expect_evaluated: -1 + 2*Log[2]
    ...
# R-function-based solid modeling:
ok  HoldComplete[RegionPlot3D[Max[y^3 + y*z - x^2, x*z + y*(y^2 - z)] > 0, {x, -3, 3}, {y, -3, 3}, {z, -3, 3}]]    ==>     $Failed # skip
ok  Max[]    ==>     -Infinity
    ---
    data:
        got: -Infinity
        expect: -Infinity
        expect_evaluated: -Infinity
    ...
# RefLink[Max,paclet:ref/Max] is RefLink[Flat,paclet:ref/Flat] and RefLink[Orderless,paclet:ref/Orderless]:
ok  Max[Max[z, y], x]    ==>     Max[x, y, z]
    ---
    data:
        got: Max[x, y, z]
        expect: Max[x, y, z]
        expect_evaluated: Max[x, y, z]
    ...
ok  PiecewiseExpand[Max[Min[x, y], z]]    ==>     Piecewise[x]*x - y <= 0 && x - z > 0*y*x - y > 0 && y - z > 0*z*True # skip
# Use RefLink[FullSimplify,paclet:ref/FullSimplify] to simplify RefLink[Max,paclet:ref/Max] expressions:
ok  FullSimplify[Max[x, y] - Max[-x, -y]]    ==>     Piecewise[2]*y*x == y*x + y*True # skip
ok  FullSimplify[Min[x, y] - (x + 2*y - Sqrt[(x - y)^2])/2, Element[{x, y}, Reals]]    ==>     -(y/2)
    ---
    data:
        got: -y/2
        expect: -(y/2)
        expect_evaluated: -y/2
    ...
# Maximize a function containing RefLink[Max,paclet:ref/Max]:
ok  Maximize[Max[-x^2 + 2*x + 2, -x^4 + 3*x + 2], x]    ==>     {2 + (9*3^(1/3))/(4*2^(2/3)), {x -> 3^(1/3)/2^(2/3)}}
    ---
    data:
        got: {2 + (9*3^(1/3))/(4*2^(2/3)), {x -> 3^(1/3)/2^(2/3)}}
        expect: {2 + (9*3^(1/3))/(4*2^(2/3)), {x -> 3^(1/3)/2^(2/3)}}
        expect_evaluated: {2 + (9*3^(1/3))/(4*2^(2/3)), {x -> 3^(1/3)/2^(2/3)}}
    ...
# RefLink[Max,paclet:ref/Max] can be differentiated:
ok  Derivative[1][Max][x]    ==>     1
    ---
    data:
        got: 1
        expect: 1
        expect_evaluated: 1
    ...
ok  Derivative[1, 0][Max]    ==>     Piecewise[1]*#1 - #2 >= 0*0*True &  # skip
# RefLink[Max,paclet:ref/Max] flattens lists, rather than being RefLink[Listable,paclet:ref/Listable]:
ok  Max[{a, b}, {c, d}]    ==>     Max[a, b, c, d]
    ---
    data:
        got: Max[a, b, c, d]
        expect: Max[a, b, c, d]
        expect_evaluated: Max[a, b, c, d]
    ...
# The one-argument form evaluates for any argument:
ok  Max[I]    ==>     I
    ---
    data:
        got: I
        expect: I
        expect_evaluated: I
    ...
# Two-dimensional sublevel sets: 
ok  HoldComplete[Table[RegionPlot[Max[x, y] < t, {x, -2, 2}, {y, -2, 2}, PlotLabel -> Max[x, y] < t], {t, {-1, 0, 1}}]]    ==>     $Failed # skip
ok  HoldComplete[Table[RegionPlot[Max[x, y] > t, {x, -2, 2}, {y, -2, 2}, PlotLabel -> Max[x, y] > t], {t, {-1, 0, 1}}]]    ==>     $Failed # skip
# Three-dimensional sublevel sets: 
ok  HoldComplete[Table[RegionPlot3D[Max[x, y, z] < t, {x, -2, 2}, {y, -2, 2}, {z, -2, 2}, PlotLabel -> Max[x, y, z] < t], {t, {-1, 0, 1}}]]    ==>     $Failed # skip
ok  HoldComplete[Table[RegionPlot3D[Max[x, y, z] > t, {x, -2, 2}, {y, -2, 2}, {z, -2, 2}, PlotLabel -> Max[x, y, z] > t], {t, {-1, 0, 1}}]]    ==>     $Failed # skip
