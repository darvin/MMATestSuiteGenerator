#! DOCKER > wolfram -script output/Tests/IntegerDigits_Tests.m
#! TextForm[ColonForm[MessageName[$IterationLimit, itlim], StringForm[Iteration limit of `1` exceeded., Short[HoldForm[4096], 3]]]]
# SYSTEM: Mathematica_10
# TEST: IntegerDigits_Tests
# Find digits in base 10:
ok  IntegerDigits[58127]    ==>     {5, 8, 1, 2, 7}
    ---
    data:
        got: {5, 8, 1, 2, 7}
        expect: {5, 8, 1, 2, 7}
        expect_evaluated: {5, 8, 1, 2, 7}
    ...
# Find digits in base 2:
ok  IntegerDigits[58127, 2]    ==>     {1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1}
    ---
    data:
        got: {1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1}
        expect: {1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1}
        expect_evaluated: {1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1}
    ...
# Bases larger than 10 can be used:
ok  IntegerDigits[58127, 16]    ==>     {14, 3, 0, 15}
    ---
    data:
        got: {14, 3, 0, 15}
        expect: {14, 3, 0, 15}
        expect_evaluated: {14, 3, 0, 15}
    ...
# RefLink[IntegerDigits,paclet:ref/IntegerDigits] threads itself over elements of lists:
ok  IntegerDigits[{6, 7, 2}, 2]    ==>     {{1, 1, 0}, {1, 1, 1}, {1, 0}}
    ---
    data:
        got: {{1, 1, 0}, {1, 1, 1}, {1, 0}}
        expect: {{1, 1, 0}, {1, 1, 1}, {1, 0}}
        expect_evaluated: {{1, 1, 0}, {1, 1, 1}, {1, 0}}
    ...
# Find the digits of 7 in different bases:
ok  IntegerDigits[7, {2, 3, 4}]    ==>     {{1, 1, 1}, {2, 1}, {1, 3}}
    ---
    data:
        got: {{1, 1, 1}, {2, 1}, {1, 3}}
        expect: {{1, 1, 1}, {2, 1}, {1, 3}}
        expect_evaluated: {{1, 1, 1}, {2, 1}, {1, 3}}
    ...
# By default, RefLink[IntegerDigits,paclet:ref/IntegerDigits] includes no leading zeros:
ok  IntegerDigits[Range[0, 7], 2]    ==>     {{0}, {1}, {1, 0}, {1, 1}, {1, 0, 0}, {1, 0, 1}, {1, 1, 0}, {1, 1, 1}}
    ---
    data:
        got: {{0}, {1}, {1, 0}, {1, 1}, {1, 0, 0}, {1, 0, 1}, {1, 1, 0}, {1, 1, 1}}
        expect: {{0}, {1}, {1, 0}, {1, 1}, {1, 0, 0}, {1, 0, 1}, {1, 1, 0}, {1, 1, 1}}
        expect_evaluated: {{0}, {1}, {1, 0}, {1, 1}, {1, 0, 0}, {1, 0, 1}, {1, 1, 0}, {1, 1, 1}}
    ...
# Pad all digit lists to be length 3:
ok  IntegerDigits[Range[0, 7], 2, 3]    ==>     {{0, 0, 0}, {0, 0, 1}, {0, 1, 0}, {0, 1, 1}, {1, 0, 0}, {1, 0, 1}, {1, 1, 0}, {1, 1, 1}}
    ---
    data:
        got: {{0, 0, 0}, {0, 0, 1}, {0, 1, 0}, {0, 1, 1}, {1, 0, 0}, {1, 0, 1}, {1, 1, 0}, {1, 1, 1}}
        expect: {{0, 0, 0}, {0, 0, 1}, {0, 1, 0}, {0, 1, 1}, {1, 0, 0}, {1, 0, 1}, {1, 1, 0}, {1, 1, 1}}
        expect_evaluated: {{0, 0, 0}, {0, 0, 1}, {0, 1, 0}, {0, 1, 1}, {1, 0, 0}, {1, 0, 1}, {1, 1, 0}, {1, 1, 1}}
    ...
# Find only the last 4 digits:
ok  IntegerDigits[6345354, 10, 4]    ==>     {5, 3, 5, 4}
    ---
    data:
        got: {5, 3, 5, 4}
        expect: {5, 3, 5, 4}
        expect_evaluated: {5, 3, 5, 4}
    ...
# Leading digits of factorials:
ok  Table[First[IntegerDigits[n!]], {n, 50}]    ==>     {1, 2, 6, 2, 1, 7, 5, 4, 3, 3, 3, 4, 6, 8, 1, 2, 3, 6, 1, 2, 5, 1, 2, 6, 1, 4, 1, 3, 8, 2, 8, 2, 8, 2, 1, 3, 1, 5, 2, 8, 3, 1, 6, 2, 1, 5, 2, 1, 6, 3}
    ---
    data:
        got: {1, 2, 6, 2, 1, 7, 5, 4, 3, 3, 3, 4, 6, 8, 1, 2, 3, 6, 1, 2, 5, 1, 2, 6, 1, 4, 1, 3, 8, 2, 8, 2, 8, 2, 1, 3, 1, 5, 2, 8, 3, 1, 6, 2, 1, 5, 2, 1, 6, 3}
        expect: {1, 2, 6, 2, 1, 7, 5, 4, 3, 3, 3, 4, 6, 8, 1, 2, 3, 6, 1, 2, 5, 1, 2, 6, 1, 4, 1, 3, 8, 2, 8, 2, 8, 2, 1, 3, 1, 5, 2, 8, 3, 1, 6, 2, 1, 5, 2, 1, 6, 3}
        expect_evaluated: {1, 2, 6, 2, 1, 7, 5, 4, 3, 3, 3, 4, 6, 8, 1, 2, 3, 6, 1, 2, 5, 1, 2, 6, 1, 4, 1, 3, 8, 2, 8, 2, 8, 2, 1, 3, 1, 5, 2, 8, 3, 1, 6, 2, 1, 5, 2, 1, 6, 3}
    ...
# RefLink[ChampernowneNumber,paclet:ref/ChampernowneNumber] has a decimal expansion that is a concatenation of consecutive integers:
ok  Join @@ Table[IntegerDigits[i], {i, 30}]    ==>     {1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 0, 1, 1, 1, 2, 1, 3, 1, 4, 1, 5, 1, 6, 1, 7, 1, 8, 1, 9, 2, 0, 2, 1, 2, 2, 2, 3, 2, 4, 2, 5, 2, 6, 2, 7, 2, 8, 2, 9, 3, 0}
    ---
    data:
        got: {1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 0, 1, 1, 1, 2, 1, 3, 1, 4, 1, 5, 1, 6, 1, 7, 1, 8, 1, 9, 2, 0, 2, 1, 2, 2, 2, 3, 2, 4, 2, 5, 2, 6, 2, 7, 2, 8, 2, 9, 3, 0}
        expect: {1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 0, 1, 1, 1, 2, 1, 3, 1, 4, 1, 5, 1, 6, 1, 7, 1, 8, 1, 9, 2, 0, 2, 1, 2, 2, 2, 3, 2, 4, 2, 5, 2, 6, 2, 7, 2, 8, 2, 9, 3, 0}
        expect_evaluated: {1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 0, 1, 1, 1, 2, 1, 3, 1, 4, 1, 5, 1, 6, 1, 7, 1, 8, 1, 9, 2, 0, 2, 1, 2, 2, 2, 3, 2, 4, 2, 5, 2, 6, 2, 7, 2, 8, 2, 9, 3, 0}
    ...
# Compare to RefLink[ChampernowneNumber,paclet:ref/ChampernowneNumber]: 
ok  N[ChampernowneNumber[10], Length[%]]    ==>     0.12345678910111213141516171819202122232425262728293`50.091514977524966
    ---
    data:
        got: 0.123456789`1.
        expect: 0.12345678910111213141516171819202122232425262728293`50.091514977524966
        expect_evaluated: 0.12345678910111213141516171819202122232425262728293`50.091514977524966
    ...
# Cantor set construction:
ok  Table[If[FreeQ[IntegerDigits[n - 1, 3], 1], 1, 0], {n, 27}]    ==>     {1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1}
    ---
    data:
        got: {1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1}
        expect: {1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1}
        expect_evaluated: {1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1}
    ...
# Find all combinations of 3 binary digits:
ok  Table[IntegerDigits[i, 2, 3], {i, 0, 7}]    ==>     {{0, 0, 0}, {0, 0, 1}, {0, 1, 0}, {0, 1, 1}, {1, 0, 0}, {1, 0, 1}, {1, 1, 0}, {1, 1, 1}}
    ---
    data:
        got: {{0, 0, 0}, {0, 0, 1}, {0, 1, 0}, {0, 1, 1}, {1, 0, 0}, {1, 0, 1}, {1, 1, 0}, {1, 1, 1}}
        expect: {{0, 0, 0}, {0, 0, 1}, {0, 1, 0}, {0, 1, 1}, {1, 0, 0}, {1, 0, 1}, {1, 1, 0}, {1, 1, 1}}
        expect_evaluated: {{0, 0, 0}, {0, 0, 1}, {0, 1, 0}, {0, 1, 1}, {1, 0, 0}, {1, 0, 1}, {1, 1, 0}, {1, 1, 1}}
    ...
ok  Tuples[{0, 1}, 3]    ==>     {{0, 0, 0}, {0, 0, 1}, {0, 1, 0}, {0, 1, 1}, {1, 0, 0}, {1, 0, 1}, {1, 1, 0}, {1, 1, 1}}
    ---
    data:
        got: {{0, 0, 0}, {0, 0, 1}, {0, 1, 0}, {0, 1, 1}, {1, 0, 0}, {1, 0, 1}, {1, 1, 0}, {1, 1, 1}}
        expect: {{0, 0, 0}, {0, 0, 1}, {0, 1, 0}, {0, 1, 1}, {1, 0, 0}, {1, 0, 1}, {1, 1, 0}, {1, 1, 1}}
        expect_evaluated: {{0, 0, 0}, {0, 0, 1}, {0, 1, 0}, {0, 1, 1}, {1, 0, 0}, {1, 0, 1}, {1, 1, 0}, {1, 1, 1}}
    ...
# Pad digit lists to be the same length:
ok  PadLeft[Table[IntegerDigits[i^2, 2], {i, 5}]]    ==>     {{0, 0, 0, 0, 1}, {0, 0, 1, 0, 0}, {0, 1, 0, 0, 1}, {1, 0, 0, 0, 0}, {1, 1, 0, 0, 1}}
    ---
    data:
        got: {{0, 0, 0, 0, 1}, {0, 0, 1, 0, 0}, {0, 1, 0, 0, 1}, {1, 0, 0, 0, 0}, {1, 1, 0, 0, 1}}
        expect: {{0, 0, 0, 0, 1}, {0, 0, 1, 0, 0}, {0, 1, 0, 0, 1}, {1, 0, 0, 0, 0}, {1, 1, 0, 0, 1}}
        expect_evaluated: {{0, 0, 0, 0, 1}, {0, 0, 1, 0, 0}, {0, 1, 0, 0, 1}, {1, 0, 0, 0, 0}, {1, 1, 0, 0, 1}}
    ...
# The sign is ignored:
ok  IntegerDigits[-3134]    ==>     {3, 1, 3, 4}
    ---
    data:
        got: {3, 1, 3, 4}
        expect: {3, 1, 3, 4}
        expect_evaluated: {3, 1, 3, 4}
    ...
# Leading digits of factorials in base 100:
ok  HoldComplete[ListLinePlot[Table[First[IntegerDigits[n!, 100]], {n, 300}]]]    ==>     $Failed # skip
