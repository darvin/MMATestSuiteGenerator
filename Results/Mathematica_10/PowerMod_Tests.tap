#! DOCKER > wolfram -script output/Tests/PowerMod_Tests.m
#! TextForm[ColonForm[MessageName[$IterationLimit, itlim], StringForm[Iteration limit of `1` exceeded., Short[HoldForm[4096], 3]]]]
#! TextForm[ColonForm[MessageName[$IterationLimit, itlim], StringForm[Iteration limit of `1` exceeded., Short[HoldForm[4096], 3]]]]
#! TextForm[ColonForm[MessageName[$IterationLimit, itlim], StringForm[Iteration limit of `1` exceeded., Short[HoldForm[4096], 3]]]]
#! TextForm[ColonForm[MessageName[General, stop], StringForm[Further output of `1` will be suppressed during this calculation., Short[HoldForm[MessageName[$IterationLimit, itlim]], 3]]]]
#! TextForm[ColonForm[MessageName[FromCharacterCode, intnm], StringForm[Non-negative machine-sized integer expected at position `2` in `1`., Short[HoldForm[FromCharacterCode[PowerMod[Hold[Out[$Line - 1]], 36532066141, 109596198419]]], 3], Short[HoldForm[1], 3]]]]
#! TextForm[ColonForm[MessageName[FromCharacterCode, intnm], StringForm[Non-negative machine-sized integer expected at position `2` in `1`., Short[HoldForm[FromCharacterCode[PowerMod[Hold[Out[$Line - 1]], 36532066141, 109596198419]]], 3], Short[HoldForm[1], 3]]]]
#! TextForm[ColonForm[MessageName[FromCharacterCode, notunicode], StringForm[A character code, which should be a non-negative integer less than 65536, is expected at position `2` in `1`., Short[HoldForm[{38981759976, 87278491014, 29516053513, 55975870917, 85765100492, 2404906721, 55975870917, 63183374465, 79638505032, 82835764508, 43181121581, 60358850888, 24454360492, 79638505032, 82835764508, 85765100492, 6484444580, 79638505032}], 3], Short[HoldForm[1], 3]]]]
#! TextForm[ColonForm[MessageName[PowerMod, root], StringForm[The equation x^`1` = `2` (mod `3`) has no integer solutions., Short[HoldForm[2], 3], Short[HoldForm[2], 3], Short[HoldForm[5], 3]]]]
#! TextForm[ColonForm[MessageName[PowerMod, root], StringForm[The equation x^`1` = `2` (mod `3`) has no integer solutions., Short[HoldForm[2], 3], Short[HoldForm[2], 3], Short[HoldForm[5], 3]]]]
# SYSTEM: Mathematica_10
# TEST: PowerMod_Tests
ok  $Failed    ==>     HoldComplete[1] # skip
ok  Mod[2^10, 3]    ==>     1
    ---
    data:
        got: 1
        expect: 1
        expect_evaluated: 1
    ...
# Compute the multiplicative inverse of 3 modulo 7:
ok  PowerMod[3, -1, 7]    ==>     5
    ---
    data:
        got: 5
        expect: 5
        expect_evaluated: 5
    ...
# Check the result:
ok  Mod[3*5, 7]    ==>     1
    ---
    data:
        got: 1
        expect: 1
        expect_evaluated: 1
    ...
# RefLink[PowerMod,paclet:ref/PowerMod] works with numbers of any size, and does not need to compute the explicit power:
ok  PowerMod[2, 10^9, 18]    ==>     16
    ---
    data:
        got: 16
        expect: 16
        expect_evaluated: 16
    ...
# RefLink[PowerMod,paclet:ref/PowerMod] automatically threads itself over lists:
ok  PowerMod[2, {10, 11, 12, 13, 14}, 5]    ==>     {4, 3, 1, 2, 4}
    ---
    data:
        got: {4, 3, 1, 2, 4}
        expect: {4, 3, 1, 2, 4}
        expect_evaluated: {4, 3, 1, 2, 4}
    ...
# Compute the modular square root of 6 modulo 10:
ok  PowerMod[6, 1/2, 10]    ==>     4
    ---
    data:
        got: 4
        expect: 4
        expect_evaluated: 4
    ...
# Build an RSA-like toy encryption scheme. Start with the modulus:
ok  {p, q} = Prime[RandomInteger[{10^4, 10^5}, {2}]]; n = p*q    ==>     441596560183 # skip
# Find the universal exponent of the multiplication group modulo n:
ok  \[Lambda] = CarmichaelLambda[n]    ==>     73599183960 # skip
# Private key:
ok  d = NestWhile[#1 + 1 & , Round[n/3], GCD[\[Lambda], #1] =!= 1 & ]    ==>     147198853397 # skip
# Public key:
ok  e = PowerMod[d, -1, \[Lambda]]    ==>     43827926933 # skip
# Encrypt a message:
ok  PowerMod[ToCharacterCode["RSA in Mathematica"], e, n]    ==>     {370588429072, 31547009034, 13929388044, 384734377610, 162556565179, 299295617632, 384734377610, 75741462274, 285710361035, 176224883944, 85403059458, 342434320296, 188016646930, 285710361035, 176224883944, 162556565179, 65047462332, 285710361035} # skip
# Decrypt it:
ok  FromCharacterCode[PowerMod[%, d, n]]    ==>     RSA*in*Mathematica # skip
# Modular square roots may not exist: 
ok  PowerMod[2, 1/2, 5]    ==>     PowerMod[2, 1/2, 5]
    ---
    data:
        got:             1
#! PowerMod[2, -, 5]
#!             2
        expect: PowerMod[2, 1/2, 5]
        expect_evaluated:             1
#! PowerMod[2, -, 5]
#!             2
    ...
