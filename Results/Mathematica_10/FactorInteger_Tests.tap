#! DOCKER > wolfram -script output/Tests/FactorInteger_Tests.m
#! TextForm[ColonForm[MessageName[$IterationLimit, itlim], StringForm[Iteration limit of `1` exceeded., Short[HoldForm[4096], 3]]]]
#! TextForm[ColonForm[MessageName[$IterationLimit, itlim], StringForm[Iteration limit of `1` exceeded., Short[HoldForm[4096], 3]]]]
#! TextForm[ColonForm[MessageName[$IterationLimit, itlim], StringForm[Iteration limit of `1` exceeded., Short[HoldForm[4096], 3]]]]
#! TextForm[ColonForm[MessageName[General, stop], StringForm[Further output of `1` will be suppressed during this calculation., Short[HoldForm[MessageName[$IterationLimit, itlim]], 3]]]]
#! TextForm[ColonForm[MessageName[Thread, tdlen], StringForm[Objects of unequal length in `1` cannot be combined., Short[HoldForm[{{5, 1}}*{{17, 1}}*{{257, 1}}*{{65537, 1}}*{{641, 1}, {6700417, 1}}*{{274177, 1}, {67280421310721, 1}}*{{59649589127497217, 1}, {5704689200685129054721, 1}}], 3]]]]
# SYSTEM: Mathematica_10
# TEST: FactorInteger_Tests
# Find prime factors and their exponents:
ok  FactorInteger[2434500]    ==>     {{2, 2}, {3, 2}, {5, 3}, {541, 1}}
    ---
    data:
        got: {{2, 2}, {3, 2}, {5, 3}, {541, 1}}
        expect: {{2, 2}, {3, 2}, {5, 3}, {541, 1}}
        expect_evaluated: {{2, 2}, {3, 2}, {5, 3}, {541, 1}}
    ...
ok  FactorInteger[10^100 + 1]    ==>     {{73, 1}, {137, 1}, {401, 1}, {1201, 1}, {1601, 1}, {1676321, 1}, {5964848081, 1}, {129694419029057750551385771184564274499075700947656757821537291527196801, 1}}
    ---
    data:
        got: {{73, 1}, {137, 1}, {401, 1}, {1201, 1}, {1601, 1}, {1676321, 1}, {5964848081, 1}, {129694419029057750551385771184564274499075700947656757821537291527196801, 1}}
        expect: {{73, 1}, {137, 1}, {401, 1}, {1201, 1}, {1601, 1}, {1676321, 1}, {5964848081, 1}, {129694419029057750551385771184564274499075700947656757821537291527196801, 1}}
        expect_evaluated: {{73, 1}, {137, 1}, {401, 1}, {1201, 1}, {1601, 1}, {1676321, 1}, {5964848081, 1}, {129694419029057750551385771184564274499075700947656757821537291527196801, 1}}
    ...
# RefLink[FactorInteger,paclet:ref/FactorInteger] threads itself element-wise over lists:
ok  FactorInteger[{123, 1234, 12345, 123456}]    ==>     {{{3, 1}, {41, 1}}, {{2, 1}, {617, 1}}, {{3, 1}, {5, 1}, {823, 1}}, {{2, 6}, {3, 1}, {643, 1}}}
    ---
    data:
        got: {{{3, 1}, {41, 1}}, {{2, 1}, {617, 1}}, {{3, 1}, {5, 1}, {823, 1}}, {{2, 6}, {3, 1}, {643, 1}}}
        expect: {{{3, 1}, {41, 1}}, {{2, 1}, {617, 1}}, {{3, 1}, {5, 1}, {823, 1}}, {{2, 6}, {3, 1}, {643, 1}}}
        expect_evaluated: {{{3, 1}, {41, 1}}, {{2, 1}, {617, 1}}, {{3, 1}, {5, 1}, {823, 1}}, {{2, 6}, {3, 1}, {643, 1}}}
    ...
# RefLink[FactorInteger,paclet:ref/FactorInteger] works with rational numbers:
ok  FactorInteger[3/8]    ==>     {{2, -3}, {3, 1}}
    ---
    data:
        got: {{2, -3}, {3, 1}}
        expect: {{2, -3}, {3, 1}}
        expect_evaluated: {{2, -3}, {3, 1}}
    ...
ok  FactorInteger[2345354/2424245]    ==>     {{2, 1}, {5, -1}, {11, 1}, {17, 1}, {311, -1}, {1559, -1}, {6271, 1}}
    ---
    data:
        got: {{2, 1}, {5, -1}, {11, 1}, {17, 1}, {311, -1}, {1559, -1}, {6271, 1}}
        expect: {{2, 1}, {5, -1}, {11, 1}, {17, 1}, {311, -1}, {1559, -1}, {6271, 1}}
        expect_evaluated: {{2, 1}, {5, -1}, {11, 1}, {17, 1}, {311, -1}, {1559, -1}, {6271, 1}}
    ...
# Factor over Gaussian integers:
ok  FactorInteger[5, GaussianIntegers -> True]    ==>     {{-I, 1}, {1 + 2*I, 1}, {2 + I, 1}}
    ---
    data:
        got: {{-I, 1}, {1 + 2 I, 1}, {2 + I, 1}}
        expect: {{-I, 1}, {1 + 2*I, 1}, {2 + I, 1}}
        expect_evaluated: {{-I, 1}, {1 + 2 I, 1}, {2 + I, 1}}
    ...
# Find factorizations of numbers of the form 2^2^n+1:
ok  Column[Table[FactorInteger[2^2^n + 1], {n, 7}]]    ==>     {{5, 1}}*{{17, 1}}*{{257, 1}}*{{65537, 1}}*{{641, 1}, {6700417, 1}}*{{274177, 1}, {67280421310721, 1}}*{{59649589127497217, 1}, {5704689200685129054721, 1}} # skip
# Display as an explicit product of factors:
ok  FactorInteger[20!]    ==>     {{2, 18}, {3, 8}, {5, 4}, {7, 2}, {11, 1}, {13, 1}, {17, 1}, {19, 1}}
    ---
    data:
        got: {{2, 18}, {3, 8}, {5, 4}, {7, 2}, {11, 1}, {13, 1}, {17, 1}, {19, 1}}
        expect: {{2, 18}, {3, 8}, {5, 4}, {7, 2}, {11, 1}, {13, 1}, {17, 1}, {19, 1}}
        expect_evaluated: {{2, 18}, {3, 8}, {5, 4}, {7, 2}, {11, 1}, {13, 1}, {17, 1}, {19, 1}}
    ...
ok  CenterDot @@ Apply[Superscript, %, {1}]    ==>     2^18 � 3^8 � 5^4 � 7^2 � 11^1 � 13^1 � 17^1 � 19^1 # skip
# Find primes that appear in prime factorization of n! only to the first power:
ok  FactorInteger[20!]    ==>     {{2, 18}, {3, 8}, {5, 4}, {7, 2}, {11, 1}, {13, 1}, {17, 1}, {19, 1}}
    ---
    data:
        got: {{2, 18}, {3, 8}, {5, 4}, {7, 2}, {11, 1}, {13, 1}, {17, 1}, {19, 1}}
        expect: {{2, 18}, {3, 8}, {5, 4}, {7, 2}, {11, 1}, {13, 1}, {17, 1}, {19, 1}}
        expect_evaluated: {{2, 18}, {3, 8}, {5, 4}, {7, 2}, {11, 1}, {13, 1}, {17, 1}, {19, 1}}
    ...
ok  Cases[%, {p_, 1} -> p]    ==>     {11, 13, 17, 19} # skip
# Find all natural numbers up to 100 that are primes or prime powers:
ok  Select[Range[100], Length[FactorInteger[#1]] == 1 & ]    ==>     {1, 2, 3, 4, 5, 7, 8, 9, 11, 13, 16, 17, 19, 23, 25, 27, 29, 31, 32, 37, 41, 43, 47, 49, 53, 59, 61, 64, 67, 71, 73, 79, 81, 83, 89, 97}
    ---
    data:
        got: {1, 2, 3, 4, 5, 7, 8, 9, 11, 13, 16, 17, 19, 23, 25, 27, 29, 31, 32, 37, 41, 43, 47, 49, 53, 59, 61, 64, 67, 71, 73, 79, 81, 83, 89, 97}
        expect: {1, 2, 3, 4, 5, 7, 8, 9, 11, 13, 16, 17, 19, 23, 25, 27, 29, 31, 32, 37, 41, 43, 47, 49, 53, 59, 61, 64, 67, 71, 73, 79, 81, 83, 89, 97}
        expect_evaluated: {1, 2, 3, 4, 5, 7, 8, 9, 11, 13, 16, 17, 19, 23, 25, 27, 29, 31, 32, 37, 41, 43, 47, 49, 53, 59, 61, 64, 67, 71, 73, 79, 81, 83, 89, 97}
    ...
# The number of distinct factors of successive numbers:
not ok  HoldComplete[ListPlot[Table[Length[FactorInteger[n]], {n, 100}]]]    ==>     $Failed
    ---
    data:
        got: -Graphics-
        expect: $Failed
        expect_evaluated: $Failed
    ...
# The highest power of a prime in numbers up to 100: 
ok  Table[Max[Last /@ FactorInteger[n]], {n, 2, 100}]    ==>     {1, 1, 2, 1, 1, 1, 3, 2, 1, 1, 2, 1, 1, 1, 4, 1, 2, 1, 2, 1, 1, 1, 3, 2, 1, 3, 2, 1, 1, 1, 5, 1, 1, 1, 2, 1, 1, 1, 3, 1, 1, 1, 2, 2, 1, 1, 4, 2, 2, 1, 2, 1, 3, 1, 3, 1, 1, 1, 2, 1, 1, 2, 6, 1, 1, 1, 2, 1, 1, 1, 3, 1, 1, 2, 2, 1, 1, 1, 4, 4, 1, 1, 2, 1, 1, 1, 3, 1, 2, 1, 2, 1, 1, 1, 5, 1, 2, 2, 2}
    ---
    data:
        got: {1, 1, 2, 1, 1, 1, 3, 2, 1, 1, 2, 1, 1, 1, 4, 1, 2, 1, 2, 1, 1, 1, 3, 2, 1, 3, 2, 1, 1, 1, 5, 1, 1, 1, 2, 1, 1, 1, 3, 1, 1, 1, 2, 2, 1, 1, 4, 2, 2, 1, 2, 1, 3, 1, 3, 1, 1, 1, 2, 1, 1, 2, 6, 1, 1, 1, 2, 1, 1, 1, 3, 1, 1, 2, 2, 1, 1, 1, 4, 4, 1, 1, 2, 1, 1, 1, 3, 1, 2, 1, 2, 1, 1, 1, 5, 1, 2, 2, 2}
        expect: {1, 1, 2, 1, 1, 1, 3, 2, 1, 1, 2, 1, 1, 1, 4, 1, 2, 1, 2, 1, 1, 1, 3, 2, 1, 3, 2, 1, 1, 1, 5, 1, 1, 1, 2, 1, 1, 1, 3, 1, 1, 1, 2, 2, 1, 1, 4, 2, 2, 1, 2, 1, 3, 1, 3, 1, 1, 1, 2, 1, 1, 2, 6, 1, 1, 1, 2, 1, 1, 1, 3, 1, 1, 2, 2, 1, 1, 1, 4, 4, 1, 1, 2, 1, 1, 1, 3, 1, 2, 1, 2, 1, 1, 1, 5, 1, 2, 2, 2}
        expect_evaluated: {1, 1, 2, 1, 1, 1, 3, 2, 1, 1, 2, 1, 1, 1, 4, 1, 2, 1, 2, 1, 1, 1, 3, 2, 1, 3, 2, 1, 1, 1, 5, 1, 1, 1, 2, 1, 1, 1, 3, 1, 1, 1, 2, 2, 1, 1, 4, 2, 2, 1, 2, 1, 3, 1, 3, 1, 1, 1, 2, 1, 1, 2, 6, 1, 1, 1, 2, 1, 1, 1, 3, 1, 1, 2, 2, 1, 1, 1, 4, 4, 1, 1, 2, 1, 1, 1, 3, 1, 2, 1, 2, 1, 1, 1, 5, 1, 2, 2, 2}
    ...
# The number of factors with Gaussian integers allowed:
not ok  HoldComplete[ListPlot[Table[Length[FactorInteger[n, GaussianIntegers -> True]], {n, 100}]]]    ==>     $Failed
    ---
    data:
        got: -Graphics-
        expect: $Failed
        expect_evaluated: $Failed
    ...
# Timings can increase rapidly and unpredictably with the size of the input:
ok  Table[Timing[FactorInteger[2^n - 1]; n], {n, 50, 300, 50}]    ==>     {{4.41314/10^15, 50}, {4.41314/10^15, 100}, {0.031, 150}, {0.016, 200}, {0.656, 250}, {0.031, 300}} # skip
