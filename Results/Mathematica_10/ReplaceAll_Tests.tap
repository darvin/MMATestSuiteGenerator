#! DOCKER > wolfram -script output/Tests/ReplaceAll_Tests.m
#! TextForm[ColonForm[MessageName[$IterationLimit, itlim], StringForm[Iteration limit of `1` exceeded., Short[HoldForm[4096], 3]]]]
#! TextForm[ColonForm[MessageName[$IterationLimit, itlim], StringForm[Iteration limit of `1` exceeded., Short[HoldForm[4096], 3]]]]
#! TextForm[ColonForm[MessageName[$IterationLimit, itlim], StringForm[Iteration limit of `1` exceeded., Short[HoldForm[4096], 3]]]]
#! TextForm[ColonForm[MessageName[General, stop], StringForm[Further output of `1` will be suppressed during this calculation., Short[HoldForm[MessageName[$IterationLimit, itlim]], 3]]]]
# SYSTEM: Mathematica_10
# TEST: ReplaceAll_Tests
ok  $Failed    ==>     HoldComplete[{a, a^2, y, z}] # skip
ok  {x, x^2, y, z} /. x -> {a, b}    ==>     {{a, b}, {a^2, b^2}, y, z}
    ---
    data:
        got:            2   2
#! {{a, b}, {a , b }, y, z}
        expect: {{a, b}, {a^2, b^2}, y, z}
        expect_evaluated:            2   2
#! {{a, b}, {a , b }, y, z}
    ...
ok  Sin[x] /. Sin -> Cos    ==>     Cos[x]
    ---
    data:
        got: Cos[x]
        expect: Cos[x]
        expect_evaluated: Cos[x]
    ...
ok  1 + x^2 + x^4 /. x^(p_) -> f[p]    ==>     1 + f[2] + f[4]
    ---
    data:
        got: 1 + f[2] + f[4]
        expect: 1 + f[2] + f[4]
        expect_evaluated: 1 + f[2] + f[4]
    ...
ok  x /. {x -> 1, x -> 3, x -> 7}    ==>     1
    ---
    data:
        got: 1
        expect: 1
        expect_evaluated: 1
    ...
ok  x /. {{x -> 1}, {x -> 3}, {x -> 7}}    ==>     {1, 3, 7}
    ---
    data:
        got: {1, 3, 7}
        expect: {1, 3, 7}
        expect_evaluated: {1, 3, 7}
    ...
ok  {a, b, c} /. List -> f    ==>     f[a, b, c]
    ---
    data:
        got: f[a, b, c]
        expect: f[a, b, c]
        expect_evaluated: f[a, b, c]
    ...
ok  {x, x, x} /. x :> RandomReal[]    ==>     {0.0163641, 0.727604, 0.469022} # skip
# Structurally insert into a held expression:
ok  Hold[x + x] /. x -> 7    ==>     Hold[7 + 7]
    ---
    data:
        got: 14
        expect: Hold[7 + 7]
        expect_evaluated: 14
    ...
# Do not evaluate the right-hand side of the rule before doing the replacement:
ok  Hold[x + x] /. x :> 2^2    ==>     Hold[2^2 + 2^2]
    ---
    data:
        got: 8
        expect: Hold[2^2 + 2^2]
        expect_evaluated: 8
    ...
# Evaluate before replacement:
ok  Hold[x + x] /. x -> 2^2    ==>     Hold[4 + 4]
    ---
    data:
        got: 8
        expect: Hold[4 + 4]
        expect_evaluated: 8
    ...
ok  {a, b, c} /. a -> b /. b -> d    ==>     {d, d, c}
    ---
    data:
        got: {d, d, c}
        expect: {d, d, c}
        expect_evaluated: {d, d, c}
    ...
ok  {a, b, c} /. {a -> b, b -> d}    ==>     {b, d, c}
    ---
    data:
        got: {b, d, c}
        expect: {b, d, c}
        expect_evaluated: {b, d, c}
    ...
ok  {g[1], Hold[g[1]]} /. g[n_] :> n + 1    ==>     {2, Hold[1 + 1]}
    ---
    data:
        got: {2, 2}
        expect: {2, Hold[1 + 1]}
        expect_evaluated: {2, 2}
    ...
