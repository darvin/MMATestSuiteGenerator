#! DOCKER > wolfram -script output/Tests/Switch_Tests.m
#! TextForm[ColonForm[MessageName[SetDelayed, write], StringForm[Tag `1` in `2` is Protected., Short[HoldForm[Span], 3], Short[HoldForm[Span[The value `1` is not True or False., f[b_]]], 3]]]]
#! TextForm[ColonForm[MessageName[MessageName, messg], StringForm[`1` cannot be set to `2`. It must be set to a string., Short[HoldForm[MessageName[f, boole]], 3], Short[HoldForm[$Failed], 3]]]]
#! TextForm[ColonForm[MessageName[$IterationLimit, itlim], StringForm[Iteration limit of `1` exceeded., Short[HoldForm[4096], 3]]]]
#! TextForm[ColonForm[MessageName[$IterationLimit, itlim], StringForm[Iteration limit of `1` exceeded., Short[HoldForm[4096], 3]]]]
#! TextForm[ColonForm[MessageName[$IterationLimit, itlim], StringForm[Iteration limit of `1` exceeded., Short[HoldForm[4096], 3]]]]
#! TextForm[ColonForm[MessageName[General, stop], StringForm[Further output of `1` will be suppressed during this calculation., Short[HoldForm[MessageName[$IterationLimit, itlim]], 3]]]]
# SYSTEM: Mathematica_10
# TEST: Switch_Tests
# Process Boolean value to 1 or 0, giving a message and defaulting to 0 when not Boolean:
ok  f::boole = "The value `1` is not True or False." ;; f[b_] := Switch[b, True, 1, False, 0, _, Message[f::boole, b]; 0]; {f[True], f[False], f[x]}    ==>     {1, 0, 0} # skip
# Give a suggested symbolic transformation for an expression:
ok  t[e_] := Switch[e, _Plus, Together, _Times, Apart, _, Identity]; e = (1 + x)/(1 - x) + x/(1 + x); t[e]    ==>     Together
    ---
    data:
        got: Together
        expect: Together
        expect_evaluated: Together
    ...
# Try the transformation:
ok  e1 = t[e][e]    ==>     (-1 - 3*x)/((-1 + x)*(1 + x))
    ---
    data:
        got:     -1 - 3 x
#! ----------------
#! (-1 + x) (1 + x)
        expect: (-1 - 3*x)/((-1 + x)*(1 + x))
        expect_evaluated:     -1 - 3 x
#! ----------------
#! (-1 + x) (1 + x)
    ...
