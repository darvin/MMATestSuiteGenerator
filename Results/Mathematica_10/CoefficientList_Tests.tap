#! DOCKER > wolfram -script output/Tests/CoefficientList_Tests.m
#! TextForm[ColonForm[MessageName[$IterationLimit, itlim], StringForm[Iteration limit of `1` exceeded., Short[HoldForm[4096], 3]]]]
#! TextForm[ColonForm[MessageName[$IterationLimit, itlim], StringForm[Iteration limit of `1` exceeded., Short[HoldForm[4096], 3]]]]
#! TextForm[ColonForm[MessageName[$IterationLimit, itlim], StringForm[Iteration limit of `1` exceeded., Short[HoldForm[4096], 3]]]]
#! TextForm[ColonForm[MessageName[General, stop], StringForm[Further output of `1` will be suppressed during this calculation., Short[HoldForm[MessageName[$IterationLimit, itlim]], 3]]]]
#! TextForm[ColonForm[MessageName[FromDigits, nlst], StringForm[The expression `1` is not a list of digits or a string of valid digits., Short[HoldForm[Hold[Out[$Line - 1]]], 3]]]]
#! TextForm[ColonForm[MessageName[FromDigits, nlst], StringForm[The expression `1` is not a list of digits or a string of valid digits., Short[HoldForm[Hold[Out[$Line - 1]]], 3]]]]
#! TextForm[ColonForm[MessageName[FromDigits, nlst], StringForm[The expression `1` is not a list of digits or a string of valid digits., Short[HoldForm[Hold[Out[$Line - 1]]], 3]]]]
#! TextForm[ColonForm[MessageName[General, stop], StringForm[Further output of `1` will be suppressed during this calculation., Short[HoldForm[MessageName[FromDigits, nlst]], 3]]]]
#! TextForm[ColonForm[MessageName[Set, write], StringForm[Tag `1` in `2` is Protected., Short[HoldForm[Span], 3], Short[HoldForm[Span[(3*x + 5*y)^4, cl]], 3]]]]
#! TextForm[ColonForm[MessageName[CoefficientArrays, poly], StringForm[`1` is not a polynomial., Short[HoldForm[Span[(3 + 2*x)^3, 0]], 3]]]]
#! TextForm[ColonForm[MessageName[Part, partd], StringForm[Part specification `1` is longer than depth of object., Short[HoldForm[cl[[2,4]]], 3]]]]
#! TextForm[ColonForm[MessageName[Part, partw], StringForm[Part `1` of `2` does not exist., Short[HoldForm[5], 3], Short[HoldForm[CoefficientArrays[{{Span[(3 + 2*x)^3, 0]}}, {x, y}]], 3]]]]
# SYSTEM: Mathematica_10
# TEST: CoefficientList_Tests
# Find the coefficients in a polynomial:
ok  CoefficientList[1 + 6*x - x^4, x]    ==>     {1, 6, 0, 0, -1}
    ---
    data:
        got: {1, 6, 0, 0, -1}
        expect: {1, 6, 0, 0, -1}
        expect_evaluated: {1, 6, 0, 0, -1}
    ...
# RefLink[CoefficientList,paclet:ref/CoefficientList] works even when the polynomial has not been expanded out:
ok  CoefficientList[(1 + x)^10, x]    ==>     {1, 10, 45, 120, 210, 252, 210, 120, 45, 10, 1}
    ---
    data:
        got: {1, 10, 45, 120, 210, 252, 210, 120, 45, 10, 1}
        expect: {1, 10, 45, 120, 210, 252, 210, 120, 45, 10, 1}
        expect_evaluated: {1, 10, 45, 120, 210, 252, 210, 120, 45, 10, 1}
    ...
# Matrix of coefficients for a quadratic form:
ok  CoefficientList[1 + a*x^2 + b*x*y + c*y^2, {x, y}]    ==>     {{1, 0, c}, {0, b, 0}, {a, 0, 0}}
    ---
    data:
        got: {{1, 0, c}, {0, b, 0}, {a, 0, 0}}
        expect: {{1, 0, c}, {0, b, 0}, {a, 0, 0}}
        expect_evaluated: {{1, 0, c}, {0, b, 0}, {a, 0, 0}}
    ...
# Univariate polynomial coefficient lists:
ok  CoefficientList[(2*x + 3)^5, x]    ==>     {243, 810, 1080, 720, 240, 32}
    ---
    data:
        got: {243, 810, 1080, 720, 240, 32}
        expect: {243, 810, 1080, 720, 240, 32}
        expect_evaluated: {243, 810, 1080, 720, 240, 32}
    ...
ok  CoefficientList[a*x^4 + b*x^3 + c*x^2 + d*x + e, x]    ==>     {e, d, c, b, a}
    ---
    data:
        got: {e, d, c, b, a}
        expect: {e, d, c, b, a}
        expect_evaluated: {e, d, c, b, a}
    ...
# Multivariate polynomial coefficient lists:
ok  CoefficientList[(3*x + 4*y + 1)^3, {x, y}]    ==>     {{1, 12, 48, 64}, {9, 72, 144, 0}, {27, 108, 0, 0}, {27, 0, 0, 0}}
    ---
    data:
        got: {{1, 12, 48, 64}, {9, 72, 144, 0}, {27, 108, 0, 0}, {27, 0, 0, 0}}
        expect: {{1, 12, 48, 64}, {9, 72, 144, 0}, {27, 108, 0, 0}, {27, 0, 0, 0}}
        expect_evaluated: {{1, 12, 48, 64}, {9, 72, 144, 0}, {27, 108, 0, 0}, {27, 0, 0, 0}}
    ...
ok  CoefficientList[(x + y + z + 1)*(2*x + 3*y^2 + 4*z^3 + 5), {x, y, z}]    ==>     {{{5, 5, 0, 4, 4}, {5, 0, 0, 4, 0}, {3, 3, 0, 0, 0}, {3, 0, 0, 0, 0}}, {{7, 2, 0, 4, 0}, {2, 0, 0, 0, 0}, {3, 0, 0, 0, 0}, {0, 0, 0, 0, 0}}, {{2, 0, 0, 0, 0}, {0, 0, 0, 0, 0}, {0, 0, 0, 0, 0}, {0, 0, 0, 0, 0}}}
    ---
    data:
        got: {{{5, 5, 0, 4, 4}, {5, 0, 0, 4, 0}, {3, 3, 0, 0, 0}, {3, 0, 0, 0, 0}}, {{7, 2, 0, 4, 0}, {2, 0, 0, 0, 0}, {3, 0, 0, 0, 0}, {0, 0, 0, 0, 0}}, {{2, 0, 0, 0, 0}, {0, 0, 0, 0, 0}, {0, 0, 0, 0, 0}, {0, 0, 0, 0, 0}}}
        expect: {{{5, 5, 0, 4, 4}, {5, 0, 0, 4, 0}, {3, 3, 0, 0, 0}, {3, 0, 0, 0, 0}}, {{7, 2, 0, 4, 0}, {2, 0, 0, 0, 0}, {3, 0, 0, 0, 0}, {0, 0, 0, 0, 0}}, {{2, 0, 0, 0, 0}, {0, 0, 0, 0, 0}, {0, 0, 0, 0, 0}, {0, 0, 0, 0, 0}}}
        expect_evaluated: {{{5, 5, 0, 4, 4}, {5, 0, 0, 4, 0}, {3, 3, 0, 0, 0}, {3, 0, 0, 0, 0}}, {{7, 2, 0, 4, 0}, {2, 0, 0, 0, 0}, {3, 0, 0, 0, 0}, {0, 0, 0, 0, 0}}, {{2, 0, 0, 0, 0}, {0, 0, 0, 0, 0}, {0, 0, 0, 0, 0}, {0, 0, 0, 0, 0}}}
    ...
# Coefficient list over the integers modulo 2:
ok  CoefficientList[(x + 1)^5, x, Modulus -> 2]    ==>     {1, 1, 0, 0, 1, 1}
    ---
    data:
        got: {1, 1, 0, 0, 1, 1}
        expect: {1, 1, 0, 0, 1, 1}
        expect_evaluated: {1, 1, 0, 0, 1, 1}
    ...
# Use RefLink[Coefficient,paclet:ref/Coefficient] to get a coefficient at a specified power of the variable:
ok  f = (2*x + 3)^3 ;; Coefficient[f, x, 2]    ==>     36 # skip
# The list of coefficients can be obtained using RefLink[Coefficient,paclet:ref/Coefficient] and RefLink[Exponent,paclet:ref/Exponent]:
ok  (Coefficient[f, x, #1] & ) /@ Range[0, Exponent[f, x]]    ==>     {27, 54, 36, 8} # skip
ok  CoefficientList[f, x]    ==>     {27, 54, 36, 8} # skip
# RefLink[FromDigits,paclet:ref/FromDigits] can reconstruct a univariate polynomial from the list of its coefficients:
ok  CoefficientList[a + b*x + c*x^2, x]    ==>     {a, b, c}
    ---
    data:
        got: {a, b, c}
        expect: {a, b, c}
        expect_evaluated: {a, b, c}
    ...
ok  FromDigits[Reverse[%], x]    ==>     a + b*x + c*x^2 # skip
# Fold the operation for multivariate polynomials:
ok  CoefficientList[(x + 2*y)^3, {x, y}]    ==>     {{0, 0, 0, 8}, {0, 0, 12, 0}, {0, 6, 0, 0}, {1, 0, 0, 0}}
    ---
    data:
        got: {{0, 0, 0, 8}, {0, 0, 12, 0}, {0, 6, 0, 0}, {1, 0, 0, 0}}
        expect: {{0, 0, 0, 8}, {0, 0, 12, 0}, {0, 6, 0, 0}, {1, 0, 0, 0}}
        expect_evaluated: {{0, 0, 0, 8}, {0, 0, 12, 0}, {0, 6, 0, 0}, {1, 0, 0, 0}}
    ...
ok  Fold[FromDigits[Reverse[#1], #2] & , %, {x, y}]    ==>     x^3 + 6*x^2*y + y^2*(12*x + 8*y) # skip
ok  Expand[(x + 2*y)^3 - %]    ==>     0 # skip
# Polynomial multiplication is convolution as performed by RefLink[ListConvolve,paclet:ref/ListConvolve]:
ok  CoefficientList[(a + b*x + c*x^2)*(1 + 2*x + 3*x^2 + 4*x^3), x]    ==>     {a, 2*a + b, 3*a + 2*b + c, 4*a + 3*b + 2*c, 4*b + 3*c, 4*c}
    ---
    data:
        got: {a, 2 a + b, 3 a + 2 b + c, 4 a + 3 b + 2 c, 4 b + 3 c, 4 c}
        expect: {a, 2*a + b, 3*a + 2*b + c, 4*a + 3*b + 2*c, 4*b + 3*c, 4*c}
        expect_evaluated: {a, 2 a + b, 3 a + 2 b + c, 4 a + 3 b + 2 c, 4 b + 3 c, 4 c}
    ...
ok  ListConvolve[{a, b, c}, {1, 2, 3, 4}, {1, -1}, 0]    ==>     {a, 2*a + b, 3*a + 2*b + c, 4*a + 3*b + 2*c, 4*b + 3*c, 4*c}
    ---
    data:
        got: {a, 2 a + b, 3 a + 2 b + c, 4 a + 3 b + 2 c, 4 b + 3 c, 4 c}
        expect: {a, 2*a + b, 3*a + 2*b + c, 4*a + 3*b + 2*c, 4*b + 3*c, 4*c}
        expect_evaluated: {a, 2 a + b, 3 a + 2 b + c, 4 a + 3 b + 2 c, 4 b + 3 c, 4 c}
    ...
# For multivariate polynomials RefLink[CoefficientList,paclet:ref/CoefficientList] gives a tensor of the coefficients:
ok  f = (3*x + 5*y)^4 ;; cl = CoefficientList[f, {x, y}]    ==>     {{0, 0, 0, 0, 625}, {0, 0, 0, 1500, 0}, {0, 0, 1350, 0, 0}, {0, 540, 0, 0, 0}, {81, 0, 0, 0, 0}} # skip
# RefLink[CoefficientArrays,paclet:ref/CoefficientArrays] gives the list of arrays of polynomial coefficients ordered by total degrees:
ok  HoldComplete[ca = CoefficientArrays[f, {x, y}]]    ==>     $Failed # skip
# The coefficient of xy^3:
ok  Coefficient[f, x*y^3]    ==>     1500 # skip
# In cl the coefficient of x^a y^b is the element at position {a+1,b+1}:
ok  cl[[1 + 1,1 + 3]]    ==>     1500 # skip
# In ca the position of this coefficient is a+b+1 followed by a 1s and b 2s (1 and 2 indicate the first and second variables):
ok  ca[[5,1,2,2,2]]    ==>     1500 # skip
