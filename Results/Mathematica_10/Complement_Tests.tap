#! DOCKER > wolfram -script output/Tests/Complement_Tests.m
# SYSTEM: Mathematica_10
# TEST: Complement_Tests
# Find which elements in the first list are not in any of the subsequent lists:
ok  Complement[{a, b, c, d, e}, {a, c}, {d}]    ==>     {b, e}
    ---
    data:
        got: {b, e}
        expect: {b, e}
        expect_evaluated: {b, e}
    ...
# RefLink[Complement,paclet:ref/Complement] works with any head, not just RefLink[List,paclet:ref/List]:
ok  Complement[f[a, b, c, d], f[c, a], f[b, b, a]]    ==>     f[d]
    ---
    data:
        got: f[d]
        expect: f[d]
        expect_evaluated: f[d]
    ...
# Use equivalence classes based on absolute value: 
ok  Complement[{2, -2, 1, 3}, {2, 1, -2, -1}, SameTest -> (Abs[#1] == Abs[#2] & )]    ==>     {3}
    ---
    data:
        got: {3}
        expect: {3}
        expect_evaluated: {3}
    ...
# Use equivalence classes based on RefLink[Floor,paclet:ref/Floor]:
ok  Complement[{1.1, 3.4, 0.5, 7.6, 7.1, 1.9}, {1.2, 3.3, 1.3}, SameTest -> (Floor[#1] == Floor[#2] & )]    ==>     {0.5, 7.1}
    ---
    data:
        got: {0.5, 7.1}
        expect: {0.5, 7.1}
        expect_evaluated: {0.5, 7.1}
    ...
# Use RefLink[Total,paclet:ref/Total] of list elements:
ok  Complement[{{1, 2}, {3}, {4, 5, 6}, {9, 5}}, {{2, 1}, {8, 4, 3}}, SameTest -> (Total[#1] == Total[#2] & )]    ==>     {{9, 5}}
    ---
    data:
        got: {{9, 5}}
        expect: {{9, 5}}
        expect_evaluated: {{9, 5}}
    ...
# Find divisors of 20 that are not also divisors of 12:
ok  Complement[Divisors[20], Divisors[12]]    ==>     {5, 10, 20}
    ---
    data:
        got: {5, 10, 20}
        expect: {5, 10, 20}
        expect_evaluated: {5, 10, 20}
    ...
# Find which triples of digits do not occur in the binary decomposition of 12345:
ok  Complement[Tuples[{0, 1}, 3], Partition[IntegerDigits[12345, 2], 3, 1]]    ==>     {{0, 1, 0}, {1, 0, 1}}
    ---
    data:
        got: {{0, 1, 0}, {1, 0, 1}}
        expect: {{0, 1, 0}, {1, 0, 1}}
        expect_evaluated: {{0, 1, 0}, {1, 0, 1}}
    ...
# Find which options to RefLink[Plot,paclet:ref/Plot] are not also options to RefLink[Graphics,paclet:ref/Graphics]:
ok  Complement[First /@ Options[Plot], First /@ Options[Graphics]]    ==>     {ClippingStyle, ColorFunction, ColorFunctionScaling, Evaluated, EvaluationMonitor, Exclusions, ExclusionsStyle, Filling, FillingStyle, MaxRecursion, Mesh, MeshFunctions, MeshShading, MeshStyle, PerformanceGoal, PlotPoints, PlotStyle, RegionFunction, WorkingPrecision} # skip
# Find which length-5 sequences never occur after 2 steps in any elementary cellular automaton:
ok  Complement[Tuples[{0, 1}, 5], Table[Last[CellularAutomaton[i, {{1}, 0}, {2, All}]], {i, 0, 255}]]    ==>     {{0, 1, 1, 0, 1}, {1, 0, 1, 1, 0}}
    ---
    data:
        got: {{0, 1, 1, 0, 1}, {1, 0, 1, 1, 0}}
        expect: {{0, 1, 1, 0, 1}, {1, 0, 1, 1, 0}}
        expect_evaluated: {{0, 1, 1, 0, 1}, {1, 0, 1, 1, 0}}
    ...
