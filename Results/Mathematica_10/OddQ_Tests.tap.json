{
    "stats": {
        "suites": 0,
        "tests": 10,
        "passes": 10,
        "pending": 0,
        "failures": 0,
        "start": "2018-06-11T04:14:13.471Z",
        "end": "2018-06-11T04:14:13.471Z",
        "duration": 0,
        "testsRegistered": 10,
        "passPercent": 100,
        "pendingPercent": 0,
        "other": 0,
        "hasOther": false,
        "skipped": 0,
        "hasSkipped": false,
        "passPercentClass": "danger",
        "pendingPercentClass": "danger"
    },
    "suites": {
        "title": "",
        "suites": [],
        "tests": [
            {
                "title": "OddQ[9]    ➡️     True",
                "fullTitle": "OddQ[9]    ➡️     True",
                "timedOut": false,
                "duration": 0,
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "",
                "isRoot": false,
                "uuid": "5fb40638-1f97-4759-b5ba-12f1d786b2bd",
                "parentUUID": "e6baa625-886f-4cae-93f9-a57d06687065",
                "skipped": false,
                "isHook": false,
                "context": "\"#! DOCKER > wolfram -script output/Tests/OddQ_Tests.m\\n#! TextForm[ColonForm[MessageName[$IterationLimit, itlim], StringForm[Iteration limit of `1` exceeded., Short[HoldForm[4096], 3]]]]\\n#! TextForm[ColonForm[MessageName[$IterationLimit, itlim], StringForm[Iteration limit of `1` exceeded., Short[HoldForm[4096], 3]]]]\\n#! TextForm[ColonForm[MessageName[$IterationLimit, itlim], StringForm[Iteration limit of `1` exceeded., Short[HoldForm[4096], 3]]]]\\n#! TextForm[ColonForm[MessageName[General, stop], StringForm[Further output of `1` will be suppressed during this calculation., Short[HoldForm[MessageName[$IterationLimit, itlim]], 3]]]]\\n# SYSTEM: Mathematica_10\\n# TEST: OddQ_Tests\\n# Test whether 9 is odd:\\n\\n\\ndata: \\n  got:              true\\n  expect:           true\\n  expect_evaluated: true\"",
                "state": "passed",
                "err": {
                    "name": "",
                    "message": "",
                    "showDiff": true,
                    "actual": true,
                    "expected": true
                }
            },
            {
                "title": "OddQ[x]    ➡️     False",
                "fullTitle": "OddQ[x]    ➡️     False",
                "timedOut": false,
                "duration": 0,
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "",
                "isRoot": false,
                "uuid": "c36a2844-2306-450a-9a08-162ae37ee0d6",
                "parentUUID": "e6baa625-886f-4cae-93f9-a57d06687065",
                "skipped": false,
                "isHook": false,
                "context": "\"# RefLink[OddQ,paclet:ref/OddQ] gives RefLink[False,paclet:ref/False] for non-numeric expressions:\\n\\n\\ndata: \\n  got:              false\\n  expect:           false\\n  expect_evaluated: false\"",
                "state": "passed",
                "err": {
                    "name": "",
                    "message": "",
                    "showDiff": true,
                    "expected": false
                }
            },
            {
                "title": "VectorQ[{1, 5, 7, 11}, OddQ]    ➡️     True",
                "fullTitle": "VectorQ[{1, 5, 7, 11}, OddQ]    ➡️     True",
                "timedOut": false,
                "duration": 0,
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "",
                "isRoot": false,
                "uuid": "9169a061-ce17-4ccd-8d9e-50d08c5bcbfc",
                "parentUUID": "e6baa625-886f-4cae-93f9-a57d06687065",
                "skipped": false,
                "isHook": false,
                "context": "\"# Test whether a vector consists of odd integers:\\n\\n\\ndata: \\n  got:              true\\n  expect:           true\\n  expect_evaluated: true\"",
                "state": "passed",
                "err": {
                    "name": "",
                    "message": "",
                    "showDiff": true,
                    "actual": true,
                    "expected": true
                }
            },
            {
                "title": "VectorQ[{2, 5, 7, 11}, OddQ]    ➡️     False",
                "fullTitle": "VectorQ[{2, 5, 7, 11}, OddQ]    ➡️     False",
                "timedOut": false,
                "duration": 0,
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "",
                "isRoot": false,
                "uuid": "3ad96f5c-bcdb-4df0-a804-58088e2997eb",
                "parentUUID": "e6baa625-886f-4cae-93f9-a57d06687065",
                "skipped": false,
                "isHook": false,
                "context": "\"\\n\\ndata: \\n  got:              false\\n  expect:           false\\n  expect_evaluated: false\"",
                "state": "passed",
                "err": {
                    "name": "",
                    "message": "",
                    "showDiff": true,
                    "expected": false
                }
            },
            {
                "title": "OddQ[2]    ➡️     False",
                "fullTitle": "OddQ[2]    ➡️     False",
                "timedOut": false,
                "duration": 0,
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "",
                "isRoot": false,
                "uuid": "05da18c8-f384-4d8b-b77a-91a78fc6ec50",
                "parentUUID": "e6baa625-886f-4cae-93f9-a57d06687065",
                "skipped": false,
                "isHook": false,
                "context": "\"# An integer is either odd or even. Use RefLink[EvenQ,paclet:ref/EvenQ] to check that an integer is even:\\n\\n\\ndata: \\n  got:              false\\n  expect:           false\\n  expect_evaluated: false\"",
                "state": "passed",
                "err": {
                    "name": "",
                    "message": "",
                    "showDiff": true,
                    "expected": false
                }
            },
            {
                "title": "EvenQ[2]    ➡️     True",
                "fullTitle": "EvenQ[2]    ➡️     True",
                "timedOut": false,
                "duration": 0,
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "",
                "isRoot": false,
                "uuid": "11949294-b7a9-48cb-b9ad-4c0623c99960",
                "parentUUID": "e6baa625-886f-4cae-93f9-a57d06687065",
                "skipped": false,
                "isHook": false,
                "context": "\"\\n\\ndata: \\n  got:              true\\n  expect:           true\\n  expect_evaluated: true\"",
                "state": "passed",
                "err": {
                    "name": "",
                    "message": "",
                    "showDiff": true,
                    "actual": true,
                    "expected": true
                }
            },
            {
                "title": "OddQ[15]    ➡️     True",
                "fullTitle": "OddQ[15]    ➡️     True",
                "timedOut": false,
                "duration": 0,
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "",
                "isRoot": false,
                "uuid": "2f3baa7e-b26d-4d28-8847-c7610f90222a",
                "parentUUID": "e6baa625-886f-4cae-93f9-a57d06687065",
                "skipped": false,
                "isHook": false,
                "context": "\"# Odd integers are not divisible by 2:\\n\\n\\ndata: \\n  got:              true\\n  expect:           true\\n  expect_evaluated: true\"",
                "state": "passed",
                "err": {
                    "name": "",
                    "message": "",
                    "showDiff": true,
                    "actual": true,
                    "expected": true
                }
            },
            {
                "title": "!Divisible[15, 2]    ➡️     True",
                "fullTitle": "!Divisible[15, 2]    ➡️     True",
                "timedOut": false,
                "duration": 0,
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "",
                "isRoot": false,
                "uuid": "8ff914af-9e40-4cef-8017-4a3a7ddf3b1b",
                "parentUUID": "e6baa625-886f-4cae-93f9-a57d06687065",
                "skipped": false,
                "isHook": false,
                "context": "\"\\n\\ndata: \\n  got:              true\\n  expect:           true\\n  expect_evaluated: true\"",
                "state": "passed",
                "err": {
                    "name": "",
                    "message": "",
                    "showDiff": true,
                    "actual": true,
                    "expected": true
                }
            },
            {
                "title": "x = 3*(GoldenRatio - 1/GoldenRatio) ;; OddQ[x]    ➡️     False",
                "fullTitle": "x = 3*(GoldenRatio - 1/GoldenRatio) ;; OddQ[x]    ➡️     False",
                "timedOut": false,
                "duration": 0,
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "",
                "isRoot": false,
                "uuid": "8eaad053-9af1-4efb-b313-9370d45e53bf",
                "parentUUID": "e6baa625-886f-4cae-93f9-a57d06687065",
                "skipped": true,
                "isHook": false,
                "context": "\"# Expressions that represent odd integers but do not evaluate explicitly will still give RefLink[False,paclet:ref/False]:\\n\"",
                "state": "passed",
                "err": {}
            },
            {
                "title": "FullSimplify[x]    ➡️     3",
                "fullTitle": "FullSimplify[x]    ➡️     3",
                "timedOut": false,
                "duration": 0,
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "",
                "isRoot": false,
                "uuid": "c2133b11-421d-46b8-8f6c-b10eab42cd22",
                "parentUUID": "e6baa625-886f-4cae-93f9-a57d06687065",
                "skipped": true,
                "isHook": false,
                "context": "\"# It is necessary to use symbolic simplification first:\\n\"",
                "state": "passed",
                "err": {}
            }
        ],
        "root": true,
        "fullFile": "",
        "file": "",
        "pending": [],
        "passes": [
            "5fb40638-1f97-4759-b5ba-12f1d786b2bd",
            "c36a2844-2306-450a-9a08-162ae37ee0d6",
            "9169a061-ce17-4ccd-8d9e-50d08c5bcbfc",
            "3ad96f5c-bcdb-4df0-a804-58088e2997eb",
            "05da18c8-f384-4d8b-b77a-91a78fc6ec50",
            "11949294-b7a9-48cb-b9ad-4c0623c99960",
            "2f3baa7e-b26d-4d28-8847-c7610f90222a",
            "8ff914af-9e40-4cef-8017-4a3a7ddf3b1b",
            "8eaad053-9af1-4efb-b313-9370d45e53bf",
            "c2133b11-421d-46b8-8f6c-b10eab42cd22"
        ],
        "failures": [],
        "skipped": [
            "8eaad053-9af1-4efb-b313-9370d45e53bf",
            "c2133b11-421d-46b8-8f6c-b10eab42cd22"
        ],
        "duration": 0,
        "rootEmpty": false,
        "_timeout": 0,
        "uuid": "e6baa625-886f-4cae-93f9-a57d06687065",
        "beforeHooks": [],
        "afterHooks": []
    },
    "copyrightYear": 2018
}
