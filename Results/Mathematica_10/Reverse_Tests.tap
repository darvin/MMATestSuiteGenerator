#! DOCKER > wolfram -script output/Tests/Reverse_Tests.m
#! TextForm[ColonForm[MessageName[$IterationLimit, itlim], StringForm[Iteration limit of `1` exceeded., Short[HoldForm[4096], 3]]]]
#! TextForm[ColonForm[MessageName[Reverse, normal], StringForm[Nonatomic expression expected at position `1` in `2`., Short[HoldForm[1], 3], Short[HoldForm[Reverse[Raw[Association, 88fa62ee90d3ffecc03063eef8a2a9f248a8fdf1c05199f230a8fdf140a399f260a8fdf1]]], 3]]]]
#! TextForm[ColonForm[MessageName[$IterationLimit, itlim], StringForm[Iteration limit of `1` exceeded., Short[HoldForm[4096], 3]]]]
#! TextForm[ColonForm[MessageName[Reverse, normal], StringForm[Nonatomic expression expected at position `1` in `2`., Short[HoldForm[1], 3], Short[HoldForm[Reverse[Raw[Association, 086663ee3e207b332c20347d2c2063202d3e207b352c20367d20ef84942c207b312c2032], {1, 2}]], 3]]]]
#! TextForm[ColonForm[MessageName[$IterationLimit, itlim], StringForm[Iteration limit of `1` exceeded., Short[HoldForm[4096], 3]]]]
#! TextForm[ColonForm[MessageName[General, stop], StringForm[Further output of `1` will be suppressed during this calculation., Short[HoldForm[MessageName[$IterationLimit, itlim]], 3]]]]
# SYSTEM: Mathematica_10
# TEST: Reverse_Tests
ok  $Failed    ==>     HoldComplete[{d, c, b, a}] # skip
# Reverse an RefLink[Association,paclet:ref/Association]:
ok  Reverse[<| a -> 1, b -> 2, c -> 2 |>]    ==>     <| c -> 2, b -> 2, a -> 1 |> # skip
# Reverse an RefLink[Association,paclet:ref/Association] on the first and second levels:
ok  Reverse[<| a :> {1, 2}, b -> {3, 4}, c -> {5, 6} |>, {1, 2}]    ==>     <| c -> {6, 5}, b -> {4, 3}, a :> {2, 1} |> # skip
# RefLink[Reverse,paclet:ref/Reverse] works with heads other than RefLink[List,paclet:ref/List]:
ok  Reverse[f[a, b, c]]    ==>     f[c, b, a]
    ---
    data:
        got: f[c, b, a]
        expect: f[c, b, a]
        expect_evaluated: f[c, b, a]
    ...
# RefLink[Reverse,paclet:ref/Reverse] sublists:
ok  Reverse /@ {{a, b, c}, {d, e, f}}    ==>     {{c, b, a}, {f, e, d}}
    ---
    data:
        got: {{c, b, a}, {f, e, d}}
        expect: {{c, b, a}, {f, e, d}}
        expect_evaluated: {{c, b, a}, {f, e, d}}
    ...
# RefLink[Reverse,paclet:ref/Reverse] operands:
ok  Reverse[a . b . c . d . e]    ==>     e . d . c . b . a
    ---
    data:
        got: e . d . c . b . a
        expect: e . d . c . b . a
        expect_evaluated: e . d . c . b . a
    ...
# Turn an array plot upside down:
not ok  HoldComplete[ArrayPlot[Reverse[CellularAutomaton[30, {{1}, 0}, 20]]]]    ==>     $Failed
    ---
    data:
        got: -Graphics-
        expect: $Failed
        expect_evaluated: $Failed
    ...
# RefLink[Reverse,paclet:ref/Reverse] is its own inverse:
ok  Reverse[Reverse[{a, b, c, d}]]    ==>     {a, b, c, d}
    ---
    data:
        got: {a, b, c, d}
        expect: {a, b, c, d}
        expect_evaluated: {a, b, c, d}
    ...
