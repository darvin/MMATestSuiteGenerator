# SYSTEM: Mathematica_10
# TEST: Reverse_Tests
# OUTPUT: output/Results/Mathematica_10/Reverse_Tests.json
ok  Reverse[{a, b, c, d}]    ==>     {d, c, b, a}
    ---
    data:
        got: {d, c, b, a}
        expect: {d, c, b, a}
        expect_evaluated: {d, c, b, a}
    ...
# Reverse an RefLink[Association,paclet:ref/Association]:
ok  Reverse[<| a -> 1, b -> 2, c -> 2 |>]    ==>     <| c -> 2, b -> 2, a -> 1 |> # skip
# Reverse an RefLink[Association,paclet:ref/Association] on the first and second levels:
ok  Reverse[<| a :> {1, 2}, b -> {3, 4}, c -> {5, 6} |>, {1, 2}]    ==>     <| c -> {6, 5}, b -> {4, 3}, a :> {2, 1} |> # skip
# RefLink[Reverse,paclet:ref/Reverse] works with heads other than RefLink[List,paclet:ref/List]:
ok  Reverse[f[a, b, c]]    ==>     f[c, b, a]
    ---
    data:
        got: f[c, b, a]
        expect: f[c, b, a]
        expect_evaluated: f[c, b, a]
    ...
# RefLink[Reverse,paclet:ref/Reverse] sublists:
ok  Reverse /@ {{a, b, c}, {d, e, f}}    ==>     {{c, b, a}, {f, e, d}}
    ---
    data:
        got: {{c, b, a}, {f, e, d}}
        expect: {{c, b, a}, {f, e, d}}
        expect_evaluated: {{c, b, a}, {f, e, d}}
    ...
# RefLink[Reverse,paclet:ref/Reverse] operands:
ok  Reverse[a . b . c . d . e]    ==>     e . d . c . b . a
    ---
    data:
        got: e . d . c . b . a
        expect: e . d . c . b . a
        expect_evaluated: e . d . c . b . a
    ...
# Turn an array plot upside down:
ok  HoldComplete[ArrayPlot[Reverse[CellularAutomaton[30, {{1}, 0}, 20]]]]    ==>     $Failed # skip
# RefLink[Reverse,paclet:ref/Reverse] is its own inverse:
ok  Reverse[Reverse[{a, b, c, d}]]    ==>     {a, b, c, d}
    ---
    data:
        got: {a, b, c, d}
        expect: {a, b, c, d}
        expect_evaluated: {a, b, c, d}
    ...
