# SYSTEM: Mathematica_10
# TEST: EvenQ_Tests
# OUTPUT: output/Results/Mathematica_10/EvenQ_Tests.json
# Test whether 8 is even:
ok  EvenQ[8]    ==>     True
    ---
    data:
        got: True
        expect: True
        expect_evaluated: True
    ...
# RefLink[EvenQ,paclet:ref/EvenQ] gives RefLink[False,paclet:ref/False] for non-numeric expressions:
ok  EvenQ[x]    ==>     False
    ---
    data:
        got: False
        expect: False
        expect_evaluated: False
    ...
# Test whether an array consists of even integers:
ok  ArrayQ[{{2, 4}, {6, 10}}, _, EvenQ]    ==>     True
    ---
    data:
        got: True
        expect: True
        expect_evaluated: True
    ...
ok  ArrayQ[{{1, 4}, {6, 10}}, _, EvenQ]    ==>     False
    ---
    data:
        got: False
        expect: False
        expect_evaluated: False
    ...
# An integer is either odd or even. Use RefLink[OddQ,paclet:ref/OddQ] to check that an integer is odd:
ok  EvenQ[3]    ==>     False
    ---
    data:
        got: False
        expect: False
        expect_evaluated: False
    ...
ok  OddQ[3]    ==>     True
    ---
    data:
        got: True
        expect: True
        expect_evaluated: True
    ...
# Even integers are divisible by 2:
ok  EvenQ[12]    ==>     True
    ---
    data:
        got: True
        expect: True
        expect_evaluated: True
    ...
ok  Divisible[12, 2]    ==>     True
    ---
    data:
        got: True
        expect: True
        expect_evaluated: True
    ...
# The generating function of the even integers is (2 x)/(x-1)^2:
ok  Series[2*(x/(x - 1)^2), {x, 0, 10}]    ==>     2*x + 4*x^2 + 6*x^3 + 8*x^4 + 10*x^5 + 12*x^6 + 14*x^7 + 16*x^8 + 18*x^9 + 20*x^10 + O[x]^11
    ---
    data:
        got: SeriesData[x, 0, {2, 4, 6, 8, 10, 12, 14, 16, 18, 20}, 1, 11, 1]
        expect: 2*x + 4*x^2 + 6*x^3 + 8*x^4 + 10*x^5 + 12*x^6 + 14*x^7 + 16*x^8 + 18*x^9 + 20*x^10 + O[x]^11
        expect_evaluated: SeriesData[x, 0, {2, 4, 6, 8, 10, 12, 14, 16, 18, 20}, 1, 11, 1]
    ...
ok  EvenQ[x]    ==>     False
    ---
    data:
        got: False
        expect: False
        expect_evaluated: False
    ...
# It is necessary to use symbolic simplification first:
ok  FullSimplify[x]    ==>     2 # skip
