#! DOCKER > wolfram -script output/Tests/Exponent_Tests.m
#! TextForm[ColonForm[MessageName[$IterationLimit, itlim], StringForm[Iteration limit of `1` exceeded., Short[HoldForm[4096], 3]]]]
#! TextForm[ColonForm[MessageName[$IterationLimit, itlim], StringForm[Iteration limit of `1` exceeded., Short[HoldForm[4096], 3]]]]
#! TextForm[ColonForm[MessageName[$IterationLimit, itlim], StringForm[Iteration limit of `1` exceeded., Short[HoldForm[4096], 3]]]]
#! TextForm[ColonForm[MessageName[General, stop], StringForm[Further output of `1` will be suppressed during this calculation., Short[HoldForm[MessageName[$IterationLimit, itlim]], 3]]]]
#! TextForm[ColonForm[MessageName[Solve, ifun], StringForm[Inverse functions are being used by `1`, so some solutions may not be found; use Reduce for complete solution information., Short[HoldForm[Solve], 3]]]]
# SYSTEM: Mathematica_10
# TEST: Exponent_Tests
# Find the highest exponent of x:
ok  Exponent[1 + x^2 + a*x^3, x]    ==>     3
    ---
    data:
        got: 3
        expect: 3
        expect_evaluated: 3
    ...
# The degree of a polynomial:
ok  Exponent[(x^2 + 1)^3 + 1, x]    ==>     6
    ---
    data:
        got: 6
        expect: 6
        expect_evaluated: 6
    ...
# Exponents may be rational numbers or symbolic expressions:
ok  Exponent[x^(n + 1) + 2*Sqrt[x] + 1, x]    ==>     Max[1/2, 1 + n]
    ---
    data:
        got:     1
#! Max[-, 1 + n]
    2
        expect: Max[1/2, 1 + n]
        expect_evaluated:     1
#! Max[-, 1 + n]
    2
    ...
# The lowest exponent in a polynomial:
ok  Exponent[(x^2 + 1)^3 - 1, x, Min]    ==>     2
    ---
    data:
        got: 2
        expect: 2
        expect_evaluated: 2
    ...
# The list of all exponents with which x appears:
ok  Exponent[1 + x^2 + a*x^3, x, List]    ==>     {0, 2, 3}
    ---
    data:
        got: {0, 2, 3}
        expect: {0, 2, 3}
        expect_evaluated: {0, 2, 3}
    ...
# The degree of a polynomial over the integers modulo 2:
ok  Exponent[2*x^2 - x + 1, x, Modulus -> 2]    ==>     1
    ---
    data:
        got: 1
        expect: 1
        expect_evaluated: 1
    ...
# With RefLink[Trig,paclet:ref/Trig]->RefLink[True,paclet:ref/True], RefLink[Exponent,paclet:ref/Exponent] recognizes dependencies between trigonometric functions:
ok  Exponent[Tan[x], Cos[x], Trig -> True]    ==>     -1
    ---
    data:
        got: -1
        expect: -1
        expect_evaluated: -1
    ...
# Compute the leading coefficient:
ok  LeadingCoefficient[poly_, x_] := Coefficient[poly, x, Exponent[poly, x]]; LeadingCoefficient[2 + 3*x + 17*x^5, x]    ==>     17
    ---
    data:
        got: 17
        expect: 17
        expect_evaluated: 17
    ...
# Compute the leading term:
ok  LeadingTerm[poly_, x_] := With[{n = Exponent[poly, x]}, Coefficient[poly, x, n]*x^n]; LeadingTerm[2 + 3*x + 17*x^5, x]    ==>     17*x^5
    ---
    data:
        got:     5
#! 17 x
        expect: 17*x^5
        expect_evaluated:     5
#! 17 x
    ...
# The number of complex roots of a polynomial is equal to its degree:
ok  f = (x + 1)^5 - 2*x + 3 ;; Exponent[f, x]    ==>     5 # skip
# Use RefLink[Solve,paclet:ref/Solve] to find the roots:
ok  Length[x /. Solve[f == 0, x]]    ==>     5
    ---
    data:
        got: 5
        expect: 5
        expect_evaluated: 5
    ...
# Length of the RefLink[CoefficientList,paclet:ref/CoefficientList] of a polynomial is one more than its degree:
ok  f = (x^2 + 2*x - 1)^7 - 3 ;; Exponent[f, x]    ==>     14 # skip
ok  Length[CoefficientList[f, x]]    ==>     15 # skip
# RefLink[Exponent,paclet:ref/Exponent] is purely syntactical; it does not attempt to recognize zero coefficients:
ok  zero = Sqrt[2] + Sqrt[3] - Sqrt[5 + 2*Sqrt[6]]; f = zero*x^2 + x + 1 ;; Exponent[f, x]    ==>     2 # skip
ok  Exponent[RootReduce[f], x]    ==>     1 # skip
