#! DOCKER > wolfram -script output/Tests/Total_Tests.m
#! TextForm[ColonForm[MessageName[$IterationLimit, itlim], StringForm[Iteration limit of `1` exceeded., Short[HoldForm[4096], 3]]]]
#! TextForm[ColonForm[MessageName[Total, normal], StringForm[Nonatomic expression expected at position `1` in `2`., Short[HoldForm[1], 3], Short[HoldForm[Total[list]], 3]]]]
#! TextForm[ColonForm[MessageName[$RecursionLimit, reclim], StringForm[Recursion depth of `1` exceeded., Short[HoldForm[1024], 3]]]]
#! TextForm[ColonForm[MessageName[$RecursionLimit, reclim], StringForm[Recursion depth of `1` exceeded., Short[HoldForm[1024], 3]]]]
#! TextForm[ColonForm[MessageName[$RecursionLimit, reclim], StringForm[Recursion depth of `1` exceeded., Short[HoldForm[1024], 3]]]]
#! TextForm[ColonForm[MessageName[General, stop], StringForm[Further output of `1` will be suppressed during this calculation., Short[HoldForm[MessageName[$RecursionLimit, reclim]], 3]]]]
#! TextForm[ColonForm[MessageName[Total, normal], StringForm[Nonatomic expression expected at position `1` in `2`., Short[HoldForm[1], 3], Short[HoldForm[Total[m]], 3]]]]
#! TextForm[ColonForm[MessageName[$IterationLimit, itlim], StringForm[Iteration limit of `1` exceeded., Short[HoldForm[4096], 3]]]]
#! TextForm[ColonForm[MessageName[$IterationLimit, itlim], StringForm[Iteration limit of `1` exceeded., Short[HoldForm[4096], 3]]]]
#! TextForm[ColonForm[MessageName[General, stop], StringForm[Further output of `1` will be suppressed during this calculation., Short[HoldForm[MessageName[$IterationLimit, itlim]], 3]]]]
#! TextForm[ColonForm[MessageName[Total, normal], StringForm[Nonatomic expression expected at position `1` in `2`., Short[HoldForm[1], 3], Short[HoldForm[Total[a, {-1}]], 3]]]]
#! TextForm[ColonForm[MessageName[General, stop], StringForm[Further output of `1` will be suppressed during this calculation., Short[HoldForm[MessageName[Total, normal]], 3]]]]
#! TextForm[ColonForm[MessageName[Total, tllen], StringForm[Lists of unequal length in `1` cannot be added., Short[HoldForm[{{1, 2, 3}, {4, 5}, {6}}], 3]]]]
#! TextForm[ColonForm[MessageName[Table, iterb], StringForm[Iterator `1` does not have appropriate bounds., Short[HoldForm[{k, 1, Hold[Total[a, {-1}]]}], 3]]]]
#! TextForm[ColonForm[MessageName[Table, iterb], StringForm[Iterator `1` does not have appropriate bounds., Short[HoldForm[{k, 1, Hold[Total[a, {-1}]]}], 3]]]]
#! TextForm[ColonForm[MessageName[Table, iterb], StringForm[Iterator `1` does not have appropriate bounds., Short[HoldForm[{k, 1, Hold[Total[a, {-1}]]}], 3]]]]
#! TextForm[ColonForm[MessageName[General, stop], StringForm[Further output of `1` will be suppressed during this calculation., Short[HoldForm[MessageName[Table, iterb]], 3]]]]
# SYSTEM: Mathematica_10
# TEST: Total_Tests
# Total the values in a list:
ok  Total[{a, b, c, d}]    ==>     a + b + c + d
    ---
    data:
        got: a + b + c + d
        expect: a + b + c + d
        expect_evaluated: a + b + c + d
    ...
# Use exact arithmetic to total the values:
ok  list = {Pi, 1, 4, E, 7, 8} ;; Total[list]    ==>     20 + E + Pi # skip
# Use machine arithmetic:
ok  Total[N[list]]    ==>     25.8599 # skip
# Use 47-digit precision arithmetic:
ok  Total[N[list, 47]]    ==>     25.859874482048838473822930854632165381954416493`46.412626412582824 # skip
# Total the columns of a matrix:
ok  m = 1*2*3*4*5*6*7*8*9 ;; Total[m]    ==>     {12, 15, 18} # skip
# Total the rows:
ok  Total[m, {2}]    ==>     {6, 15, 24} # skip
# Total all the elements:
ok  Total[m, 2]    ==>     45 # skip
# Total by adding parts in the first dimension:
ok  t = Array[Subscript[a, ##1] & , {2, 3, 4}]    ==>     {{{Subscript[a, 1, 1, 1], Subscript[a, 1, 1, 2], Subscript[a, 1, 1, 3], Subscript[a, 1, 1, 4]}, {Subscript[a, 1, 2, 1], Subscript[a, 1, 2, 2], Subscript[a, 1, 2, 3], Subscript[a, 1, 2, 4]}, {Subscript[a, 1, 3, 1], Subscript[a, 1, 3, 2], Subscript[a, 1, 3, 3], Subscript[a, 1, 3, 4]}}, {{Subscript[a, 2, 1, 1], Subscript[a, 2, 1, 2], Subscript[a, 2, 1, 3], Subscript[a, 2, 1, 4]}, {Subscript[a, 2, 2, 1], Subscript[a, 2, 2, 2], Subscript[a, 2, 2, 3], Subscript[a, 2, 2, 4]}, {Subscript[a, 2, 3, 1], Subscript[a, 2, 3, 2], Subscript[a, 2, 3, 3], Subscript[a, 2, 3, 4]}}}
    ---
    data:
        got: {{{a     , a     , a     , a     }, {a     , a     , a     , a     }, {a     , a     , a     , a     }}, {{a     , a     , a     , a     }, {a     , a     , a     , a     }, {a     , a     , a     , a     }}}
    1,1,1   1,1,2   1,1,3   1,1,4     1,2,1   1,2,2   1,2,3   1,2,4     1,3,1   1,3,2   1,3,3   1,3,4       2,1,1   2,1,2   2,1,3   2,1,4     2,2,1   2,2,2   2,2,3   2,2,4     2,3,1   2,3,2   2,3,3   2,3,4
        expect: {{{Subscript[a, 1, 1, 1], Subscript[a, 1, 1, 2], Subscript[a, 1, 1, 3], Subscript[a, 1, 1, 4]}, {Subscript[a, 1, 2, 1], Subscript[a, 1, 2, 2], Subscript[a, 1, 2, 3], Subscript[a, 1, 2, 4]}, {Subscript[a, 1, 3, 1], Subscript[a, 1, 3, 2], Subscript[a, 1, 3, 3], Subscript[a, 1, 3, 4]}}, {{Subscript[a, 2, 1, 1], Subscript[a, 2, 1, 2], Subscript[a, 2, 1, 3], Subscript[a, 2, 1, 4]}, {Subscript[a, 2, 2, 1], Subscript[a, 2, 2, 2], Subscript[a, 2, 2, 3], Subscript[a, 2, 2, 4]}, {Subscript[a, 2, 3, 1], Subscript[a, 2, 3, 2], Subscript[a, 2, 3, 3], Subscript[a, 2, 3, 4]}}}
        expect_evaluated: {{{a     , a     , a     , a     }, {a     , a     , a     , a     }, {a     , a     , a     , a     }}, {{a     , a     , a     , a     }, {a     , a     , a     , a     }, {a     , a     , a     , a     }}}
    1,1,1   1,1,2   1,1,3   1,1,4     1,2,1   1,2,2   1,2,3   1,2,4     1,3,1   1,3,2   1,3,3   1,3,4       2,1,1   2,1,2   2,1,3   2,1,4     2,2,1   2,2,2   2,2,3   2,2,4     2,3,1   2,3,2   2,3,3   2,3,4
    ...
ok  Total[t]    ==>     {{Subscript[a, 1, 1, 1] + Subscript[a, 2, 1, 1], Subscript[a, 1, 1, 2] + Subscript[a, 2, 1, 2], Subscript[a, 1, 1, 3] + Subscript[a, 2, 1, 3], Subscript[a, 1, 1, 4] + Subscript[a, 2, 1, 4]}, {Subscript[a, 1, 2, 1] + Subscript[a, 2, 2, 1], Subscript[a, 1, 2, 2] + Subscript[a, 2, 2, 2], Subscript[a, 1, 2, 3] + Subscript[a, 2, 2, 3], Subscript[a, 1, 2, 4] + Subscript[a, 2, 2, 4]}, {Subscript[a, 1, 3, 1] + Subscript[a, 2, 3, 1], Subscript[a, 1, 3, 2] + Subscript[a, 2, 3, 2], Subscript[a, 1, 3, 3] + Subscript[a, 2, 3, 3], Subscript[a, 1, 3, 4] + Subscript[a, 2, 3, 4]}}
    ---
    data:
        got: {{a      + a     , a      + a     , a      + a     , a      + a     }, {a      + a     , a      + a     , a      + a     , a      + a     }, {a      + a     , a      + a     , a      + a     , a      + a     }}
#!    1,1,1    2,1,1   1,1,2    2,1,2   1,1,3    2,1,3   1,1,4    2,1,4     1,2,1    2,2,1   1,2,2    2,2,2   1,2,3    2,2,3   1,2,4    2,2,4     1,3,1    2,3,1   1,3,2    2,3,2   1,3,3    2,3,3   1,3,4    2,3,4
        expect: {{Subscript[a, 1, 1, 1] + Subscript[a, 2, 1, 1], Subscript[a, 1, 1, 2] + Subscript[a, 2, 1, 2], Subscript[a, 1, 1, 3] + Subscript[a, 2, 1, 3], Subscript[a, 1, 1, 4] + Subscript[a, 2, 1, 4]}, {Subscript[a, 1, 2, 1] + Subscript[a, 2, 2, 1], Subscript[a, 1, 2, 2] + Subscript[a, 2, 2, 2], Subscript[a, 1, 2, 3] + Subscript[a, 2, 2, 3], Subscript[a, 1, 2, 4] + Subscript[a, 2, 2, 4]}, {Subscript[a, 1, 3, 1] + Subscript[a, 2, 3, 1], Subscript[a, 1, 3, 2] + Subscript[a, 2, 3, 2], Subscript[a, 1, 3, 3] + Subscript[a, 2, 3, 3], Subscript[a, 1, 3, 4] + Subscript[a, 2, 3, 4]}}
        expect_evaluated: {{a      + a     , a      + a     , a      + a     , a      + a     }, {a      + a     , a      + a     , a      + a     , a      + a     }, {a      + a     , a      + a     , a      + a     , a      + a     }}
#!    1,1,1    2,1,1   1,1,2    2,1,2   1,1,3    2,1,3   1,1,4    2,1,4     1,2,1    2,2,1   1,2,2    2,2,2   1,2,3    2,2,3   1,2,4    2,2,4     1,3,1    2,3,1   1,3,2    2,3,2   1,3,3    2,3,3   1,3,4    2,3,4
    ...
# Total in the last dimension only:
ok  Total[t, {-1}]    ==>     {{Subscript[a, 1, 1, 1] + Subscript[a, 1, 1, 2] + Subscript[a, 1, 1, 3] + Subscript[a, 1, 1, 4], Subscript[a, 1, 2, 1] + Subscript[a, 1, 2, 2] + Subscript[a, 1, 2, 3] + Subscript[a, 1, 2, 4], Subscript[a, 1, 3, 1] + Subscript[a, 1, 3, 2] + Subscript[a, 1, 3, 3] + Subscript[a, 1, 3, 4]}, {Subscript[a, 2, 1, 1] + Subscript[a, 2, 1, 2] + Subscript[a, 2, 1, 3] + Subscript[a, 2, 1, 4], Subscript[a, 2, 2, 1] + Subscript[a, 2, 2, 2] + Subscript[a, 2, 2, 3] + Subscript[a, 2, 2, 4], Subscript[a, 2, 3, 1] + Subscript[a, 2, 3, 2] + Subscript[a, 2, 3, 3] + Subscript[a, 2, 3, 4]}}
    ---
    data:
        got: {{a      + a      + a      + a     , a      + a      + a      + a     , a      + a      + a      + a     }, {a      + a      + a      + a     , a      + a      + a      + a     , a      + a      + a      + a     }}
#!    1,1,1    1,1,2    1,1,3    1,1,4   1,2,1    1,2,2    1,2,3    1,2,4   1,3,1    1,3,2    1,3,3    1,3,4     2,1,1    2,1,2    2,1,3    2,1,4   2,2,1    2,2,2    2,2,3    2,2,4   2,3,1    2,3,2    2,3,3    2,3,4
        expect: {{Subscript[a, 1, 1, 1] + Subscript[a, 1, 1, 2] + Subscript[a, 1, 1, 3] + Subscript[a, 1, 1, 4], Subscript[a, 1, 2, 1] + Subscript[a, 1, 2, 2] + Subscript[a, 1, 2, 3] + Subscript[a, 1, 2, 4], Subscript[a, 1, 3, 1] + Subscript[a, 1, 3, 2] + Subscript[a, 1, 3, 3] + Subscript[a, 1, 3, 4]}, {Subscript[a, 2, 1, 1] + Subscript[a, 2, 1, 2] + Subscript[a, 2, 1, 3] + Subscript[a, 2, 1, 4], Subscript[a, 2, 2, 1] + Subscript[a, 2, 2, 2] + Subscript[a, 2, 2, 3] + Subscript[a, 2, 2, 4], Subscript[a, 2, 3, 1] + Subscript[a, 2, 3, 2] + Subscript[a, 2, 3, 3] + Subscript[a, 2, 3, 4]}}
        expect_evaluated: {{a      + a      + a      + a     , a      + a      + a      + a     , a      + a      + a      + a     }, {a      + a      + a      + a     , a      + a      + a      + a     , a      + a      + a      + a     }}
#!    1,1,1    1,1,2    1,1,3    1,1,4   1,2,1    1,2,2    1,2,3    1,2,4   1,3,1    1,3,2    1,3,3    1,3,4     2,1,1    2,1,2    2,1,3    2,1,4   2,2,1    2,2,2    2,2,3    2,2,4   2,3,1    2,3,2    2,3,3    2,3,4
    ...
# Total in the last two dimensions:
ok  Total[t, -2]    ==>     {Subscript[a, 1, 1, 1] + Subscript[a, 1, 2, 1] + Subscript[a, 1, 3, 1] + Subscript[a, 2, 1, 1] + Subscript[a, 2, 2, 1] + Subscript[a, 2, 3, 1], Subscript[a, 1, 1, 2] + Subscript[a, 1, 2, 2] + Subscript[a, 1, 3, 2] + Subscript[a, 2, 1, 2] + Subscript[a, 2, 2, 2] + Subscript[a, 2, 3, 2], Subscript[a, 1, 1, 3] + Subscript[a, 1, 2, 3] + Subscript[a, 1, 3, 3] + Subscript[a, 2, 1, 3] + Subscript[a, 2, 2, 3] + Subscript[a, 2, 3, 3], Subscript[a, 1, 1, 4] + Subscript[a, 1, 2, 4] + Subscript[a, 1, 3, 4] + Subscript[a, 2, 1, 4] + Subscript[a, 2, 2, 4] + Subscript[a, 2, 3, 4]}
    ---
    data:
        got: {a      + a      + a      + a      + a      + a     , a      + a      + a      + a      + a      + a     , a      + a      + a      + a      + a      + a     , a      + a      + a      + a      + a      + a     }
#!   1,1,1    1,2,1    1,3,1    2,1,1    2,2,1    2,3,1   1,1,2    1,2,2    1,3,2    2,1,2    2,2,2    2,3,2   1,1,3    1,2,3    1,3,3    2,1,3    2,2,3    2,3,3   1,1,4    1,2,4    1,3,4    2,1,4    2,2,4    2,3,4
        expect: {Subscript[a, 1, 1, 1] + Subscript[a, 1, 2, 1] + Subscript[a, 1, 3, 1] + Subscript[a, 2, 1, 1] + Subscript[a, 2, 2, 1] + Subscript[a, 2, 3, 1], Subscript[a, 1, 1, 2] + Subscript[a, 1, 2, 2] + Subscript[a, 1, 3, 2] + Subscript[a, 2, 1, 2] + Subscript[a, 2, 2, 2] + Subscript[a, 2, 3, 2], Subscript[a, 1, 1, 3] + Subscript[a, 1, 2, 3] + Subscript[a, 1, 3, 3] + Subscript[a, 2, 1, 3] + Subscript[a, 2, 2, 3] + Subscript[a, 2, 3, 3], Subscript[a, 1, 1, 4] + Subscript[a, 1, 2, 4] + Subscript[a, 1, 3, 4] + Subscript[a, 2, 1, 4] + Subscript[a, 2, 2, 4] + Subscript[a, 2, 3, 4]}
        expect_evaluated: {a      + a      + a      + a      + a      + a     , a      + a      + a      + a      + a      + a     , a      + a      + a      + a      + a      + a     , a      + a      + a      + a      + a      + a     }
#!   1,1,1    1,2,1    1,3,1    2,1,1    2,2,1    2,3,1   1,1,2    1,2,2    1,3,2    2,1,2    2,2,2    2,3,2   1,1,3    1,2,3    1,3,3    2,1,3    2,2,3    2,3,3   1,1,4    1,2,4    1,3,4    2,1,4    2,2,4    2,3,4
    ...
# Total all the elements:
ok  Total[t, Infinity]    ==>     Subscript[a, 1, 1, 1] + Subscript[a, 1, 1, 2] + Subscript[a, 1, 1, 3] + Subscript[a, 1, 1, 4] + Subscript[a, 1, 2, 1] + Subscript[a, 1, 2, 2] + Subscript[a, 1, 2, 3] + Subscript[a, 1, 2, 4] + Subscript[a, 1, 3, 1] + Subscript[a, 1, 3, 2] + Subscript[a, 1, 3, 3] + Subscript[a, 1, 3, 4] + Subscript[a, 2, 1, 1] + Subscript[a, 2, 1, 2] + Subscript[a, 2, 1, 3] + Subscript[a, 2, 1, 4] + Subscript[a, 2, 2, 1] + Subscript[a, 2, 2, 2] + Subscript[a, 2, 2, 3] + Subscript[a, 2, 2, 4] + Subscript[a, 2, 3, 1] + Subscript[a, 2, 3, 2] + Subscript[a, 2, 3, 3] + Subscript[a, 2, 3, 4]
    ---
    data:
        got: a      + a      + a      + a      + a      + a      + a      + a      + a      + a      + a      + a      + a      + a      + a      + a      + a      + a      + a      + a      + a      + a      + a      + a
#!  1,1,1    1,1,2    1,1,3    1,1,4    1,2,1    1,2,2    1,2,3    1,2,4    1,3,1    1,3,2    1,3,3    1,3,4    2,1,1    2,1,2    2,1,3    2,1,4    2,2,1    2,2,2    2,2,3    2,2,4    2,3,1    2,3,2    2,3,3    2,3,4
        expect: Subscript[a, 1, 1, 1] + Subscript[a, 1, 1, 2] + Subscript[a, 1, 1, 3] + Subscript[a, 1, 1, 4] + Subscript[a, 1, 2, 1] + Subscript[a, 1, 2, 2] + Subscript[a, 1, 2, 3] + Subscript[a, 1, 2, 4] + Subscript[a, 1, 3, 1] + Subscript[a, 1, 3, 2] + Subscript[a, 1, 3, 3] + Subscript[a, 1, 3, 4] + Subscript[a, 2, 1, 1] + Subscript[a, 2, 1, 2] + Subscript[a, 2, 1, 3] + Subscript[a, 2, 1, 4] + Subscript[a, 2, 2, 1] + Subscript[a, 2, 2, 2] + Subscript[a, 2, 2, 3] + Subscript[a, 2, 2, 4] + Subscript[a, 2, 3, 1] + Subscript[a, 2, 3, 2] + Subscript[a, 2, 3, 3] + Subscript[a, 2, 3, 4]
        expect_evaluated: a      + a      + a      + a      + a      + a      + a      + a      + a      + a      + a      + a      + a      + a      + a      + a      + a      + a      + a      + a      + a      + a      + a      + a
#!  1,1,1    1,1,2    1,1,3    1,1,4    1,2,1    1,2,2    1,2,3    1,2,4    1,3,1    1,3,2    1,3,3    1,3,4    2,1,1    2,1,2    2,1,3    2,1,4    2,2,1    2,2,2    2,2,3    2,2,4    2,3,1    2,3,2    2,3,3    2,3,4
    ...
# Total the last dimension in a ragged array:
ok  a = {{1, 2, 3}, {4, 5}, {6}} ;; Total[a, {-1}]    ==>     {6, 9, 6} # skip
# Total all the elements:
ok  Total[a, Infinity]    ==>     21 # skip
# You cannot total in the first dimension because the lists have incompatible lengths:
ok  Total[a]    ==>     Total[{{1, 2, 3}, {4, 5}, {6}}] # skip
# Total the columns in a sparse matrix:
ok  HoldComplete[s = SparseArray[{{i_, i_} -> -2, {i_, j_} /; Abs[i - j] == 1 -> 1}, {10, 10}]]    ==>     $Failed # skip
ok  Total[s]    ==>     {-1, 0, 0, 0, 0, 0, 0, 0, 0, -1}
    ---
    data:
        got: {-1, 0, 0, 0, 0, 0, 0, 0, 0, -1}
        expect: {-1, 0, 0, 0, 0, 0, 0, 0, 0, -1}
        expect_evaluated: {-1, 0, 0, 0, 0, 0, 0, 0, 0, -1}
    ...
# Total the rows:
ok  Total[s, {2}]    ==>     {-1, 0, 0, 0, 0, 0, 0, 0, 0, -1}
    ---
    data:
        got: {-1, 0, 0, 0, 0, 0, 0, 0, 0, -1}
        expect: {-1, 0, 0, 0, 0, 0, 0, 0, 0, -1}
        expect_evaluated: {-1, 0, 0, 0, 0, 0, 0, 0, 0, -1}
    ...
# Total several sparse vectors:
ok  HoldComplete[list = Table[SparseArray[{2^i} -> 1, {100}], {i, 6}]]    ==>     $Failed # skip
ok  HoldComplete[Total[list]]    ==>     $Failed # skip
# Total all the elements in all the vectors:
ok  Total[list, Infinity]    ==>     6
    ---
    data:
        got: 6
        expect: 6
        expect_evaluated: 6
    ...
# RefLink[Total,paclet:ref/Total] works with any head:
ok  Total[f[1, 2, 1]]    ==>     4
    ---
    data:
        got: 4
        expect: 4
        expect_evaluated: 4
    ...
# Find the total derivative order:
ok  Total[Derivative[1, 2, 1]]    ==>     4
    ---
    data:
        got: 4
        expect: 4
        expect_evaluated: 4
    ...
# Use RefLink[Method,paclet:ref/Method]->"CompensatedSummation" to reduce accumulated errors in a sum:
ok  x = ConstantArray[0.1, 10^6] ;; Total[x, Method -> "CompensatedSummation"] - 10^5    ==>     0. # skip
# Without compensated summation, small errors may accumulate with each term:
ok  Total[x] - 10^5    ==>     8.73115/10^10 # skip
# Form a polynomial from monomials:
not ok  Total[{x^2, 3*x^3, 1}]    ==>     1 + x^2 + 3*x^3
    ---
    data:
        got: inExpr$747
        expect: 1 + x^2 + 3*x^3
        expect_evaluated: outExpr$747
    ...
# Show that the trace of a matrix is equal to the total of its eigenvalues:
ok  m = RandomReal[1, {10, 10}] ;; Tr[m]    ==>     4.30281 # skip
ok  Total[Eigenvalues[m]]    ==>     4.30281 + 0.*I # skip
# Search for WebLink["perfect" numbers,http://mathworld.wolfram.com/PerfectNumber.html] equal to the sum of their divisors:
ok  perfectQ[x_Integer] := Total[Divisors[x]] == 2*x; Last[Reap[Do[If[perfectQ[x], Sow[x]], {x, 1, 10000}]]]    ==>     {{6, 28, 496, 8128}}
    ---
    data:
        got: {{6, 28, 496, 8128}}
        expect: {{6, 28, 496, 8128}}
        expect_evaluated: {{6, 28, 496, 8128}}
    ...
# RefLink[Total,paclet:ref/Total][list] is equivalent to RefLink[Apply,paclet:ref/Apply][RefLink[Plus,paclet:ref/Plus],list]:
ok  list = RandomInteger[9, {10}]    ==>     {9, 9, 4, 2, 5, 6, 0, 3, 4, 1} # skip
ok  Total[list]    ==>     43 # skip
ok  Plus @@ list    ==>     43 # skip
# RefLink[Total,paclet:ref/Total][list,k] is equivalent to RefLink[Total,paclet:ref/Total][RefLink[Flatten,paclet:ref/Flatten][list,k-1]]:
not ok  t = Array[Subscript[a, ##1] & , {2, 3, 4, 2}]    ==>     {{{{Subscript[a, 1, 1, 1, 1], Subscript[a, 1, 1, 1, 2]}, {Subscript[a, 1, 1, 2, 1], Subscript[a, 1, 1, 2, 2]}, {Subscript[a, 1, 1, 3, 1], Subscript[a, 1, 1, 3, 2]}, {Subscript[a, 1, 1, 4, 1], Subscript[a, 1, 1, 4, 2]}}, {{Subscript[a, 1, 2, 1, 1], Subscript[a, 1, 2, 1, 2]}, {Subscript[a, 1, 2, 2, 1], Subscript[a, 1, 2, 2, 2]}, {Subscript[a, 1, 2, 3, 1], Subscript[a, 1, 2, 3, 2]}, {Subscript[a, 1, 2, 4, 1], Subscript[a, 1, 2, 4, 2]}}, {{Subscript[a, 1, 3, 1, 1], Subscript[a, 1, 3, 1, 2]}, {Subscript[a, 1, 3, 2, 1], Subscript[a, 1, 3, 2, 2]}, {Subscript[a, 1, 3, 3, 1], Subscript[a, 1, 3, 3, 2]}, {Subscript[a, 1, 3, 4, 1], Subscript[a, 1, 3, 4, 2]}}}, {{{Subscript[a, 2, 1, 1, 1], Subscript[a, 2, 1, 1, 2]}, {Subscript[a, 2, 1, 2, 1], Subscript[a, 2, 1, 2, 2]}, {Subscript[a, 2, 1, 3, 1], Subscript[a, 2, 1, 3, 2]}, {Subscript[a, 2, 1, 4, 1], Subscript[a, 2, 1, 4, 2]}}, {{Subscript[a, 2, 2, 1, 1], Subscript[a, 2, 2, 1, 2]}, {Subscript[a, 2, 2, 2, 1], Subscript[a, 2, 2, 2, 2]}, {Subscript[a, 2, 2, 3, 1], Subscript[a, 2, 2, 3, 2]}, {Subscript[a, 2, 2, 4, 1], Subscript[a, 2, 2, 4, 2]}}, {{Subscript[a, 2, 3, 1, 1], Subscript[a, 2, 3, 1, 2]}, {Subscript[a, 2, 3, 2, 1], Subscript[a, 2, 3, 2, 2]}, {Subscript[a, 2, 3, 3, 1], Subscript[a, 2, 3, 3, 2]}, {Subscript[a, 2, 3, 4, 1], Subscript[a, 2, 3, 4, 2]}}}}
    ---
    data:
        got: inExpr$754
        expect: {{{{Subscript[a, 1, 1, 1, 1], Subscript[a, 1, 1, 1, 2]}, {Subscript[a, 1, 1, 2, 1], Subscript[a, 1, 1, 2, 2]}, {Subscript[a, 1, 1, 3, 1], Subscript[a, 1, 1, 3, 2]}, {Subscript[a, 1, 1, 4, 1], Subscript[a, 1, 1, 4, 2]}}, {{Subscript[a, 1, 2, 1, 1], Subscript[a, 1, 2, 1, 2]}, {Subscript[a, 1, 2, 2, 1], Subscript[a, 1, 2, 2, 2]}, {Subscript[a, 1, 2, 3, 1], Subscript[a, 1, 2, 3, 2]}, {Subscript[a, 1, 2, 4, 1], Subscript[a, 1, 2, 4, 2]}}, {{Subscript[a, 1, 3, 1, 1], Subscript[a, 1, 3, 1, 2]}, {Subscript[a, 1, 3, 2, 1], Subscript[a, 1, 3, 2, 2]}, {Subscript[a, 1, 3, 3, 1], Subscript[a, 1, 3, 3, 2]}, {Subscript[a, 1, 3, 4, 1], Subscript[a, 1, 3, 4, 2]}}}, {{{Subscript[a, 2, 1, 1, 1], Subscript[a, 2, 1, 1, 2]}, {Subscript[a, 2, 1, 2, 1], Subscript[a, 2, 1, 2, 2]}, {Subscript[a, 2, 1, 3, 1], Subscript[a, 2, 1, 3, 2]}, {Subscript[a, 2, 1, 4, 1], Subscript[a, 2, 1, 4, 2]}}, {{Subscript[a, 2, 2, 1, 1], Subscript[a, 2, 2, 1, 2]}, {Subscript[a, 2, 2, 2, 1], Subscript[a, 2, 2, 2, 2]}, {Subscript[a, 2, 2, 3, 1], Subscript[a, 2, 2, 3, 2]}, {Subscript[a, 2, 2, 4, 1], Subscript[a, 2, 2, 4, 2]}}, {{Subscript[a, 2, 3, 1, 1], Subscript[a, 2, 3, 1, 2]}, {Subscript[a, 2, 3, 2, 1], Subscript[a, 2, 3, 2, 2]}, {Subscript[a, 2, 3, 3, 1], Subscript[a, 2, 3, 3, 2]}, {Subscript[a, 2, 3, 4, 1], Subscript[a, 2, 3, 4, 2]}}}}
        expect_evaluated: outExpr$754
    ...
ok  Table[Total[t, k] === Total[Flatten[t, k - 1]], {k, 1, ArrayDepth[t]}]    ==>     {True, True, True, True} # skip
