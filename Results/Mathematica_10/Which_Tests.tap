#! DOCKER > wolfram -script output/Tests/Which_Tests.m
# SYSTEM: Mathematica_10
# TEST: Which_Tests
ok  a = 2; Which[a == 1, x, a == 2, b]    ==>     b
    ---
    data:
        got: b
        expect: b
        expect_evaluated: b
    ...
# RefLink[Which,paclet:ref/Which] can be maintained in symbolic form:
ok  Which[a == 1, x, a == 2, b]    ==>     Which[a == 1, x, a == 2, b]
    ---
    data:
        got: b
        expect: Which[a == 1, x, a == 2, b]
        expect_evaluated: b
    ...
ok  % /. a -> 2    ==>     b # skip
# Conditions are evaluated until one is found that is neither RefLink[True,paclet:ref/True] nor RefLink[False,paclet:ref/False]:
ok  Which[1 < 0, a, x == 0, b, 0 < 1, c]    ==>     Which[x == 0, b, 0 < 1, c]
    ---
    data:
        got: Which[x == 0, b, 0 < 1, c]
        expect: Which[x == 0, b, 0 < 1, c]
        expect_evaluated: Which[x == 0, b, 0 < 1, c]
    ...
ok  sign /@ {-2, 0, 3}    ==>     {-1, Indeterminate, 1} # skip
# Define a piecewise function:
ok  f = Which[x < -(Pi/2), -1, -(Pi/2) <= x <= Pi/2, Sin[x], True, 1]    ==>     Which[x < -(Pi/2), -1, -(Pi/2) <= x <= Pi/2, Sin[x], True, 1] # skip
# Expand it to use RefLink[Piecewise,paclet:ref/Piecewise]: 
ok  PiecewiseExpand[f]    ==>     Inequality[Piecewise[-1]*x, Less, (-(Pi/2))*1*x, Greater, (Pi/2)*Sin[x]*True] # skip
# Do symbolic operations: 
not ok  Reduce[f == 1/2, x]    ==>     x == Pi/6
    ---
    data:
        got: f == 1/2
        expect: x == Pi/6
        expect_evaluated: x == Pi/6
    ...
not ok  Integrate[f, {x, 0, 3}]    ==>     (8 - Pi)/2
    ---
    data:
        got: 3*f
        expect: (8 - Pi)/2
        expect_evaluated: (8 - Pi)/2
    ...
ok  D[f, x]    ==>     Which[x < -(Pi/2), 0, -(Pi/2) <= x <= Pi/2, Cos[x], True, 0] # skip
ok  HoldComplete[Plot[f, {x, -Pi, Pi}]]    ==>     $Failed # skip
ok  cut1 /@ {-2, -1, 0, 1, 2}    ==>     {-1, -1, 0, 1, 1} # skip
ok  cut2 /@ {-2, -1, 0, 1, 2}    ==>     {-1, -1, 0, 1, 1} # skip
# Use RefLink[PiecewiseExpand,paclet:ref/PiecewiseExpand] to convert RefLink[Which,paclet:ref/Which] to RefLink[Piecewise,paclet:ref/Piecewise]:
ok  PiecewiseExpand[Which[c1, a1, c2, a2, True, a3]]    ==>     Piecewise[a1]*c1*a2!*c1 && c2*a3*True # skip
ok  PiecewiseExpand[Which[c1, Which[d1, b1, True, b2], True, a2]]    ==>     Piecewise[a2!]*c1*b1*c1 && d1*b2*True # skip
ok  PiecewiseExpand[Which[Which[d1, b1, True, b2], a1, True, a2]]    ==>     Piecewise[a1]*(b1 && d1) || (b2 &&  !d1)*a2*True # skip
