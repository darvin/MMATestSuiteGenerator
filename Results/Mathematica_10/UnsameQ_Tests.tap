#! DOCKER > wolfram -script output/Tests/UnsameQ_Tests.m
# SYSTEM: Mathematica_10
# TEST: UnsameQ_Tests
# Test whether two expressions are not identically the same:
ok  x =!= y    ==>     True
    ---
    data:
        got: True
        expect: True
        expect_evaluated: True
    ...
ok  x =!= x    ==>     False
    ---
    data:
        got: False
        expect: False
        expect_evaluated: False
    ...
# != remains symbolic unless literal values are given:
ok  x != y    ==>     x != y
    ---
    data:
        got: x != y
        expect: x != y
        expect_evaluated: x != y
    ...
# Full form:
ok  x =!= y    ==>     True
    ---
    data:
        got: True
        expect: True
        expect_evaluated: True
    ...
# Test equivalence of strings:
ok  "abc" =!= "ABC"    ==>     True
    ---
    data:
        got: True
        expect: True
        expect_evaluated: True
    ...
# Numbers in different representations are not the same:
ok  0. =!= 0    ==>     True
    ---
    data:
        got: True
        expect: True
        expect_evaluated: True
    ...
# != nevertheless treats them as equal:
ok  0. != 0    ==>     False
    ---
    data:
        got: False
        expect: False
        expect_evaluated: False
    ...
# Test whether multiple expressions are all distinct:
ok  (x =!= x) =!= y    ==>     False # skip
ok  (x =!= y) =!= z    ==>     True
    ---
    data:
        got: True
        expect: True
        expect_evaluated: True
    ...
# Construct the permanent analog of the totally antisymmetric tensor:
ok  Boole[Array[UnsameQ, {3, 3, 3}]]    ==>     {{{0, 0, 0}, {0, 0, 1}, {0, 1, 0}}, {{0, 0, 1}, {0, 0, 0}, {1, 0, 0}}, {{0, 1, 0}, {1, 0, 0}, {0, 0, 0}}}
    ---
    data:
        got: {{{0, 0, 0}, {0, 0, 1}, {0, 1, 0}}, {{0, 0, 1}, {0, 0, 0}, {1, 0, 0}}, {{0, 1, 0}, {1, 0, 0}, {0, 0, 0}}}
        expect: {{{0, 0, 0}, {0, 0, 1}, {0, 1, 0}}, {{0, 0, 1}, {0, 0, 0}, {1, 0, 0}}, {{0, 1, 0}, {1, 0, 0}, {0, 0, 0}}}
        expect_evaluated: {{{0, 0, 0}, {0, 0, 1}, {0, 1, 0}}, {{0, 0, 1}, {0, 0, 0}, {1, 0, 0}}, {{0, 1, 0}, {1, 0, 0}, {0, 0, 0}}}
    ...
# 1 appears at positions corresponding to permutations:
ok  Position[%, 1]    ==>     {{1, 2, 3}, {1, 3, 2}, {2, 1, 3}, {2, 3, 1}, {3, 1, 2}, {3, 2, 1}} # skip
