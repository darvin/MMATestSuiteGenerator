#! DOCKER > wolfram -script output/Tests/Condition_Tests.m
#! TextForm[ColonForm[MessageName[$IterationLimit, itlim], StringForm[Iteration limit of `1` exceeded., Short[HoldForm[4096], 3]]]]
#! TextForm[ColonForm[MessageName[$IterationLimit, itlim], StringForm[Iteration limit of `1` exceeded., Short[HoldForm[4096], 3]]]]
#! TextForm[ColonForm[MessageName[$IterationLimit, itlim], StringForm[Iteration limit of `1` exceeded., Short[HoldForm[4096], 3]]]]
#! TextForm[ColonForm[MessageName[General, stop], StringForm[Further output of `1` will be suppressed during this calculation., Short[HoldForm[MessageName[$IterationLimit, itlim]], 3]]]]
# SYSTEM: Mathematica_10
# TEST: Condition_Tests
# Make a definition with the condition that x should be positive:
ok  f[x_] := ppp[x] /; x > 0; f[5]    ==>     ppp[5]
    ---
    data:
        got: ppp[5]
        expect: ppp[5]
        expect_evaluated: ppp[5]
    ...
ok  f[-6]    ==>     f[-6]
    ---
    data:
        got: f[-6]
        expect: f[-6]
        expect_evaluated: f[-6]
    ...
# Replace all elements which satisfy the condition of being negative:
ok  {6, -7, 3, 2, -1, -2} /. x_ /; x < 0 -> w    ==>     {6, w, 3, 2, w, w}
    ---
    data:
        got: {6, w, 3, 2, w, w}
        expect: {6, w, 3, 2, w, w}
        expect_evaluated: {6, w, 3, 2, w, w}
    ...
# Share a variable between a condition and function body:
ok  f[x_] := Module[{u}, u^2 /; (u = x - 1) > 0]; f[0]    ==>     f[0]
    ---
    data:
        got: f[0]
        expect: f[0]
        expect_evaluated: f[0]
    ...
ok  f[6]    ==>     25 # skip
# Use RefLink[Condition,paclet:ref/Condition] inside a function body to control evaluation: 
ok  f[x_] := Module[{a}, a = Prime[10^x]; FactorInteger[a + 1] /; a < 10^6]; f[4]    ==>     {{2, 1}, {3, 1}, {5, 1}, {3491, 1}} # skip
ok  f[5]    ==>     f[5]
    ---
    data:
        got: ppp[5]
        expect: f[5]
        expect_evaluated: ppp[5]
    ...
