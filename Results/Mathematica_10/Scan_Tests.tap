#! DOCKER > wolfram -script output/Tests/Scan_Tests.m
#! TextForm[ColonForm[MessageName[$IterationLimit, itlim], StringForm[Iteration limit of `1` exceeded., Short[HoldForm[4096], 3]]]]
#! TextForm[ColonForm[MessageName[$IterationLimit, itlim], StringForm[Iteration limit of `1` exceeded., Short[HoldForm[4096], 3]]]]
#! TextForm[ColonForm[MessageName[$IterationLimit, itlim], StringForm[Iteration limit of `1` exceeded., Short[HoldForm[4096], 3]]]]
#! TextForm[ColonForm[MessageName[General, stop], StringForm[Further output of `1` will be suppressed during this calculation., Short[HoldForm[MessageName[$IterationLimit, itlim]], 3]]]]
#! a
#! b
#! c
# SYSTEM: Mathematica_10
# TEST: Scan_Tests
# RefLink[Throw,paclet:ref/Throw] works inside RefLink[Scan,paclet:ref/Scan]:
ok  Catch[Scan[If[#1 > 5, Throw[#1]] & , {2, 4, 6, 8}]]    ==>     6
    ---
    data:
        got: 6
        expect: 6
        expect_evaluated: 6
    ...
# Make assignments based on data:
ok  Scan[(u[#1] = x) & , {55, 11, 77, 88}]; {u[76], u[77], u[78]}    ==>     {u[76], x, u[78]}
    ---
    data:
        got: {u[76], x, u[78]}
        expect: {u[76], x, u[78]}
        expect_evaluated: {u[76], x, u[78]}
    ...
# Find all leaves in an expression:
ok  Integrate[1/(x^3 - 1), x]    ==>     -(ArcTan[(1 + 2*x)/Sqrt[3]]/Sqrt[3]) + (1/3)*Log[-1 + x] - (1/6)*Log[1 + x + x^2] # skip
ok  Reap[Scan[Sow, %, {-1}]][[2,1]]    ==>     {-1, 3, -(1/2), 3, -(1/2), 1, 2, x, 1/3, -1, x, -(1/6), 1, x, x, 2} # skip
# RefLink[Scan,paclet:ref/Scan] does the same as RefLink[Map,paclet:ref/Map], but without returning a result:
ok  Print /@ {a, b, c}    ==>     {Null, Null, Null}
    ---
    data:
        got: {Null, Null, Null}
        expect: {Null, Null, Null}
        expect_evaluated: {Null, Null, Null}
    ...
# Use RefLink[Sow,paclet:ref/Sow] and RefLink[Reap,paclet:ref/Reap] to collect results:
ok  Reap[Scan[If[#1 > 0, Sow[#1]] & , {1, {-2, Pi}, -Sqrt[3]}, Infinity]][[2,1]]    ==>     {1, Pi, 3, 1/2, Sqrt[3]}
    ---
    data:
        got:            1
#! {1, Pi, 3, -, Sqrt[3]}
#!            2
        expect: {1, Pi, 3, 1/2, Sqrt[3]}
        expect_evaluated:            1
#! {1, Pi, 3, -, Sqrt[3]}
#!            2
    ...
