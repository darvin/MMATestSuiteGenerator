# SYSTEM: Mathematica_10
# TEST: PreDecrement_Tests
# OUTPUT: output/Results/Mathematica_10/PreDecrement_Tests.json
# Decrement the value by one and return the new value:
ok  k = 1; --k    ==>     0
    ---
    data:
        got: 0
        expect: 0
        expect_evaluated: 0
    ...
ok  k    ==>     0
    ---
    data:
        got: 0
        expect: 0
        expect_evaluated: 0
    ...
# Decrement a numerical value:
ok  x = 1.5; --x; x    ==>     0.5
    ---
    data:
        got: 0.5
        expect: 0.5
        expect_evaluated: 0.5
    ...
# Decrement a symbolic value:
ok  v = a; --v; v    ==>     -1 + a
    ---
    data:
        got: -1 + a
        expect: -1 + a
        expect_evaluated: -1 + a
    ...
# Decrement all values in a list:
ok  x = {1, 2, 3}    ==>     {1, 2, 3}
    ---
    data:
        got: {1, 2, 3}
        expect: {1, 2, 3}
        expect_evaluated: {1, 2, 3}
    ...
ok  --x; x    ==>     {0, 1, 2}
    ---
    data:
        got: {0, 1, 2}
        expect: {0, 1, 2}
        expect_evaluated: {0, 1, 2}
    ...
# Find the first integer below one million with a certain property:
ok  i = 10^6; While[ !PrimeQ[--i], Null]; i    ==>     999983
    ---
    data:
        got: 999983
        expect: 999983
        expect_evaluated: 999983
    ...
ok  {a--, --b}    ==>     {1, 0} # skip
ok  {a, b}    ==>     {0, 0} # skip
# RefLink[PreDecrement,paclet:ref/PreDecrement] is a short form of this assignment:
ok  k = 1; k = k - 1    ==>     0
    ---
    data:
        got: 0
        expect: 0
        expect_evaluated: 0
    ...
# RefLink[PreDecrement,paclet:ref/PreDecrement] is a special case of RefLink[SubtractFrom,paclet:ref/SubtractFrom]:
ok  k = 1; k -= 1    ==>     0
    ---
    data:
        got: 0
        expect: 0
        expect_evaluated: 0
    ...
ok  {a++, ++b, c--, --d}    ==>     {1, 2, 1, 0} # skip
ok  {a, b, c, d}    ==>     {2, 2, 0, 0} # skip
# A variable to be decremented must have an initial value:
ok  --x    ==>     --x # skip
