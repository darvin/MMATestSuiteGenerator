# SYSTEM: Mathematica_10
# TEST: Transpose_Tests
# OUTPUT: output/Results/Mathematica_10/Transpose_Tests.json
# Transpose a 2*3 matrix:
ok  Transpose[{{a, b, c}, {x, y, z}}]    ==>     {{a, x}, {b, y}, {c, z}}
    ---
    data:
        got: {{a, x}, {b, y}, {c, z}}
        expect: {{a, x}, {b, y}, {c, z}}
        expect_evaluated: {{a, x}, {b, y}, {c, z}}
    ...
ok  MatrixForm[m]    ==>     a*b*c*x*y*z # skip
ok  MatrixForm[Transpose[m]]    ==>     a*x*b*y*c*z # skip
ok  m = Array[a, {2, 3, 2}]    ==>     {{{a[1, 1, 1], a[1, 1, 2]}, {a[1, 2, 1], a[1, 2, 2]}, {a[1, 3, 1], a[1, 3, 2]}}, {{a[2, 1, 1], a[2, 1, 2]}, {a[2, 2, 1], a[2, 2, 2]}, {a[2, 3, 1], a[2, 3, 2]}}}
    ---
    data:
        got: {{{a[1, 1, 1], a[1, 1, 2]}, {a[1, 2, 1], a[1, 2, 2]}, {a[1, 3, 1], a[1, 3, 2]}}, {{a[2, 1, 1], a[2, 1, 2]}, {a[2, 2, 1], a[2, 2, 2]}, {a[2, 3, 1], a[2, 3, 2]}}}
        expect: {{{a[1, 1, 1], a[1, 1, 2]}, {a[1, 2, 1], a[1, 2, 2]}, {a[1, 3, 1], a[1, 3, 2]}}, {{a[2, 1, 1], a[2, 1, 2]}, {a[2, 2, 1], a[2, 2, 2]}, {a[2, 3, 1], a[2, 3, 2]}}}
        expect_evaluated: {{{a[1, 1, 1], a[1, 1, 2]}, {a[1, 2, 1], a[1, 2, 2]}, {a[1, 3, 1], a[1, 3, 2]}}, {{a[2, 1, 1], a[2, 1, 2]}, {a[2, 2, 1], a[2, 2, 2]}, {a[2, 3, 1], a[2, 3, 2]}}}
    ...
ok  Transpose[m, {1, 3, 2}]    ==>     {{{a[1, 1, 1], a[1, 2, 1], a[1, 3, 1]}, {a[1, 1, 2], a[1, 2, 2], a[1, 3, 2]}}, {{a[2, 1, 1], a[2, 2, 1], a[2, 3, 1]}, {a[2, 1, 2], a[2, 2, 2], a[2, 3, 2]}}}
    ---
    data:
        got: {{{a[1, 1, 1], a[1, 2, 1], a[1, 3, 1]}, {a[1, 1, 2], a[1, 2, 2], a[1, 3, 2]}}, {{a[2, 1, 1], a[2, 2, 1], a[2, 3, 1]}, {a[2, 1, 2], a[2, 2, 2], a[2, 3, 2]}}}
        expect: {{{a[1, 1, 1], a[1, 2, 1], a[1, 3, 1]}, {a[1, 1, 2], a[1, 2, 2], a[1, 3, 2]}}, {{a[2, 1, 1], a[2, 2, 1], a[2, 3, 1]}, {a[2, 1, 2], a[2, 2, 2], a[2, 3, 2]}}}
        expect_evaluated: {{{a[1, 1, 1], a[1, 2, 1], a[1, 3, 1]}, {a[1, 1, 2], a[1, 2, 2], a[1, 3, 2]}}, {{a[2, 1, 1], a[2, 2, 1], a[2, 3, 1]}, {a[2, 1, 2], a[2, 2, 2], a[2, 3, 2]}}}
    ...
ok  Transpose[m, {3, 2, 1}]    ==>     {{{a[1, 1, 1], a[2, 1, 1]}, {a[1, 2, 1], a[2, 2, 1]}, {a[1, 3, 1], a[2, 3, 1]}}, {{a[1, 1, 2], a[2, 1, 2]}, {a[1, 2, 2], a[2, 2, 2]}, {a[1, 3, 2], a[2, 3, 2]}}}
    ---
    data:
        got: {{{a[1, 1, 1], a[2, 1, 1]}, {a[1, 2, 1], a[2, 2, 1]}, {a[1, 3, 1], a[2, 3, 1]}}, {{a[1, 1, 2], a[2, 1, 2]}, {a[1, 2, 2], a[2, 2, 2]}, {a[1, 3, 2], a[2, 3, 2]}}}
        expect: {{{a[1, 1, 1], a[2, 1, 1]}, {a[1, 2, 1], a[2, 2, 1]}, {a[1, 3, 1], a[2, 3, 1]}}, {{a[1, 1, 2], a[2, 1, 2]}, {a[1, 2, 2], a[2, 2, 2]}, {a[1, 3, 2], a[2, 3, 2]}}}
        expect_evaluated: {{{a[1, 1, 1], a[2, 1, 1]}, {a[1, 2, 1], a[2, 2, 1]}, {a[1, 3, 1], a[2, 3, 1]}}, {{a[1, 1, 2], a[2, 1, 2]}, {a[1, 2, 2], a[2, 2, 2]}, {a[1, 3, 2], a[2, 3, 2]}}}
    ...
ok  Transpose[m, {2, 1, 3}]    ==>     {{{a[1, 1, 1], a[1, 1, 2]}, {a[2, 1, 1], a[2, 1, 2]}}, {{a[1, 2, 1], a[1, 2, 2]}, {a[2, 2, 1], a[2, 2, 2]}}, {{a[1, 3, 1], a[1, 3, 2]}, {a[2, 3, 1], a[2, 3, 2]}}}
    ---
    data:
        got: {{{a[1, 1, 1], a[1, 1, 2]}, {a[2, 1, 1], a[2, 1, 2]}}, {{a[1, 2, 1], a[1, 2, 2]}, {a[2, 2, 1], a[2, 2, 2]}}, {{a[1, 3, 1], a[1, 3, 2]}, {a[2, 3, 1], a[2, 3, 2]}}}
        expect: {{{a[1, 1, 1], a[1, 1, 2]}, {a[2, 1, 1], a[2, 1, 2]}}, {{a[1, 2, 1], a[1, 2, 2]}, {a[2, 2, 1], a[2, 2, 2]}}, {{a[1, 3, 1], a[1, 3, 2]}, {a[2, 3, 1], a[2, 3, 2]}}}
        expect_evaluated: {{{a[1, 1, 1], a[1, 1, 2]}, {a[2, 1, 1], a[2, 1, 2]}}, {{a[1, 2, 1], a[1, 2, 2]}, {a[2, 2, 1], a[2, 2, 2]}}, {{a[1, 3, 1], a[1, 3, 2]}, {a[2, 3, 1], a[2, 3, 2]}}}
    ...
# s is a sparse matrix:
not ok  HoldComplete[s = SparseArray[{{1, 1} -> 1, {2, 3} -> 4, {3, 1} -> -1}]]    ==>     $Failed
    ---
    data:
        got: SparseArray[Automatic, {3, 3}, 0, {1, {{0, 1, 2, 3}, {{1}, {3}, {1}}}, {1, 4, -1}}]
        expect: $Failed
        expect_evaluated: $Failed
    ...
# RefLink[Transpose,paclet:ref/Transpose][s] is sparse:
ok  HoldComplete[Transpose[s]]    ==>     $Failed # skip
# The indices have, in effect, just been reversed:
ok  ArrayRules[%]    ==>     {{1, 1} -> 1, {1, 3} -> -1, {3, 2} -> 4, {_, _} -> 0} # skip
# Enter using Esc\[ThinSpace]tr\[ThinSpace]Esc:
ok  $Failed    ==>     HoldComplete[{{1, 3}, {2, 4}}] # skip
# Get the leading diagonal by transposing two identical levels:
ok  Transpose[Array[a, {3, 3}], {1, 1}]    ==>     {a[1, 1], a[2, 2], a[3, 3]}
    ---
    data:
        got: {a[1, 1], a[2, 2], a[3, 3]}
        expect: {a[1, 1], a[2, 2], a[3, 3]}
        expect_evaluated: {a[1, 1], a[2, 2], a[3, 3]}
    ...
# RefLink[Accumulate,paclet:ref/Accumulate] values of a tensor at all levels:
ok  Multidimensionalize[Accumulate][{{{1, 2, 3, 4}, {5, 6, 7, 8}, {9, 10, 11, 12}}, {{13, 14, 15, 16}, {17, 18, 19, 20}, {21, 22, 23, 24}}}]    ==>     {{{1, 3, 6, 10}, {6, 14, 24, 36}, {15, 33, 54, 78}}, {{14, 30, 48, 68}, {36, 76, 120, 168}, {66, 138, 216, 300}}} # skip
# Import data from an image:
ok  HoldComplete[ArrayPlot[data = 256 - Import["ExampleData/Turtle.jpg", "Data"]]]    ==>     $Failed # skip
# Flip the image by reversing at both levels:
ok  HoldComplete[ArrayPlot[Multidimensionalize[Reverse][data]]]    ==>     $Failed # skip
# Transposing by a permutation \[Sigma] transposes the element positions by \[Sigma]^-1: 
ok  {\[Sigma] = RandomSample[Range[3]], \[Sigma]i = \[Sigma]; \[Sigma]i[[\[Sigma]]] = Range[3]}    ==>     {{2, 3, 1}, {1, 2, 3}} # skip
ok  Extract[T, {1, 3, 1}] == Extract[Transpose[T, \[Sigma]], {1, 3, 1}[[\[Sigma]i]]]    ==>     True # skip
ok  Transpose[m, {1, 1}]    ==>     {0.0102966, 0.440439, 0.137455, 0.555521} # skip
ok  Diagonal[m]    ==>     {0.0102966, 0.440439, 0.137455, 0.555521} # skip
# RefLink[Transpose,paclet:ref/Transpose] only works for rectangular arrays:
ok  Transpose[{{1, 2, 3, 4}, {5}, {6, 7}}]    ==>     Transpose[{{1, 2, 3, 4}, {5}, {6, 7}}]
    ---
    data:
        got: Transpose[{{1, 2, 3, 4}, {5}, {6, 7}}]
        expect: Transpose[{{1, 2, 3, 4}, {5}, {6, 7}}]
        expect_evaluated: Transpose[{{1, 2, 3, 4}, {5}, {6, 7}}]
    ...
# Generalize transposition by padding:
ok  Transpose[PadRight[{{1, 2, 3, 4}, {5}, {6, 7}}, {3, 4}, p]]    ==>     {{1, 5, 6}, {2, p, 7}, {3, p, p}, {4, p, p}}
    ---
    data:
        got: {{1, 5, 6}, {2, p, 7}, {3, p, p}, {4, p, p}}
        expect: {{1, 5, 6}, {2, p, 7}, {3, p, p}, {4, p, p}}
        expect_evaluated: {{1, 5, 6}, {2, p, 7}, {3, p, p}, {4, p, p}}
    ...
# Eliminate the padding:
ok  % /. p -> Sequence[]    ==>     {{1, 5, 6}, {2, 7}, {3}, {4}} # skip
ok  HoldComplete[(MatrixForm[Transpose[{{{{x, x, x, x}}}}, #1]] & ) /@ Permutations[{1, 2, 3, 4}]]    ==>     $Failed # skip
