#! DOCKER > wolfram -script output/Tests/SeedRandom_Tests.m
# SYSTEM: Mathematica_10
# TEST: SeedRandom_Tests
# Use RefLink[SeedRandom,paclet:ref/SeedRandom] to make random numbers repeatable:
ok  SeedRandom[1234]; RandomReal[]    ==>     0.918946 # skip
ok  SeedRandom[1234]; RandomReal[]    ==>     0.918946 # skip
# The seed can be a string:
ok  SeedRandom["password"]; RandomReal[]    ==>     0.42532 # skip
# RefLink[SeedRandom,paclet:ref/SeedRandom] affects all random generators:
ok  SeedRandom[4567]; {RandomInteger[10], RandomReal[]}    ==>     {5, 0.352724} # skip
ok  SeedRandom[4567]; {RandomReal[], RandomInteger[10]}    ==>     {0.334545, 8} # skip
# Random numbers are now generated using it:
ok  RandomReal[1, 5]    ==>     {0.192304, 0.30695, 0.0295638, 0.358881, 0.0340693} # skip
# A specific seed will affect the current Mersenne twister generator:
ok  SeedRandom[4321]; RandomReal[1, 5]    ==>     {0.448897, 0.199816, 0.907441, 0.277851, 0.348082} # skip
# Reproduce a part of a computation that uses randomness:
ok  SeedRandom[1234]; Eigenvalues[RandomReal[1, {100, 100}], 1]    ==>     {50.0846} # skip
ok  SeedRandom[1234]; Eigenvalues[RandomReal[1, {100, 100}], -1]    ==>     {0.149017 - 0.119666*I} # skip
ok  SeedRandom[1234]; Eigenvalues[RandomReal[1, {100, 100}]][[{1, -1}]]    ==>     {50.0846, 0.149017 - 0.119666*I} # skip
ok  HoldComplete[p100 = rplot[Sin[x], {x, 0, 10*Pi}]]    ==>     $Failed # skip
# Using the function again with more points just adds the additional points:
ok  HoldComplete[rplot[Sin[x], {x, 0, 10*Pi}, PlotPoints -> 125]]    ==>     $Failed # skip
