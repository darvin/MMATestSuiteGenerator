{
    "stats": {
        "suites": 0,
        "tests": 9,
        "passes": 9,
        "pending": 0,
        "failures": 0,
        "start": "2018-06-11T04:13:38.251Z",
        "end": "2018-06-11T04:13:38.251Z",
        "duration": 0,
        "testsRegistered": 9,
        "passPercent": 100,
        "pendingPercent": 0,
        "other": 0,
        "hasOther": false,
        "skipped": 0,
        "hasSkipped": false,
        "passPercentClass": "danger",
        "pendingPercentClass": "danger"
    },
    "suites": {
        "title": "",
        "suites": [],
        "tests": [
            {
                "title": "Complement[{a, b, c, d, e}, {a, c}, {d}]    ➡️     {b, e}",
                "fullTitle": "Complement[{a, b, c, d, e}, {a, c}, {d}]    ➡️     {b, e}",
                "timedOut": false,
                "duration": 0,
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "",
                "isRoot": false,
                "uuid": "1272d251-d7cb-4f3f-8710-9c0481e1a78c",
                "parentUUID": "de5c1946-0d91-4438-97f7-1a7563d417de",
                "skipped": false,
                "isHook": false,
                "context": "\"#! DOCKER > wolfram -script output/Tests/Complement_Tests.m\\n#! TextForm[ColonForm[MessageName[$IterationLimit, itlim], StringForm[Iteration limit of `1` exceeded., Short[HoldForm[4096], 3]]]]\\n#! TextForm[ColonForm[MessageName[$IterationLimit, itlim], StringForm[Iteration limit of `1` exceeded., Short[HoldForm[4096], 3]]]]\\n#! TextForm[ColonForm[MessageName[$IterationLimit, itlim], StringForm[Iteration limit of `1` exceeded., Short[HoldForm[4096], 3]]]]\\n#! TextForm[ColonForm[MessageName[General, stop], StringForm[Further output of `1` will be suppressed during this calculation., Short[HoldForm[MessageName[$IterationLimit, itlim]], 3]]]]\\n# SYSTEM: Mathematica_10\\n# TEST: Complement_Tests\\n# Find which elements in the first list are not in any of the subsequent lists:\\n\\n\\ndata: \\n  got: \\n    b: null\\n    e: null\\n  expect: \\n    b: null\\n    e: null\\n  expect_evaluated: \\n    b: null\\n    e: null\"",
                "state": "passed",
                "err": {
                    "name": "",
                    "message": "",
                    "showDiff": true,
                    "actual": {
                        "b": null,
                        "e": null
                    },
                    "expected": {
                        "b": null,
                        "e": null
                    }
                }
            },
            {
                "title": "Complement[f[a, b, c, d], f[c, a], f[b, b, a]]    ➡️     f[d]",
                "fullTitle": "Complement[f[a, b, c, d], f[c, a], f[b, b, a]]    ➡️     f[d]",
                "timedOut": false,
                "duration": 0,
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "",
                "isRoot": false,
                "uuid": "866898cf-dc48-4dd0-9b50-d03c309cae35",
                "parentUUID": "de5c1946-0d91-4438-97f7-1a7563d417de",
                "skipped": false,
                "isHook": false,
                "context": "\"# RefLink[Complement,paclet:ref/Complement] works with any head, not just RefLink[List,paclet:ref/List]:\\n\\n\\ndata: \\n  got:              f[d]\\n  expect:           f[d]\\n  expect_evaluated: f[d]\"",
                "state": "passed",
                "err": {
                    "name": "",
                    "message": "",
                    "showDiff": true,
                    "actual": "f[d]",
                    "expected": "f[d]"
                }
            },
            {
                "title": "Complement[{2, -2, 1, 3}, {2, 1, -2, -1}, SameTest -> (Abs[#1] == Abs[#2] & )]    ➡️     {3}",
                "fullTitle": "Complement[{2, -2, 1, 3}, {2, 1, -2, -1}, SameTest -> (Abs[#1] == Abs[#2] & )]    ➡️     {3}",
                "timedOut": false,
                "duration": 0,
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "",
                "isRoot": false,
                "uuid": "9fdd3571-4059-49a3-a031-4324140831ec",
                "parentUUID": "de5c1946-0d91-4438-97f7-1a7563d417de",
                "skipped": false,
                "isHook": false,
                "context": "\"# Use equivalence classes based on absolute value: \\n\\n\\ndata: \\n  got: \\n    3: null\\n  expect: \\n    3: null\\n  expect_evaluated: \\n    3: null\"",
                "state": "passed",
                "err": {
                    "name": "",
                    "message": "",
                    "showDiff": true,
                    "actual": {
                        "3": null
                    },
                    "expected": {
                        "3": null
                    }
                }
            },
            {
                "title": "Complement[{1.1, 3.4, 0.5, 7.6, 7.1, 1.9}, {1.2, 3.3, 1.3}, SameTest -> (Floor[#1] == Floor[#2] & )]    ➡️     {0.5, 7.1}",
                "fullTitle": "Complement[{1.1, 3.4, 0.5, 7.6, 7.1, 1.9}, {1.2, 3.3, 1.3}, SameTest -> (Floor[#1] == Floor[#2] & )]    ➡️     {0.5, 7.1}",
                "timedOut": false,
                "duration": 0,
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "",
                "isRoot": false,
                "uuid": "1bf442e4-8b23-403d-abeb-c1779f732ccf",
                "parentUUID": "de5c1946-0d91-4438-97f7-1a7563d417de",
                "skipped": false,
                "isHook": false,
                "context": "\"# Use equivalence classes based on RefLink[Floor,paclet:ref/Floor]:\\n\\n\\ndata: \\n  got: \\n    0.5: null\\n    7.1: null\\n  expect: \\n    0.5: null\\n    7.1: null\\n  expect_evaluated: \\n    0.5: null\\n    7.1: null\"",
                "state": "passed",
                "err": {
                    "name": "",
                    "message": "",
                    "showDiff": true,
                    "actual": {
                        "0.5": null,
                        "7.1": null
                    },
                    "expected": {
                        "0.5": null,
                        "7.1": null
                    }
                }
            },
            {
                "title": "Complement[{{1, 2}, {3}, {4, 5, 6}, {9, 5}}, {{2, 1}, {8, 4, 3}}, SameTest -> (Total[#1] == Total[#2] & )]    ➡️     {{9, 5}}",
                "fullTitle": "Complement[{{1, 2}, {3}, {4, 5, 6}, {9, 5}}, {{2, 1}, {8, 4, 3}}, SameTest -> (Total[#1] == Total[#2] & )]    ➡️     {{9, 5}}",
                "timedOut": false,
                "duration": 0,
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "",
                "isRoot": false,
                "uuid": "3978ab39-1a78-4e6c-a6eb-5552f7dc0f1a",
                "parentUUID": "de5c1946-0d91-4438-97f7-1a7563d417de",
                "skipped": false,
                "isHook": false,
                "context": "\"# Use RefLink[Total,paclet:ref/Total] of list elements:\\n\\n\\ndata: \\n  got: \\n    [object Object]: null\\n  expect: \\n    [object Object]: null\\n  expect_evaluated: \\n    [object Object]: null\"",
                "state": "passed",
                "err": {
                    "name": "",
                    "message": "",
                    "showDiff": true,
                    "actual": {
                        "[object Object]": null
                    },
                    "expected": {
                        "[object Object]": null
                    }
                }
            },
            {
                "title": "Complement[Divisors[20], Divisors[12]]    ➡️     {5, 10, 20}",
                "fullTitle": "Complement[Divisors[20], Divisors[12]]    ➡️     {5, 10, 20}",
                "timedOut": false,
                "duration": 0,
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "",
                "isRoot": false,
                "uuid": "9c7635ec-e4ee-4cbd-87c2-51250f2aacfb",
                "parentUUID": "de5c1946-0d91-4438-97f7-1a7563d417de",
                "skipped": false,
                "isHook": false,
                "context": "\"# Find divisors of 20 that are not also divisors of 12:\\n\\n\\ndata: \\n  got: \\n    5:  null\\n    10: null\\n    20: null\\n  expect: \\n    5:  null\\n    10: null\\n    20: null\\n  expect_evaluated: \\n    5:  null\\n    10: null\\n    20: null\"",
                "state": "passed",
                "err": {
                    "name": "",
                    "message": "",
                    "showDiff": true,
                    "actual": {
                        "5": null,
                        "10": null,
                        "20": null
                    },
                    "expected": {
                        "5": null,
                        "10": null,
                        "20": null
                    }
                }
            },
            {
                "title": "Complement[Tuples[{0, 1}, 3], Partition[IntegerDigits[12345, 2], 3, 1]]    ➡️     {{0, 1, 0}, {1, 0, 1}}",
                "fullTitle": "Complement[Tuples[{0, 1}, 3], Partition[IntegerDigits[12345, 2], 3, 1]]    ➡️     {{0, 1, 0}, {1, 0, 1}}",
                "timedOut": false,
                "duration": 0,
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "",
                "isRoot": false,
                "uuid": "7e0a1c63-662c-47ac-92ff-4fabe31993d5",
                "parentUUID": "de5c1946-0d91-4438-97f7-1a7563d417de",
                "skipped": false,
                "isHook": false,
                "context": "\"# Find which triples of digits do not occur in the binary decomposition of 12345:\\n\"",
                "state": "passed",
                "err": {}
            },
            {
                "title": "Complement[First /@ Options[Plot], First /@ Options[Graphics]]    ➡️     {ClippingStyle, ColorFunction, ColorFunctionScaling, Evaluated, EvaluationMonitor, Exclusions, ExclusionsStyle, Filling, FillingStyle, MaxRecursion, Mesh, MeshFunctions, MeshShading, MeshStyle, PerformanceGoal, PlotPoints, PlotStyle, RegionFunction, WorkingPrecision}",
                "fullTitle": "Complement[First /@ Options[Plot], First /@ Options[Graphics]]    ➡️     {ClippingStyle, ColorFunction, ColorFunctionScaling, Evaluated, EvaluationMonitor, Exclusions, ExclusionsStyle, Filling, FillingStyle, MaxRecursion, Mesh, MeshFunctions, MeshShading, MeshStyle, PerformanceGoal, PlotPoints, PlotStyle, RegionFunction, WorkingPrecision}",
                "timedOut": false,
                "duration": 0,
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "",
                "isRoot": false,
                "uuid": "bc50106e-143c-41a1-8929-57f92bedf3dc",
                "parentUUID": "de5c1946-0d91-4438-97f7-1a7563d417de",
                "skipped": true,
                "isHook": false,
                "context": "\"# Find which options to RefLink[Plot,paclet:ref/Plot] are not also options to RefLink[Graphics,paclet:ref/Graphics]:\\n\"",
                "state": "passed",
                "err": {}
            },
            {
                "title": "Complement[Tuples[{0, 1}, 5], Table[Last[CellularAutomaton[i, {{1}, 0}, {2, All}]], {i, 0, 255}]]    ➡️     {{0, 1, 1, 0, 1}, {1, 0, 1, 1, 0}}",
                "fullTitle": "Complement[Tuples[{0, 1}, 5], Table[Last[CellularAutomaton[i, {{1}, 0}, {2, All}]], {i, 0, 255}]]    ➡️     {{0, 1, 1, 0, 1}, {1, 0, 1, 1, 0}}",
                "timedOut": false,
                "duration": 0,
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "",
                "isRoot": false,
                "uuid": "529736a2-eaf8-46b4-a0ea-662a498c1ad4",
                "parentUUID": "de5c1946-0d91-4438-97f7-1a7563d417de",
                "skipped": false,
                "isHook": false,
                "context": "\"# Find which length-5 sequences never occur after 2 steps in any elementary cellular automaton:\\n\"",
                "state": "passed",
                "err": {}
            }
        ],
        "root": true,
        "fullFile": "",
        "file": "",
        "pending": [],
        "passes": [
            "1272d251-d7cb-4f3f-8710-9c0481e1a78c",
            "866898cf-dc48-4dd0-9b50-d03c309cae35",
            "9fdd3571-4059-49a3-a031-4324140831ec",
            "1bf442e4-8b23-403d-abeb-c1779f732ccf",
            "3978ab39-1a78-4e6c-a6eb-5552f7dc0f1a",
            "9c7635ec-e4ee-4cbd-87c2-51250f2aacfb",
            "7e0a1c63-662c-47ac-92ff-4fabe31993d5",
            "bc50106e-143c-41a1-8929-57f92bedf3dc",
            "529736a2-eaf8-46b4-a0ea-662a498c1ad4"
        ],
        "failures": [],
        "skipped": [
            "bc50106e-143c-41a1-8929-57f92bedf3dc"
        ],
        "duration": 0,
        "rootEmpty": false,
        "_timeout": 0,
        "uuid": "de5c1946-0d91-4438-97f7-1a7563d417de",
        "beforeHooks": [],
        "afterHooks": []
    },
    "copyrightYear": 2018
}
