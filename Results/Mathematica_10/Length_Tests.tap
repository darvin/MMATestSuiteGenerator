# SYSTEM: Mathematica_10
# TEST: Length_Tests
# OUTPUT: output/Results/Mathematica_10/Length_Tests.json
# Find the length of a list:
ok  Length[{a, b, c, d}]    ==>     4
    ---
    data:
        got: 4
        expect: 4
        expect_evaluated: 4
    ...
# Find the length of an RefLink[Association,paclet:ref/Association]:
ok  Length[<|  |>]    ==>     0
    ---
    data:
        got: 0
        expect: 0
        expect_evaluated: 0
    ...
ok  Length[<| 1 -> 2, 3 -> 4 |>]    ==>     2
    ---
    data:
        got: 2
        expect: 2
        expect_evaluated: 2
    ...
# RefLink[Length,paclet:ref/Length] works with any head:
ok  Length[a + b + c + d]    ==>     4
    ---
    data:
        got: 4
        expect: 4
        expect_evaluated: 4
    ...
# RefLink[Length,paclet:ref/Length][expr] gives the number of elements in the top level of expr:
ok  Length[f[g[x, y], z]]    ==>     2
    ---
    data:
        got: 2
        expect: 2
        expect_evaluated: 2
    ...
# The length of a symbol is 0:
ok  Length[x]    ==>     0
    ---
    data:
        got: 0
        expect: 0
        expect_evaluated: 0
    ...
# The length of a string is 0:
ok  Length["string"]    ==>     0
    ---
    data:
        got: 0
        expect: 0
        expect_evaluated: 0
    ...
# RefLink[StringLength,paclet:ref/StringLength] gives the number of characters:
ok  StringLength["string"]    ==>     6
    ---
    data:
        got: 6
        expect: 6
        expect_evaluated: 6
    ...
# Explicit numbers have length 0:
ok  Length[123456]    ==>     0
    ---
    data:
        got: 0
        expect: 0
        expect_evaluated: 0
    ...
ok  Length[1/10]    ==>     0
    ---
    data:
        got: 0
        expect: 0
        expect_evaluated: 0
    ...
ok  Length[3 + I]    ==>     0
    ---
    data:
        got: 0
        expect: 0
        expect_evaluated: 0
    ...
# RefLink[Length,paclet:ref/Length] works on RefLink[SparseArray,paclet:ref/SparseArray] objects:
ok  HoldComplete[SparseArray[{a, b, c, d, e}]]    ==>     $Failed # skip
ok  Length[%]    ==>     5 # skip
# Find the number of rows in a matrix:
ok  Length[{{a, b, c}, {d, e, f}}]    ==>     2
    ---
    data:
        got: 2
        expect: 2
        expect_evaluated: 2
    ...
# Find the length of each sublist:
ok  Length /@ {{a, b}, {a, b, c}, {x}}    ==>     {2, 3, 1}
    ---
    data:
        got: {2, 3, 1}
        expect: {2, 3, 1}
        expect_evaluated: {2, 3, 1}
    ...
# Find the number of terms in a polynomial:
ok  Length[1 + x + x^2 + x^9]    ==>     4
    ---
    data:
        got: 4
        expect: 4
        expect_evaluated: 4
    ...
# Find the number of digits in 1000!:
ok  Length[IntegerDigits[1000!]]    ==>     2568
    ---
    data:
        got: 2568
        expect: 2568
        expect_evaluated: 2568
    ...
# Get the number of points used to plot a curve:
ok  HoldComplete[p = Plot[Sin[x], {x, 0, 20}]]    ==>     $Failed # skip
ok  Total[Cases[p, x_Line :> Length[x[[1]]], Infinity]]    ==>     926 # skip
# RefLink[Length,paclet:ref/Length] gives the maximum index that can be used:
ok  Length[{a, b, c, d}]    ==>     4
    ---
    data:
        got: 4
        expect: 4
        expect_evaluated: 4
    ...
ok  {a, b, c, d}[[4]]    ==>     d
    ---
    data:
        got: d
        expect: d
        expect_evaluated: d
    ...
# RefLink[Length,paclet:ref/Length] operates on the RefLink[FullForm,paclet:ref/FullForm] of expressions, not their displayed form:
ok  Sqrt[x]    ==>     Sqrt[x]
    ---
    data:
        got: Sqrt[x]
        expect: Sqrt[x]
        expect_evaluated: Sqrt[x]
    ...
ok  Length[%]    ==>     2 # skip
ok  FullForm[Sqrt[x]]    ==>     Sqrt[x] # skip
# Rational and complex numbers are atoms, so they have length 0:
ok  Length[1/3]    ==>     0
    ---
    data:
        got: 0
        expect: 0
        expect_evaluated: 0
    ...
ok  FullForm[1/3]    ==>     Rational[1, 3] # skip
ok  Length[2 + I]    ==>     0
    ---
    data:
        got: 0
        expect: 0
        expect_evaluated: 0
    ...
ok  FullForm[2 + I]    ==>     Complex[2, 1] # skip
# Numeric expressions are treated like other expressions, not like explicit numbers:
ok  Length[Sqrt[7]]    ==>     2
    ---
    data:
        got: 2
        expect: 2
        expect_evaluated: 2
    ...
ok  Length[7]    ==>     0
    ---
    data:
        got: 0
        expect: 0
        expect_evaluated: 0
    ...
# RefLink[Length,paclet:ref/Length] counts only "arguments", not parts of heads:
ok  Length[h[a, b][x, y, z]]    ==>     3
    ---
    data:
        got: 3
        expect: 3
        expect_evaluated: 3
    ...
ok  HoldComplete[TableForm[Table[{e, Length[e], Dimensions[e], If[Dimensions[e] === {}, 0, First[Dimensions[e]]]}, {e, exprs}], TableDepth -> 2, TableHeadings -> {{}, {"e", "Length[e]", "Dimensions[e]", "\"First\" dimension"}}]]    ==>     $Failed # skip
