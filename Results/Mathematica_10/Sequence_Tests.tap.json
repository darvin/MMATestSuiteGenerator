{
    "stats": {
        "suites": 0,
        "tests": 10,
        "passes": 9,
        "pending": 0,
        "failures": 1,
        "start": "2018-06-03T12:21:02.542Z",
        "end": "2018-06-03T12:21:02.542Z",
        "duration": 0,
        "testsRegistered": 10,
        "passPercent": 90,
        "pendingPercent": 0,
        "other": 0,
        "hasOther": false,
        "skipped": 0,
        "hasSkipped": false,
        "passPercentClass": "danger",
        "pendingPercentClass": "danger"
    },
    "suites": {
        "title": "",
        "suites": [],
        "tests": [
            {
                "title": "f[a, Sequence[b, c], d]    ➡️     f[a, b, c, d]",
                "fullTitle": "f[a, Sequence[b, c], d]    ➡️     f[a, b, c, d]",
                "timedOut": false,
                "duration": 0,
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "",
                "isRoot": false,
                "uuid": "46f23ba3-c458-4d0a-b34e-619c60ba4f01",
                "parentUUID": "24dea848-aa28-4944-aefb-6ced35cb8d85",
                "skipped": false,
                "isHook": false,
                "context": "\"#! DOCKER > wolfram -script output/Tests/Sequence_Tests.m\\n#! TextForm[ColonForm[MessageName[Head, argx], StringForm[`1` called with `2` arguments; 1 argument is expected., Short[HoldForm[Head], 3], Short[HoldForm[2], 3]]]]\\n#! TextForm[ColonForm[MessageName[Head, argx], StringForm[`1` called with `2` arguments; 1 argument is expected., Short[HoldForm[Head], 3], Short[HoldForm[2], 3]]]]\\n# SYSTEM: Mathematica_10\\n# TEST: Sequence_Tests\\n# RefLink[Sequence,paclet:ref/Sequence] is automatically spliced in:\\n\\n\\ndata: \\n  got:              f[a, b, c, d]\\n  expect:           f[a, b, c, d]\\n  expect_evaluated: f[a, b, c, d]\"",
                "state": "passed",
                "err": {
                    "name": "",
                    "message": "",
                    "showDiff": true,
                    "actual": "f[a, b, c, d]",
                    "expected": "f[a, b, c, d]"
                }
            },
            {
                "title": "{u, u, u} /. u -> Sequence[a, b, c]    ➡️     {a, b, c, a, b, c, a, b, c}",
                "fullTitle": "{u, u, u} /. u -> Sequence[a, b, c]    ➡️     {a, b, c, a, b, c, a, b, c}",
                "timedOut": false,
                "duration": 0,
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "",
                "isRoot": false,
                "uuid": "5901f41c-9b60-4410-ae5e-d55cb66a7e1c",
                "parentUUID": "24dea848-aa28-4944-aefb-6ced35cb8d85",
                "skipped": false,
                "isHook": false,
                "context": "\"# Replace with a sequence that is automatically spliced in:\\n\"",
                "state": "passed",
                "err": {}
            },
            {
                "title": "u = Sequence[a, b, c]    ➡️     Sequence[a, b, c]",
                "fullTitle": "u = Sequence[a, b, c]    ➡️     Sequence[a, b, c]",
                "timedOut": false,
                "duration": 0,
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "",
                "isRoot": false,
                "uuid": "9e765817-8a10-46f7-85f2-be1c6543d18d",
                "parentUUID": "24dea848-aa28-4944-aefb-6ced35cb8d85",
                "skipped": true,
                "isHook": false,
                "context": "\"\"",
                "state": "passed",
                "err": {}
            },
            {
                "title": "{u, u, u}    ➡️     {a, b, c, a, b, c, a, b, c}",
                "fullTitle": "{u, u, u}    ➡️     {a, b, c, a, b, c, a, b, c}",
                "timedOut": false,
                "duration": 0,
                "speed": "fast",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "",
                "isRoot": false,
                "uuid": "8b9183ca-034f-4f8f-a580-b95df6b78632",
                "parentUUID": "24dea848-aa28-4944-aefb-6ced35cb8d85",
                "skipped": false,
                "isHook": false,
                "context": "\"\"",
                "state": "failed",
                "err": {}
            },
            {
                "title": "f[{{a, b}, {c, d}, {a}}] /. List -> Sequence    ➡️     f[a, b, c, d, a]",
                "fullTitle": "f[{{a, b}, {c, d}, {a}}] /. List -> Sequence    ➡️     f[a, b, c, d, a]",
                "timedOut": false,
                "duration": 0,
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "",
                "isRoot": false,
                "uuid": "bd8e6545-a940-431a-81eb-417e800f7578",
                "parentUUID": "24dea848-aa28-4944-aefb-6ced35cb8d85",
                "skipped": false,
                "isHook": false,
                "context": "\"# Completely flatten out all lists in the argument to a function:\\n\\n\\ndata: \\n  got:              f[a, b, c, d, a]\\n  expect:           f[a, b, c, d, a]\\n  expect_evaluated: f[a, b, c, d, a]\"",
                "state": "passed",
                "err": {
                    "name": "",
                    "message": "",
                    "showDiff": true,
                    "actual": "f[a, b, c, d, a]",
                    "expected": "f[a, b, c, d, a]"
                }
            },
            {
                "title": "f[a, b, c] /. f[x__] -> x    ➡️     Sequence[a, b, c]",
                "fullTitle": "f[a, b, c] /. f[x__] -> x    ➡️     Sequence[a, b, c]",
                "timedOut": false,
                "duration": 0,
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "",
                "isRoot": false,
                "uuid": "0a62957e-662e-4eea-9d10-d245ddf72c2e",
                "parentUUID": "24dea848-aa28-4944-aefb-6ced35cb8d85",
                "skipped": true,
                "isHook": false,
                "context": "\"# A sequence of arguments matched by __ is treated as a RefLink[Sequence,paclet:ref/Sequence] object: \\n\"",
                "state": "passed",
                "err": {}
            },
            {
                "title": "(##1 & )[a, b, c]    ➡️     Sequence[a, b, c] # skip",
                "fullTitle": "(##1 & )[a, b, c]    ➡️     Sequence[a, b, c] # skip",
                "timedOut": false,
                "duration": 0,
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "",
                "isRoot": false,
                "uuid": "edaddb6f-820b-49d7-abdd-3251f04fa3cc",
                "parentUUID": "24dea848-aa28-4944-aefb-6ced35cb8d85",
                "skipped": false,
                "isHook": false,
                "context": "\"# ## represents sequences of arguments by RefLink[Sequence,paclet:ref/Sequence] objects:\\n\"",
                "state": "passed",
                "err": {}
            },
            {
                "title": "{a, Sequence[b], c, Identity[d]}    ➡️     {a, b, c, d}",
                "fullTitle": "{a, Sequence[b], c, Identity[d]}    ➡️     {a, b, c, d}",
                "timedOut": false,
                "duration": 0,
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "",
                "isRoot": false,
                "uuid": "dbb4eb3f-113c-4598-a811-f99ea2cb921a",
                "parentUUID": "24dea848-aa28-4944-aefb-6ced35cb8d85",
                "skipped": false,
                "isHook": false,
                "context": "\"# A sequence with one argument acts like RefLink[Identity,paclet:ref/Identity]:\\n\\n\\ndata: \\n  got: \\n    a: null\\n    b: null\\n    c: null\\n    d: null\\n  expect: \\n    a: null\\n    b: null\\n    c: null\\n    d: null\\n  expect_evaluated: \\n    a: null\\n    b: null\\n    c: null\\n    d: null\"",
                "state": "passed",
                "err": {
                    "name": "",
                    "message": "",
                    "showDiff": true,
                    "actual": {
                        "a": null,
                        "b": null,
                        "c": null,
                        "d": null
                    },
                    "expected": {
                        "a": null,
                        "b": null,
                        "c": null,
                        "d": null
                    }
                }
            },
            {
                "title": "Head[Sequence[a, b]]    ➡️     Head[a, b]",
                "fullTitle": "Head[Sequence[a, b]]    ➡️     Head[a, b]",
                "timedOut": false,
                "duration": 0,
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "",
                "isRoot": false,
                "uuid": "39e4cbb6-5fe4-4da7-a5f5-edfcc2384ddb",
                "parentUUID": "24dea848-aa28-4944-aefb-6ced35cb8d85",
                "skipped": false,
                "isHook": false,
                "context": "\"# Most Wolfram Language functions automatically splice in RefLink[Sequence,paclet:ref/Sequence] objects:\\n\\n\\ndata: \\n  got:              Head[a, b]\\n  expect:           Head[a, b]\\n  expect_evaluated: Head[a, b]\"",
                "state": "passed",
                "err": {
                    "name": "",
                    "message": "",
                    "showDiff": true,
                    "actual": "Head[a, b]",
                    "expected": "Head[a, b]"
                }
            },
            {
                "title": "u -> Sequence[a, b]    ➡️     u -> Sequence[a, b]",
                "fullTitle": "u -> Sequence[a, b]    ➡️     u -> Sequence[a, b]",
                "timedOut": false,
                "duration": 0,
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "",
                "isRoot": false,
                "uuid": "edf040f8-286a-476c-b705-cfd213bda69d",
                "parentUUID": "24dea848-aa28-4944-aefb-6ced35cb8d85",
                "skipped": false,
                "isHook": false,
                "context": "\"# Assignment and replacement functions have the attribute RefLink[SequenceHold,paclet:ref/SequenceHold]:\\n\\n\\ndata: \\n  got:              u -> Sequence[a, b]\\n  expect:           u -> Sequence[a, b]\\n  expect_evaluated: u -> Sequence[a, b]\"",
                "state": "passed",
                "err": {
                    "name": "",
                    "message": "",
                    "showDiff": true,
                    "actual": "u -> Sequence[a, b]",
                    "expected": "u -> Sequence[a, b]"
                }
            }
        ],
        "root": true,
        "fullFile": "",
        "file": "",
        "pending": [],
        "passes": [
            "46f23ba3-c458-4d0a-b34e-619c60ba4f01",
            "5901f41c-9b60-4410-ae5e-d55cb66a7e1c",
            "9e765817-8a10-46f7-85f2-be1c6543d18d",
            "bd8e6545-a940-431a-81eb-417e800f7578",
            "0a62957e-662e-4eea-9d10-d245ddf72c2e",
            "edaddb6f-820b-49d7-abdd-3251f04fa3cc",
            "dbb4eb3f-113c-4598-a811-f99ea2cb921a",
            "39e4cbb6-5fe4-4da7-a5f5-edfcc2384ddb",
            "edf040f8-286a-476c-b705-cfd213bda69d"
        ],
        "failures": [
            "8b9183ca-034f-4f8f-a580-b95df6b78632"
        ],
        "skipped": [
            "9e765817-8a10-46f7-85f2-be1c6543d18d",
            "0a62957e-662e-4eea-9d10-d245ddf72c2e"
        ],
        "duration": 0,
        "rootEmpty": false,
        "_timeout": 0,
        "uuid": "24dea848-aa28-4944-aefb-6ced35cb8d85",
        "beforeHooks": [],
        "afterHooks": []
    },
    "copyrightYear": 2018
}
