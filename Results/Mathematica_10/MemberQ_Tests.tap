#! DOCKER > wolfram -script output/Tests/MemberQ_Tests.m
# SYSTEM: Mathematica_10
# TEST: MemberQ_Tests
# Test whether 2 is a member of a list:
ok  MemberQ[{1, 3, 4, 1, 2}, 2]    ==>     True
    ---
    data:
        got: True
        expect: True
        expect_evaluated: True
    ...
# RefLink[MemberQ,paclet:ref/MemberQ] works with patterns:
ok  MemberQ[{x^2, y^2, x^3}, x^_]    ==>     True
    ---
    data:
        got: True
        expect: True
        expect_evaluated: True
    ...
# Test down to level 2:
ok  MemberQ[{{1, 1, 3, 0}, {2, 1, 2, 2}}, 0, 2]    ==>     True
    ---
    data:
        got: True
        expect: True
        expect_evaluated: True
    ...
# RefLink[MemberQ,paclet:ref/MemberQ] normally only tests level 1:
ok  MemberQ[{{1, 1, 3, 0}, {2, 1, 2, 2}}, 0]    ==>     False
    ---
    data:
        got: False
        expect: False
        expect_evaluated: False
    ...
# Test whether 2^i is ever equal to 1 modulo 7:
ok  Table[Mod[2^i, 7], {i, 10}]    ==>     {2, 4, 1, 2, 4, 1, 2, 4, 1, 2}
    ---
    data:
        got: {2, 4, 1, 2, 4, 1, 2, 4, 1, 2}
        expect: {2, 4, 1, 2, 4, 1, 2, 4, 1, 2}
        expect_evaluated: {2, 4, 1, 2, 4, 1, 2, 4, 1, 2}
    ...
ok  MemberQ[Table[Mod[2^i, 7], {i, 10}], 1]    ==>     True
    ---
    data:
        got: True
        expect: True
        expect_evaluated: True
    ...
# RefLink[MemberQ,paclet:ref/MemberQ] tests for structural matches, not numerical equality:
ok  MemberQ[{1, 2, 1, 3}, 1.]    ==>     False
    ---
    data:
        got: False
        expect: False
        expect_evaluated: False
    ...
# RefLink[MemberQ,paclet:ref/MemberQ] does not test for subsequences:
ok  MemberQ[a + b + c, a + c]    ==>     False
    ---
    data:
        got: False
        expect: False
        expect_evaluated: False
    ...
# RefLink[FreeQ,paclet:ref/FreeQ] does:
ok  FreeQ[a + b + c, a + c]    ==>     False
    ---
    data:
        got: False
        expect: False
        expect_evaluated: False
    ...
# RefLink[MemberQ,paclet:ref/MemberQ] by default only operates at level 1:
ok  MemberQ[{{x^2, y^2}}, x^_]    ==>     False
    ---
    data:
        got: False
        expect: False
        expect_evaluated: False
    ...
# Include level 2:
ok  MemberQ[{{x^2, y^2}}, x^_, 2]    ==>     True
    ---
    data:
        got: True
        expect: True
        expect_evaluated: True
    ...
