{
    "stats": {
        "suites": 0,
        "tests": 5,
        "passes": 4,
        "pending": 0,
        "failures": 1,
        "start": "2018-06-11T04:13:57.375Z",
        "end": "2018-06-11T04:13:57.375Z",
        "duration": 0,
        "testsRegistered": 5,
        "passPercent": 80,
        "pendingPercent": 0,
        "other": 0,
        "hasOther": false,
        "skipped": 0,
        "hasSkipped": false,
        "passPercentClass": "danger",
        "pendingPercentClass": "danger"
    },
    "suites": {
        "title": "",
        "suites": [],
        "tests": [
            {
                "title": "HoldPattern[_ + _] -> 0    ➡️     HoldPattern[_ + _] -> 0",
                "fullTitle": "HoldPattern[_ + _] -> 0    ➡️     HoldPattern[_ + _] -> 0",
                "timedOut": false,
                "duration": 0,
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "",
                "isRoot": false,
                "uuid": "48bb03c9-e718-496a-a97d-0074a06c6949",
                "parentUUID": "15d4fa86-2e68-4d6e-bf8e-9396f9e44168",
                "skipped": false,
                "isHook": false,
                "context": "\"#! DOCKER > wolfram -script output/Tests/HoldPattern_Tests.m\\n#! TextForm[ColonForm[MessageName[$IterationLimit, itlim], StringForm[Iteration limit of `1` exceeded., Short[HoldForm[4096], 3]]]]\\n#! TextForm[ColonForm[MessageName[$IterationLimit, itlim], StringForm[Iteration limit of `1` exceeded., Short[HoldForm[4096], 3]]]]\\n#! TextForm[ColonForm[MessageName[ReplaceAll, reps], StringForm[`1` is neither a list of replacement rules nor a valid dispatch table, and so cannot be used for replacing., Short[HoldForm[{Hold[Out[$Line - 1]]}], 3]]]]\\n#! TextForm[ColonForm[MessageName[$IterationLimit, itlim], StringForm[Iteration limit of `1` exceeded., Short[HoldForm[4096], 3]]]]\\n#! TextForm[ColonForm[MessageName[General, stop], StringForm[Further output of `1` will be suppressed during this calculation., Short[HoldForm[MessageName[$IterationLimit, itlim]], 3]]]]\\n#! TextForm[ColonForm[MessageName[ReplaceAll, reps], StringForm[`1` is neither a list of replacement rules nor a valid dispatch table, and so cannot be used for replacing., Short[HoldForm[{Hold[Out[$Line - 1]]}], 3]]]]\\n# SYSTEM: Mathematica_10\\n# TEST: HoldPattern_Tests\\n# Set up a pattern whose left-hand side is kept unevaluated:\\n\\n\\ndata: \\n  got:              2 _ -> 0\\n  expect:           HoldPattern[_ + _] -> 0\\n  expect_evaluated: 2 _ -> 0\"",
                "state": "passed",
                "err": {
                    "name": "",
                    "message": "",
                    "showDiff": true,
                    "actual": "2 _ -> 0",
                    "expected": "HoldPattern[_ + _] -> 0"
                }
            },
            {
                "title": "a + b /. %    ➡️     0",
                "fullTitle": "a + b /. %    ➡️     0",
                "timedOut": false,
                "duration": 0,
                "speed": "fast",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "",
                "isRoot": false,
                "uuid": "ea0fa4a6-79d5-4ee8-9e8a-2dda2022f25f",
                "parentUUID": "15d4fa86-2e68-4d6e-bf8e-9396f9e44168",
                "skipped": false,
                "isHook": false,
                "context": "\"# Use the pattern:\\n\\n\\ndata: \\n  got:              a + b\\n  expect:           0\\n  expect_evaluated: 0\"",
                "state": "failed",
                "err": {
                    "name": "",
                    "message": "",
                    "showDiff": true,
                    "actual": "a + b",
                    "expected": 0
                }
            },
            {
                "title": "f[HoldPattern[_ + _]] := 0; f[a + b]    ➡️     0",
                "fullTitle": "f[HoldPattern[_ + _]] := 0; f[a + b]    ➡️     0",
                "timedOut": false,
                "duration": 0,
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "",
                "isRoot": false,
                "uuid": "734044d8-924c-4c13-a890-fe6bb656eef4",
                "parentUUID": "15d4fa86-2e68-4d6e-bf8e-9396f9e44168",
                "skipped": false,
                "isHook": false,
                "context": "\"# Make a definition without the argument of f being evaluated:\\n\\n\\ndata: \\n  got:              0\\n  expect:           0\\n  expect_evaluated: 0\"",
                "state": "passed",
                "err": {
                    "name": "",
                    "message": "",
                    "showDiff": true,
                    "expected": 0
                }
            },
            {
                "title": "MatchQ[Log[a, b], HoldPattern[Log[_]/Log[_]]]    ➡️     True",
                "fullTitle": "MatchQ[Log[a, b], HoldPattern[Log[_]/Log[_]]]    ➡️     True",
                "timedOut": false,
                "duration": 0,
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "",
                "isRoot": false,
                "uuid": "2fb573da-380e-43a1-8817-de7033c53880",
                "parentUUID": "15d4fa86-2e68-4d6e-bf8e-9396f9e44168",
                "skipped": false,
                "isHook": false,
                "context": "\"# RefLink[Log,paclet:ref/Log][a,b] autoevaluates to RefLink[Log,paclet:ref/Log][b]/RefLink[Log,paclet:ref/Log][a], so there is a match: \\n\\n\\ndata: \\n  got:              true\\n  expect:           true\\n  expect_evaluated: true\"",
                "state": "passed",
                "err": {
                    "name": "",
                    "message": "",
                    "showDiff": true,
                    "actual": true,
                    "expected": true
                }
            },
            {
                "title": "Cases[{a -> b, c -> d}, HoldPattern[a -> _]]    ➡️     {a -> b}",
                "fullTitle": "Cases[{a -> b, c -> d}, HoldPattern[a -> _]]    ➡️     {a -> b}",
                "timedOut": false,
                "duration": 0,
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "",
                "isRoot": false,
                "uuid": "7c967fef-fdf6-4d0b-bde2-ce589150d4cf",
                "parentUUID": "15d4fa86-2e68-4d6e-bf8e-9396f9e44168",
                "skipped": false,
                "isHook": false,
                "context": "\"# RefLink[Cases,paclet:ref/Cases][e,patt->rhs] finds elements that match patt; use RefLink[HoldPattern,paclet:ref/HoldPattern] to find rules: \\n\\n\\ndata: \\n  got: \\n    a -> b: null\\n  expect: \\n    a -> b: null\\n  expect_evaluated: \\n    a -> b: null\"",
                "state": "passed",
                "err": {
                    "name": "",
                    "message": "",
                    "showDiff": true,
                    "actual": {
                        "a -> b": null
                    },
                    "expected": {
                        "a -> b": null
                    }
                }
            }
        ],
        "root": true,
        "fullFile": "",
        "file": "",
        "pending": [],
        "passes": [
            "48bb03c9-e718-496a-a97d-0074a06c6949",
            "734044d8-924c-4c13-a890-fe6bb656eef4",
            "2fb573da-380e-43a1-8817-de7033c53880",
            "7c967fef-fdf6-4d0b-bde2-ce589150d4cf"
        ],
        "failures": [
            "ea0fa4a6-79d5-4ee8-9e8a-2dda2022f25f"
        ],
        "skipped": [],
        "duration": 0,
        "rootEmpty": false,
        "_timeout": 0,
        "uuid": "15d4fa86-2e68-4d6e-bf8e-9396f9e44168",
        "beforeHooks": [],
        "afterHooks": []
    },
    "copyrightYear": 2018
}
