{
    "Tests": [
        {
            "Comment": "Test if an expression cannot be subdivided:"
        },
        {
            "Test": [
                "e = x + 22/7",
                "22/7 + x",
                "22/7 + x",
                "22/7 + x",
                false,
                true
            ]
        },
        {
            "Test": [
                "AtomQ[e]",
                "False",
                "False",
                "False",
                false,
                true
            ]
        },
        {
            "Comment": "Since it is not an atom, its parts can be extracted:"
        },
        {
            "Test": [
                "e[[1]]",
                "22/7",
                "22/7",
                "22/7",
                false,
                true
            ]
        },
        {
            "Comment": "This is a number that is an atom:"
        },
        {
            "Test": [
                "AtomQ[%]",
                "True",
                "inStrEvaluated$396",
                "outStrEvaluated$396",
                true,
                false
            ]
        },
        {
            "Comment": "Strings are not subdividable:"
        },
        {
            "Test": [
                "AtomQ[\"This is an atom\"]",
                "True",
                "True",
                "True",
                false,
                true
            ]
        },
        {
            "Comment": "Symbols are not subdividable:"
        },
        {
            "Test": [
                "AtomQ[ThisIsAnAtom]",
                "True",
                "True",
                "True",
                false,
                true
            ]
        },
        {
            "Comment": "Numbers are not subdividable:"
        },
        {
            "Test": [
                "AtomQ[1.23]",
                "True",
                "True",
                "True",
                false,
                true
            ]
        },
        {
            "Comment": "RefLink[Rational,paclet:ref/Rational] numbers appear to have a compound structure:"
        },
        {
            "Test": [
                "FullForm[22/7]",
                "Rational[22, 7]",
                "inStrEvaluated$400",
                "outStrEvaluated$400",
                true,
                false
            ]
        },
        {
            "Comment": "As numbers, they are not subdividable:"
        },
        {
            "Test": [
                "AtomQ[22/7]",
                "True",
                "True",
                "True",
                false,
                true
            ]
        },
        {
            "Comment": "The parts can be accessed through RefLink[Numerator,paclet:ref/Numerator] and RefLink[Denominator,paclet:ref/Denominator]:"
        },
        {
            "Test": [
                "{Numerator[22/7], Denominator[22/7]}",
                "{22, 7}",
                "{22, 7}",
                "{22, 7}",
                false,
                true
            ]
        },
        {
            "Comment": "RefLink[Complex,paclet:ref/Complex] numbers appear to have a compound structure:"
        },
        {
            "Test": [
                "FullForm[1 + 2*I]",
                "Complex[1, 2]",
                "inStrEvaluated$403",
                "outStrEvaluated$403",
                true,
                false
            ]
        },
        {
            "Comment": "As numbers, they are not subdividable:"
        },
        {
            "Test": [
                "AtomQ[1 + 2*I]",
                "True",
                "True",
                "True",
                false,
                true
            ]
        },
        {
            "Comment": "The parts can be accessed through RefLink[Re,paclet:ref/Re] and RefLink[Im,paclet:ref/Im]:"
        },
        {
            "Test": [
                "{Re[1 + 2*I], Im[1 + 2*I]}",
                "{1, 2}",
                "{1, 2}",
                "{1, 2}",
                false,
                true
            ]
        },
        {
            "Comment": "RefLink[SparseArray,paclet:ref/SparseArray] objects are atomic raw objects:"
        },
        {
            "Test": [
                "HoldComplete[s = SparseArray[{i_, i_} -> i, 3]]",
                "$Failed",
                "inStrEvaluated$406",
                "outStrEvaluated$406",
                true,
                false
            ]
        },
        {
            "Test": [
                "AtomQ[s]",
                "True",
                "True",
                "True",
                false,
                true
            ]
        },
        {
            "Comment": "Commands that work with RefLink[SparseArray,paclet:ref/SparseArray] objects typically do so on the represented array:"
        },
        {
            "Test": [
                "a = Normal[s]",
                "{{1, 0, 0}, {0, 2, 0}, {0, 0, 3}}",
                "s",
                "{{1, 0, 0}, {0, 2, 0}, {0, 0, 3}}",
                false,
                false
            ]
        },
        {
            "Test": [
                "s[[2,2]]",
                "2",
                "s[[2,2]]",
                "2",
                false,
                false
            ]
        },
        {
            "Test": [
                "a[[2,2]]",
                "2",
                "s[[2,2]]",
                "2",
                false,
                false
            ]
        },
        {
            "Comment": "The RefLink[FullForm,paclet:ref/FullForm] of a RefLink[SparseArray,paclet:ref/SparseArray] object is designed to be sufficient to reconstruct the raw object:"
        },
        {
            "Test": [
                "FullForm[s]",
                "SparseArray[Automatic, {3, 3}, 0, {1, {{0, 1, 2, 3}, {{1}, {2}, {3}}}, {1, 2, 3}}]",
                "inStrEvaluated$414",
                "outStrEvaluated$414",
                true,
                false
            ]
        },
        {
            "Test": [
                "HoldComplete[s1 = SparseArray[Automatic, {3, 3}, 0, {1, {{0, 1, 2, 3}, {{1}, {2}, {3}}}, {1, 2, 3}}]]",
                "$Failed",
                "inStrEvaluated$415",
                "outStrEvaluated$415",
                true,
                false
            ]
        },
        {
            "Comment": "A deeply nested expression:"
        },
        {
            "Test": [
                "e = Fold[f, x, Range[5]]",
                "f[f[f[f[f[x, 1], 2], 3], 4], 5]",
                "f[f[f[f[f[x, 1], 2], 3], 4], 5]",
                "f[f[f[f[f[x, 1], 2], 3], 4], 5]",
                false,
                true
            ]
        },
        {
            "Test": [
                "leaves[e]",
                "11",
                "inStrEvaluated$417",
                "outStrEvaluated$417",
                true,
                false
            ]
        },
        {
            "Comment": "This is equivalent to RefLink[LeafCount,paclet:ref/LeafCount]:"
        },
        {
            "Test": [
                "LeafCount[e]",
                "11",
                "11",
                "11",
                false,
                true
            ]
        },
        {
            "Comment": "With the option RefLink[Heads,paclet:ref/Heads]->RefLink[False,paclet:ref/False], only atoms with no branches are counted:"
        },
        {
            "Test": [
                "leaves[e, Heads -> False]",
                "6",
                "inStrEvaluated$419",
                "outStrEvaluated$419",
                true,
                false
            ]
        },
        {
            "Comment": "This corresponds to the dangling leaves you see with RefLink[TreeForm,paclet:ref/TreeForm]:"
        },
        {
            "Test": [
                "HoldComplete[TreeForm[e]]",
                "$Failed",
                "inStrEvaluated$420",
                "outStrEvaluated$420",
                true,
                false
            ]
        },
        {
            "Test": [
                "depth[1 + x + 2*x^2]",
                "{1, 3}",
                "inStrEvaluated$421",
                "outStrEvaluated$421",
                true,
                false
            ]
        },
        {
            "Test": [
                "depth[{{1, 2}, {3, 4}}]",
                "{2, 2}",
                "inStrEvaluated$422",
                "outStrEvaluated$422",
                true,
                false
            ]
        },
        {
            "Comment": "RefLink[Depth,paclet:ref/Depth] gives the maximum depth plus 1:"
        },
        {
            "Test": [
                "Depth[1 + x + 2*x^2]",
                "4",
                "4",
                "4",
                false,
                true
            ]
        },
        {
            "Comment": "RefLink[Map,paclet:ref/Map][f,expr,{-1}] generally maps f on atoms in expr:"
        },
        {
            "Test": [
                "Map[f, 1 + x + 2*x^2, {-1}]",
                "f[1] + f[x] + f[2]*f[x]^f[2]",
                "f[1] + f[x] + f[2]*f[x]^f[2]",
                "f[1] + f[x] + f[2]*f[x]^f[2]",
                false,
                true
            ]
        },
        {
            "Test": [
                "Map[f, 1 + x + 2*x^2, {-1}]",
                "f[1] + f[x] + f[2]*f[x]^f[2]",
                "f[1] + f[x] + f[2]*f[x]^f[2]",
                "f[1] + f[x] + f[2]*f[x]^f[2]",
                false,
                true
            ]
        }
    ],
    "Stats": {
        "Total": 30,
        "Failed": 3,
        "Disabled": 11
    }
}