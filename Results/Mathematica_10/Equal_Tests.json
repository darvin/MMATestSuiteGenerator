{
    "Tests": [
        {
            "Comment": "Test equality:"
        },
        {
            "Test": [
                "2 + 2 == 4",
                "True",
                "True",
                "True",
                false,
                true
            ]
        },
        {
            "Comment": "Represent an equation:"
        },
        {
            "Test": [
                "x^2 == 1 + x",
                "x^2 == 1 + x",
                "x^2 == 1 + x",
                "x^2 == 1 + x",
                false,
                true
            ]
        },
        {
            "Test": [
                "Solve[%, x]",
                "{{x -> (1/2)*(1 - Sqrt[5])}, {x -> (1/2)*(1 + Sqrt[5])}}",
                "inStrEvaluated$395",
                "outStrEvaluated$395",
                true,
                false
            ]
        },
        {
            "Comment": "Test equality of numbers:"
        },
        {
            "Test": [
                "3/2 == 5/3",
                "False",
                "False",
                "False",
                false,
                true
            ]
        },
        {
            "Comment": "Approximate numbers that differ in their last seven binary digits are considered equal:"
        },
        {
            "Test": [
                "1.`18.06179973983887 == 1.00000000000000011015494072453`18.06179973983887",
                "True",
                "True",
                "True",
                false,
                true
            ]
        },
        {
            "Comment": "Compare an exact numeric expression and an approximate number:"
        },
        {
            "Test": [
                "N[Pi, 20] == Pi",
                "True",
                "True",
                "True",
                false,
                true
            ]
        },
        {
            "Test": [
                "N[Pi, 20] == Pi*(1 + 2^8/10^20)",
                "False",
                "False",
                "False",
                false,
                true
            ]
        },
        {
            "Comment": "Compare two exact numeric expressions; a numeric test may suffice to disprove equality:"
        },
        {
            "Test": [
                "Pi^E == E^Pi",
                "False",
                "False",
                "False",
                false,
                true
            ]
        },
        {
            "Comment": "Proving equality requires symbolic methods:"
        },
        {
            "Test": [
                "Sqrt[2] + Sqrt[3] == Sqrt[5 + 2*Sqrt[6]]",
                "True",
                "True",
                "True",
                false,
                true
            ]
        },
        {
            "Comment": "Symbolic methods used by RefLink[Equal,paclet:ref/Equal] are insufficient to prove this equality:"
        },
        {
            "Test": [
                "Sqrt[2] + Sqrt[3] == Root[#1^4 - 10*#1^2 + 1 & , 4]",
                "Sqrt[2] + Sqrt[3] == Root[1 - 10*#1^2 + #1^4 & , 4]",
                "Sqrt[2] + Sqrt[3] == Root[1 - 10*#1^2 + #1^4 & , 4, 0]",
                "Sqrt[2] + Sqrt[3] == Root[1 - 10*#1^2 + #1^4 & , 4, 0]",
                false,
                true
            ]
        },
        {
            "Comment": "Use RefLink[RootReduce,paclet:ref/RootReduce] to decide whether two algebraic numbers are equal:"
        },
        {
            "Test": [
                "RootReduce[%]",
                "True",
                "inStrEvaluated$484",
                "outStrEvaluated$484",
                true,
                false
            ]
        },
        {
            "Comment": "Numeric methods used by RefLink[Equal,paclet:ref/Equal] do not use sufficient precision to disprove this equality:"
        },
        {
            "Test": [
                "Sqrt[2] + Sqrt[3] == Root[#1^4 - 10*#1^2 + 1 & , 4] + 10^(-100)",
                "Sqrt[2] + Sqrt[3] == 1/10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 + Root[1 - 10*#1^2 + #1^4 & , 4]",
                "Sqrt[2] + Sqrt[3] == 1/10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 + Root[1 - 10*#1^2 + #1^4 & , 4, 0]",
                "Sqrt[2] + Sqrt[3] == 1/10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 + Root[1 - 10*#1^2 + #1^4 & , 4, 0]",
                false,
                true
            ]
        },
        {
            "Comment": "RefLink[RootReduce,paclet:ref/RootReduce] proves that the two algebraic numbers are not equal:"
        },
        {
            "Test": [
                "RootReduce[%]",
                "False",
                "inStrEvaluated$546",
                "outStrEvaluated$546",
                true,
                false
            ]
        },
        {
            "Comment": "Increasing RefLink[$MaxExtraPrecision,paclet:ref/$MaxExtraPrecision] may also allow you to disprove equality:"
        },
        {
            "Test": [
                "Block[{$MaxExtraPrecision = 100}, Sqrt[2] + Sqrt[3] == Root[#1^4 - 10*#1^2 + 1 & , 4] + 10^(-100)]",
                "False",
                "False",
                "False",
                false,
                true
            ]
        },
        {
            "Comment": "A symbolic identity:"
        },
        {
            "Test": [
                "x == x",
                "True",
                "True",
                "True",
                false,
                true
            ]
        },
        {
            "Comment": "RefLink[Equal,paclet:ref/Equal] does not automatically prove this identity:"
        },
        {
            "Test": [
                "(x + 1)^2 == x^2 + 2*x + 1",
                "(1 + x)^2 == 1 + 2*x + x^2",
                "(1 + x)^2 == 1 + 2*x + x^2",
                "(1 + x)^2 == 1 + 2*x + x^2",
                false,
                true
            ]
        },
        {
            "Comment": "Use RefLink[Expand,paclet:ref/Expand] to prove it:"
        },
        {
            "Test": [
                "Expand[%]",
                "True",
                "inStrEvaluated$550",
                "outStrEvaluated$550",
                true,
                false
            ]
        },
        {
            "Comment": "A symbolic equation:"
        },
        {
            "Test": [
                "a*x == b",
                "a*x == b",
                "a*x == b",
                "a*x == b",
                false,
                true
            ]
        },
        {
            "Comment": "Use RefLink[Solve,paclet:ref/Solve] to solve the equation:"
        },
        {
            "Test": [
                "Solve[%, x]",
                "{{x -> b/a}}",
                "inStrEvaluated$552",
                "outStrEvaluated$552",
                true,
                false
            ]
        },
        {
            "Comment": "RefLink[Reduce,paclet:ref/Reduce] gives all solutions, including the ones that require nongeneric values of parameters:"
        },
        {
            "Test": [
                "Reduce[%%, x]",
                "(b == 0 && a == 0) || (a != 0 && x == b/a)",
                "inStrEvaluated$553",
                "outStrEvaluated$553",
                true,
                false
            ]
        },
        {
            "Comment": "Compare more than two expressions:"
        },
        {
            "Test": [
                "3 == 3. == 3.",
                "True",
                "True",
                "True",
                false,
                true
            ]
        },
        {
            "Test": [
                "x + y + z == x^2 - y^2 - z^2 == x*y*z == 3",
                "x + y + z == x^2 - y^2 - z^2 == x*y*z == 3",
                "x + y + z == x^2 - y^2 - z^2 == x*y*z == 3",
                "x + y + z == x^2 - y^2 - z^2 == x*y*z == 3",
                false,
                true
            ]
        },
        {
            "Test": [
                "Reduce[%, {x, y, z}]",
                "x == 1 && (y == (1/2)*(2 - 2*I*Sqrt[2]) || y == (1/2)*(2 + 2*I*Sqrt[2])) && z == 2 - y",
                "inStrEvaluated$556",
                "outStrEvaluated$556",
                true,
                false
            ]
        },
        {
            "Comment": "Compare lists:"
        },
        {
            "Test": [
                "{1, 2} == {1, 2}",
                "True",
                "True",
                "True",
                false,
                true
            ]
        },
        {
            "Test": [
                "{a, b, c} == {d, e}",
                "False",
                "False",
                "False",
                false,
                true
            ]
        },
        {
            "Comment": "Compare strings:"
        },
        {
            "Test": [
                "\"abc\" == \"ABC\"",
                "False",
                "False",
                "False",
                false,
                true
            ]
        },
        {
            "Comment": "The negation of two-argument RefLink[Equal,paclet:ref/Equal] is RefLink[Unequal,paclet:ref/Unequal]:"
        },
        {
            "Test": [
                " !x == y",
                "x != y",
                "x != y",
                "x != y",
                false,
                true
            ]
        },
        {
            "Comment": "The negation of three-argument RefLink[Equal,paclet:ref/Equal] does not simplify automatically:"
        },
        {
            "Test": [
                " !x == y == z",
                " !x == y == z",
                " !x == y == z",
                " !x == y == z",
                false,
                true
            ]
        },
        {
            "Comment": "Use RefLink[LogicalExpand,paclet:ref/LogicalExpand] to express it in terms of two-argument RefLink[Unequal,paclet:ref/Unequal]:"
        },
        {
            "Test": [
                "LogicalExpand[%]",
                "y != x || z != x",
                "inStrEvaluated$562",
                "outStrEvaluated$562",
                true,
                false
            ]
        },
        {
            "Comment": "The negation of three-argument RefLink[Equal,paclet:ref/Equal] is not equivalent to three-argument RefLink[Unequal,paclet:ref/Unequal]:"
        },
        {
            "Test": [
                "LogicalExpand[x != y != z]",
                "y != x && z != x && z != y",
                "y != x && z != x && z != y",
                "y != x && z != x && z != y",
                false,
                true
            ]
        },
        {
            "Comment": "RefLink[Equal,paclet:ref/Equal] tests mathematical equality of objects represented by expressions:"
        },
        {
            "Test": [
                "{x == x, x == y, Sqrt[2] + Sqrt[3] == Sqrt[5 + 2*Sqrt[6]], Pi == N[Pi]}",
                "{True, x == y, True, True}",
                "{True, x == y, True, True}",
                "{True, x == y, True, True}",
                false,
                true
            ]
        },
        {
            "Comment": "RefLink[SameQ,paclet:ref/SameQ] tests syntactic equality of expressions:"
        },
        {
            "Test": [
                "{x === x, x === y, Sqrt[2] + Sqrt[3] === Sqrt[5 + 2*Sqrt[6]], Pi === N[Pi]}",
                "{True, False, False, False}",
                "{True, False, False, False}",
                "{True, False, False, False}",
                false,
                true
            ]
        },
        {
            "Comment": "When RefLink[Equal,paclet:ref/Equal] cannot decide whether two numeric expressions are equal it returns unchanged:"
        },
        {
            "Test": [
                "a = Log[Sqrt[2] + Sqrt[3]]; b = Log[5 + 2*Sqrt[6]]/2; a == b",
                "Log[Sqrt[2] + Sqrt[3]] == (1/2)*Log[5 + 2*Sqrt[6]]",
                "Log[Sqrt[2] + Sqrt[3]] == Log[5 + 2*Sqrt[6]]/2",
                "Log[Sqrt[2] + Sqrt[3]] == Log[5 + 2*Sqrt[6]]/2",
                false,
                true
            ]
        },
        {
            "Comment": "RefLink[FullSimplify,paclet:ref/FullSimplify] uses exact symbolic transformations to prove the equality:"
        },
        {
            "Test": [
                "FullSimplify[a == b]",
                "True",
                "True",
                "True",
                false,
                true
            ]
        },
        {
            "Comment": "RefLink[PossibleZeroQ,paclet:ref/PossibleZeroQ] uses numeric and symbolic heuristics to decide whether an expression is zero:"
        },
        {
            "Test": [
                "PossibleZeroQ[a - b]",
                "True",
                "True",
                "True",
                false,
                true
            ]
        },
        {
            "Comment": "Numeric methods used by RefLink[PossibleZeroQ,paclet:ref/PossibleZeroQ] may incorrectly decide that a number is zero:"
        },
        {
            "Test": [
                "PossibleZeroQ[a - b + 10^(-100)]",
                "True",
                "True",
                "True",
                false,
                true
            ]
        },
        {
            "Comment": "Use RefLink[Solve,paclet:ref/Solve] to solve equations for generic values of parameters:"
        },
        {
            "Test": [
                "Solve[a*x^2 + b*x + c == 0, x]",
                "{{x -> (-b - Sqrt[b^2 - 4*a*c])/(2*a)}, {x -> (-b + Sqrt[b^2 - 4*a*c])/(2*a)}}",
                "inStrEvaluated$1006",
                "outStrEvaluated$1006",
                true,
                false
            ]
        },
        {
            "Comment": "RefLink[Reduce,paclet:ref/Reduce] gives all solutions, including those with nongeneric parameter values:"
        },
        {
            "Test": [
                "Reduce[a*x^2 + b*x + c == 0, x]",
                "(a != 0 && (x == (-b - Sqrt[b^2 - 4*a*c])/(2*a) || x == (-b + Sqrt[b^2 - 4*a*c])/(2*a))) || (a == 0 && b != 0 && x == -(c/b)) || (c == 0 && b == 0 && a == 0)",
                "inStrEvaluated$1007",
                "outStrEvaluated$1007",
                true,
                false
            ]
        },
        {
            "Comment": "Use RefLink[Reduce,paclet:ref/Reduce] to solve equations over specified domains:"
        },
        {
            "Test": [
                "Reduce[x^2 + y^2 == 5, {x, y}, Reals]",
                "-Sqrt[5] <= x <= Sqrt[5] && (y == -Sqrt[5 - x^2] || y == Sqrt[5 - x^2])",
                "inStrEvaluated$1008",
                "outStrEvaluated$1008",
                true,
                false
            ]
        },
        {
            "Test": [
                "Reduce[x^2 + y^2 == 5, {x, y}, Integers]",
                "(x == -2 && y == -1) || (x == -2 && y == 1) || (x == -1 && y == -2) || (x == -1 && y == 2) || (x == 1 && y == -2) || (x == 1 && y == 2) || (x == 2 && y == -1) || (x == 2 && y == 1)",
                "(x == -2 && y == -1) || (x == -2 && y == 1) || (x == -1 && y == -2) || (x == -1 && y == 2) || (x == 1 && y == -2) || (x == 1 && y == 2) || (x == 2 && y == -1) || (x == 2 && y == 1)",
                "(x == -2 && y == -1) || (x == -2 && y == 1) || (x == -1 && y == -2) || (x == -1 && y == 2) || (x == 1 && y == -2) || (x == 1 && y == 2) || (x == 2 && y == -1) || (x == 2 && y == 1)",
                false,
                true
            ]
        },
        {
            "Comment": "Equality for machine-precision approximate numbers can be subtle: "
        },
        {
            "Test": [
                "2.00006 - 2.00005 == 0.00001",
                "False",
                "False",
                "False",
                false,
                true
            ]
        },
        {
            "Comment": "The extra digits disrupt equality:"
        },
        {
            "Test": [
                "InputForm[2.00006 - 2.00005]",
                "0.000010000000000065512",
                "inStrEvaluated$1022",
                "outStrEvaluated$1022",
                true,
                false
            ]
        },
        {
            "Comment": "Arbitrary-precision approximate numbers do not have this problem:"
        },
        {
            "Test": [
                "2.00006`16. - 2.00005000000000000000000000001`16. == 1.`16.*^-5",
                "True",
                "True",
                "True",
                false,
                true
            ]
        },
        {
            "Comment": "Thanks to automatic precision tracking RefLink[Equal,paclet:ref/Equal] knows to look only at the first ten digits:"
        },
        {
            "Test": [
                "Precision[2.00006`16. - 2.00005000000000000000000000001`16.]",
                "10.3979",
                "inStrEvaluated$1024",
                "outStrEvaluated$1024",
                true,
                false
            ]
        },
        {
            "Comment": "In this case, the equality test for machine numbers succeeds:"
        },
        {
            "Test": [
                "2.6 - 2.5 == 0.1",
                "True",
                "True",
                "True",
                false,
                true
            ]
        },
        {
            "Comment": "The extra digits in this case are ignored by RefLink[Equal,paclet:ref/Equal]:"
        },
        {
            "Test": [
                "InputForm[2.6 - 2.5]",
                "0.10000000000000009",
                "inStrEvaluated$1026",
                "outStrEvaluated$1026",
                true,
                false
            ]
        },
        {
            "Test": [
                "x == y",
                "True",
                "inStrEvaluated$1027",
                "outStrEvaluated$1027",
                true,
                false
            ]
        },
        {
            "Test": [
                "y == z",
                "True",
                "inStrEvaluated$1028",
                "outStrEvaluated$1028",
                true,
                false
            ]
        },
        {
            "Test": [
                "x == z",
                "False",
                "inStrEvaluated$1029",
                "outStrEvaluated$1029",
                true,
                false
            ]
        },
        {
            "Comment": "RefLink[Equal,paclet:ref/Equal] is not treated as the Boolean equivalence operator:"
        },
        {
            "Test": [
                "FullSimplify[(p || q) == (q || p)]",
                "(p || q) == (q || p)",
                "(p || q) == (q || p)",
                "(p || q) == (q || p)",
                false,
                true
            ]
        },
        {
            "Comment": "Use RefLink[Equivalent,paclet:ref/Equivalent] instead:"
        },
        {
            "Test": [
                "FullSimplify[Equivalent[p || q, q || p]]",
                "True",
                "True",
                "True",
                false,
                true
            ]
        }
    ],
    "Stats": {
        "Total": 51,
        "Failed": 0,
        "Disabled": 17
    }
}