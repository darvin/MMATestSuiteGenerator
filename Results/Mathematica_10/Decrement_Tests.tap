#! DOCKER > wolfram -script output/Tests/Decrement_Tests.m
#! TextForm[ColonForm[MessageName[$IterationLimit, itlim], StringForm[Iteration limit of `1` exceeded., Short[HoldForm[4096], 3]]]]
#! TextForm[ColonForm[MessageName[$IterationLimit, itlim], StringForm[Iteration limit of `1` exceeded., Short[HoldForm[4096], 3]]]]
#! TextForm[ColonForm[MessageName[$IterationLimit, itlim], StringForm[Iteration limit of `1` exceeded., Short[HoldForm[4096], 3]]]]
#! TextForm[ColonForm[MessageName[General, stop], StringForm[Further output of `1` will be suppressed during this calculation., Short[HoldForm[MessageName[$IterationLimit, itlim]], 3]]]]
#! TextForm[ColonForm[MessageName[Decrement, rvalue], StringForm[`1` is not a variable with a value, so its value cannot be changed., Short[HoldForm[a], 3]]]]
#! TextForm[ColonForm[MessageName[PreDecrement, rvalue], StringForm[`1` is not a variable with a value, so its value cannot be changed., Short[HoldForm[b], 3]]]]
#! TextForm[ColonForm[MessageName[Set, shape], StringForm[Lists `1` and `2` are not the same shape., Short[HoldForm[{a, b}], 3], Short[HoldForm[Span[{1, 1}, {a--, --b}]], 3]]]]
#! TextForm[ColonForm[MessageName[Increment, rvalue], StringForm[`1` is not a variable with a value, so its value cannot be changed., Short[HoldForm[a], 3]]]]
#! TextForm[ColonForm[MessageName[PreIncrement, rvalue], StringForm[`1` is not a variable with a value, so its value cannot be changed., Short[HoldForm[b], 3]]]]
#! TextForm[ColonForm[MessageName[Decrement, rvalue], StringForm[`1` is not a variable with a value, so its value cannot be changed., Short[HoldForm[c], 3]]]]
#! TextForm[ColonForm[MessageName[PreDecrement, rvalue], StringForm[`1` is not a variable with a value, so its value cannot be changed., Short[HoldForm[d], 3]]]]
#! TextForm[ColonForm[MessageName[Set, shape], StringForm[Lists `1` and `2` are not the same shape., Short[HoldForm[{a, b, c, d}], 3], Short[HoldForm[Span[{1, 1, 1, 1}, {a++, ++b, c--, --d}]], 3]]]]
# SYSTEM: Mathematica_10
# TEST: Decrement_Tests
# Decrement the value of k by one, but return the old value:
ok  k = 1; k--    ==>     1
    ---
    data:
        got: 1
        expect: 1
        expect_evaluated: 1
    ...
ok  k    ==>     0
    ---
    data:
        got: 0
        expect: 0
        expect_evaluated: 0
    ...
# Decrement a numerical value:
ok  x = 1.5; x--; x    ==>     0.5
    ---
    data:
        got: 0.5
        expect: 0.5
        expect_evaluated: 0.5
    ...
# Decrement a symbolic value:
ok  v = a; v--; v    ==>     -1 + a
    ---
    data:
        got: -1 + a
        expect: -1 + a
        expect_evaluated: -1 + a
    ...
# Decrement all values in a list:
ok  x = {1, 2, 3}    ==>     {1, 2, 3}
    ---
    data:
        got: {1, 2, 3}
        expect: {1, 2, 3}
        expect_evaluated: {1, 2, 3}
    ...
ok  x--; x    ==>     {0, 1, 2}
    ---
    data:
        got: {0, 1, 2}
        expect: {0, 1, 2}
        expect_evaluated: {0, 1, 2}
    ...
# Find the largest prime smaller than a given number:
ok  i = 10^6; While[ !PrimeQ[i], i--]; i    ==>     999983
    ---
    data:
        got: 999983
        expect: 999983
        expect_evaluated: 999983
    ...
# RefLink[Decrement,paclet:ref/Decrement] and RefLink[PreDecrement,paclet:ref/PreDecrement] differ in the return value of the operation:
ok  {a, b} = {1, 1} ;; {a--, --b}    ==>     {1, 0} # skip
ok  {a, b}    ==>     {0, 0} # skip
# RefLink[Decrement,paclet:ref/Decrement] is a short form of this assignment:
ok  k = 1; k = k - 1    ==>     0
    ---
    data:
        got: 0
        expect: 0
        expect_evaluated: 0
    ...
# RefLink[Decrement,paclet:ref/Decrement] is a special case of RefLink[SubtractFrom,paclet:ref/SubtractFrom]:
ok  k = 1; k -= 1    ==>     0
    ---
    data:
        got: 0
        expect: 0
        expect_evaluated: 0
    ...
# RefLink[Increment,paclet:ref/Increment] and RefLink[PreIncrement,paclet:ref/PreIncrement] are closely related operations:
ok  {a, b, c, d} = {1, 1, 1, 1} ;; {a++, ++b, c--, --d}    ==>     {1, 2, 1, 0} # skip
ok  {a, b, c, d}    ==>     {2, 2, 0, 0} # skip
# A variable to be decremented must have an initial value:
ok  x--    ==>     x-- # skip
