#! DOCKER > wolfram -script output/Tests/Range_Tests.m
# SYSTEM: Mathematica_10
# TEST: Range_Tests
ok  Range[4]    ==>     {1, 2, 3, 4}
    ---
    data:
        got: {1, 2, 3, 4}
        expect: {1, 2, 3, 4}
        expect_evaluated: {1, 2, 3, 4}
    ...
ok  Range[1.2, 2.2, 0.15]    ==>     {1.2, 1.35, 1.5, 1.65, 1.8, 1.95, 2.1}
    ---
    data:
        got: {1.2, 1.3499999999999999, 1.5, 1.65, 1.7999999999999998, 1.95, 2.0999999999999996}
        expect: {1.2, 1.35, 1.5, 1.65, 1.8, 1.95, 2.1}
        expect_evaluated: {1.2, 1.35, 1.5, 1.65, 1.8, 1.95, 2.1}
    ...
ok  Range[x, x + 4]    ==>     {x, 1 + x, 2 + x, 3 + x, 4 + x}
    ---
    data:
        got: {x, 1 + x, 2 + x, 3 + x, 4 + x}
        expect: {x, 1 + x, 2 + x, 3 + x, 4 + x}
        expect_evaluated: {x, 1 + x, 2 + x, 3 + x, 4 + x}
    ...
# Use a step of 2:
ok  Range[1, 10, 2]    ==>     {1, 3, 5, 7, 9}
    ---
    data:
        got: {1, 3, 5, 7, 9}
        expect: {1, 3, 5, 7, 9}
        expect_evaluated: {1, 3, 5, 7, 9}
    ...
# Use a negative step:
ok  Range[10, 1, -1]    ==>     {10, 9, 8, 7, 6, 5, 4, 3, 2, 1}
    ---
    data:
        got: {10, 9, 8, 7, 6, 5, 4, 3, 2, 1}
        expect: {10, 9, 8, 7, 6, 5, 4, 3, 2, 1}
        expect_evaluated: {10, 9, 8, 7, 6, 5, 4, 3, 2, 1}
    ...
# Use an exact numeric-valued step:
ok  Range[0, 10, Pi]    ==>     {0, Pi, 2*Pi, 3*Pi}
    ---
    data:
        got: {0, Pi, 2*Pi, 3*Pi}
        expect: {0, Pi, 2*Pi, 3*Pi}
        expect_evaluated: {0, Pi, 2*Pi, 3*Pi}
    ...
# Use a machine-number step:
ok  Range[0, 10, N[Pi]]    ==>     {0., 3.14159, 6.28319, 9.42478} # skip
# Use a precision-24 step:
ok  Range[0, 10, N[Pi, 24]]    ==>     {0, 3.14159265358979323846264`23.497149872694134, 6.28318530717958647692529`23.798179868358115, 9.42477796076937971538793`23.974271127413797}
    ---
    data:
        got: {0, 3.14159265358979323846264338327950288582`24., 6.28318530717958647692528676655900577165`24., 9.42477796076937971538793014983850865747`24.}
        expect: {0, 3.14159265358979323846264`23.497149872694134, 6.28318530717958647692529`23.798179868358115, 9.42477796076937971538793`23.974271127413797}
        expect_evaluated: {0, 3.14159265358979323846264`23.497149872694134, 6.28318530717958647692529`23.798179868358115, 9.42477796076937971538793`23.974271127413797}
    ...
# Range of very large numbers:
ok  Range[2^225, 2^225 + 5]    ==>     {53919893334301279589334030174039261347274288845081144962207220498432, 53919893334301279589334030174039261347274288845081144962207220498433, 53919893334301279589334030174039261347274288845081144962207220498434, 53919893334301279589334030174039261347274288845081144962207220498435, 53919893334301279589334030174039261347274288845081144962207220498436, 53919893334301279589334030174039261347274288845081144962207220498437}
    ---
    data:
        got: {53919893334301279589334030174039261347274288845081144962207220498432, 53919893334301279589334030174039261347274288845081144962207220498433, 53919893334301279589334030174039261347274288845081144962207220498434, 53919893334301279589334030174039261347274288845081144962207220498435, 53919893334301279589334030174039261347274288845081144962207220498436, 53919893334301279589334030174039261347274288845081144962207220498437}
        expect: {53919893334301279589334030174039261347274288845081144962207220498432, 53919893334301279589334030174039261347274288845081144962207220498433, 53919893334301279589334030174039261347274288845081144962207220498434, 53919893334301279589334030174039261347274288845081144962207220498435, 53919893334301279589334030174039261347274288845081144962207220498436, 53919893334301279589334030174039261347274288845081144962207220498437}
        expect_evaluated: {53919893334301279589334030174039261347274288845081144962207220498432, 53919893334301279589334030174039261347274288845081144962207220498433, 53919893334301279589334030174039261347274288845081144962207220498434, 53919893334301279589334030174039261347274288845081144962207220498435, 53919893334301279589334030174039261347274288845081144962207220498436, 53919893334301279589334030174039261347274288845081144962207220498437}
    ...
# Use a symbolic step:
ok  Range[a, b, (b - a)/4]    ==>     {a, a + (1/4)*(-a + b), a + (1/2)*(-a + b), a + (3/4)*(-a + b), b}
    ---
    data:
        got: {a, a + (-a + b)/4, a + (-a + b)/2, a + (3*(-a + b))/4, b}
        expect: {a, a + (1/4)*(-a + b), a + (1/2)*(-a + b), a + (3/4)*(-a + b), b}
        expect_evaluated: {a, a + (-a + b)/4, a + (-a + b)/2, a + (3*(-a + b))/4, b}
    ...
# Use a list of range specifications:
ok  Range[{5, 2, 6, 3}]    ==>     {{1, 2, 3, 4, 5}, {1, 2}, {1, 2, 3, 4, 5, 6}, {1, 2, 3}}
    ---
    data:
        got: {{1, 2, 3, 4, 5}, {1, 2}, {1, 2, 3, 4, 5, 6}, {1, 2, 3}}
        expect: {{1, 2, 3, 4, 5}, {1, 2}, {1, 2, 3, 4, 5, 6}, {1, 2, 3}}
        expect_evaluated: {{1, 2, 3, 4, 5}, {1, 2}, {1, 2, 3, 4, 5, 6}, {1, 2, 3}}
    ...
# Produce a geometric sequence:
ok  q^Range[5]    ==>     {q, q^2, q^3, q^4, q^5}
    ---
    data:
        got: {q, q^2, q^3, q^4, q^5}
        expect: {q, q^2, q^3, q^4, q^5}
        expect_evaluated: {q, q^2, q^3, q^4, q^5}
    ...
ok  poly = coeff . x^Range[0, Length[coeff] - 1]    ==>     -2 + 9*x + 5*x^2 + 3*x^3 - 3*x^4 - 6*x^5 - 7*x^6 - 4*x^7 + 8*x^8 + 3*x^9 # skip
# Form a random permutation:
ok  RandomSample[Range[10]]    ==>     {10, 6, 8, 1, 9, 7, 3, 5, 4, 2} # skip
# Find an inverse permutation:
ok  perm = RandomSample[Range[10]]    ==>     {4, 2, 8, 1, 10, 5, 3, 6, 9, 7} # skip
ok  inverse = perm; inverse[[perm]] = Range[Length[perm]]; inverse    ==>     {4, 2, 7, 1, 6, 8, 10, 3, 9, 5} # skip
# RefLink[Range,paclet:ref/Range][Subscript[i, min],Subscript[i, max],di] is equivalent to RefLink[Table,paclet:ref/Table][i,{Subscript[i, min],Subscript[i, max],di}]:
ok  Range[-4, 9, 3]    ==>     {-4, -1, 2, 5, 8}
    ---
    data:
        got: {-4, -1, 2, 5, 8}
        expect: {-4, -1, 2, 5, 8}
        expect_evaluated: {-4, -1, 2, 5, 8}
    ...
ok  Table[i, {i, -4, 9, 3}]    ==>     {-4, -1, 2, 5, 8}
    ---
    data:
        got: {-4, -1, 2, 5, 8}
        expect: {-4, -1, 2, 5, 8}
        expect_evaluated: {-4, -1, 2, 5, 8}
    ...
ok  list[[Range[1, 5, 2]]]    ==>     {a, c, e} # skip
ok  list[[1 ;; 5 ;; 2]]    ==>     {a, c, e} # skip
# For some step sizes, RefLink[Range,paclet:ref/Range] may not include the upper limit given:
ok  Range[0, 10, 3]    ==>     {0, 3, 6, 9}
    ---
    data:
        got: {0, 3, 6, 9}
        expect: {0, 3, 6, 9}
        expect_evaluated: {0, 3, 6, 9}
    ...
# Even though the lower limit was exact, the inexact step makes the first element inexact:
ok  Range[0, 1, 0.1]    ==>     {0., 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.}
    ---
    data:
        got: {0., 0.1, 0.2, 0.30000000000000004, 0.4, 0.5, 0.6000000000000001, 0.7000000000000001, 0.8, 0.9, 1.}
        expect: {0., 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.}
        expect_evaluated: {0., 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.}
    ...
# Make nested ranges:
ok  Range[Range[5]]    ==>     {{1}, {1, 2}, {1, 2, 3}, {1, 2, 3, 4}, {1, 2, 3, 4, 5}}
    ---
    data:
        got: {{1}, {1, 2}, {1, 2, 3}, {1, 2, 3, 4}, {1, 2, 3, 4, 5}}
        expect: {{1}, {1, 2}, {1, 2, 3}, {1, 2, 3, 4}, {1, 2, 3, 4, 5}}
        expect_evaluated: {{1}, {1, 2}, {1, 2, 3}, {1, 2, 3, 4}, {1, 2, 3, 4, 5}}
    ...
ok  Range[Range[Range[3]]]    ==>     {{{1}}, {{1}, {1, 2}}, {{1}, {1, 2}, {1, 2, 3}}}
    ---
    data:
        got: {{{1}}, {{1}, {1, 2}}, {{1}, {1, 2}, {1, 2, 3}}}
        expect: {{{1}}, {{1}, {1, 2}}, {{1}, {1, 2}, {1, 2, 3}}}
        expect_evaluated: {{{1}}, {{1}, {1, 2}}, {{1}, {1, 2}, {1, 2, 3}}}
    ...
ok  Nest[Range, 3, 6]    ==>     {{{{{{1}}}}}, {{{{{1}}}}, {{{{1}}}, {{{1}}, {{1}, {1, 2}}}}}, {{{{{1}}}}, {{{{1}}}, {{{1}}, {{1}, {1, 2}}}}, {{{{1}}}, {{{1}}, {{1}, {1, 2}}}, {{{1}}, {{1}, {1, 2}}, {{1}, {1, 2}, {1, 2, 3}}}}}}
    ---
    data:
        got: {{{{{{1}}}}}, {{{{{1}}}}, {{{{1}}}, {{{1}}, {{1}, {1, 2}}}}}, {{{{{1}}}}, {{{{1}}}, {{{1}}, {{1}, {1, 2}}}}, {{{{1}}}, {{{1}}, {{1}, {1, 2}}}, {{{1}}, {{1}, {1, 2}}, {{1}, {1, 2}, {1, 2, 3}}}}}}
        expect: {{{{{{1}}}}}, {{{{{1}}}}, {{{{1}}}, {{{1}}, {{1}, {1, 2}}}}}, {{{{{1}}}}, {{{{1}}}, {{{1}}, {{1}, {1, 2}}}}, {{{{1}}}, {{{1}}, {{1}, {1, 2}}}, {{{1}}, {{1}, {1, 2}}, {{1}, {1, 2}, {1, 2, 3}}}}}}
        expect_evaluated: {{{{{{1}}}}}, {{{{{1}}}}, {{{{1}}}, {{{1}}, {{1}, {1, 2}}}}}, {{{{{1}}}}, {{{{1}}}, {{{1}}, {{1}, {1, 2}}}}, {{{{1}}}, {{{1}}, {{1}, {1, 2}}}, {{{1}}, {{1}, {1, 2}}, {{1}, {1, 2}, {1, 2, 3}}}}}}
    ...
# Show it in tree form:
ok  HoldComplete[TreeForm[%]]    ==>     $Failed # skip
