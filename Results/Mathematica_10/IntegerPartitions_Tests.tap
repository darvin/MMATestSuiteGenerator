# SYSTEM: Mathematica_10
# TEST: IntegerPartitions_Tests
# OUTPUT: output/Results/Mathematica_10/IntegerPartitions_Tests.json
# All partitions of 5:
ok  IntegerPartitions[5]    ==>     {{5}, {4, 1}, {3, 2}, {3, 1, 1}, {2, 2, 1}, {2, 1, 1, 1}, {1, 1, 1, 1, 1}}
    ---
    data:
        got: {{5}, {4, 1}, {3, 2}, {3, 1, 1}, {2, 2, 1}, {2, 1, 1, 1}, {1, 1, 1, 1, 1}}
        expect: {{5}, {4, 1}, {3, 2}, {3, 1, 1}, {2, 2, 1}, {2, 1, 1, 1}, {1, 1, 1, 1, 1}}
        expect_evaluated: {{5}, {4, 1}, {3, 2}, {3, 1, 1}, {2, 2, 1}, {2, 1, 1, 1}, {1, 1, 1, 1, 1}}
    ...
# Partitions of 8 into at most 3 integers:
ok  IntegerPartitions[8, 3]    ==>     {{8}, {7, 1}, {6, 2}, {6, 1, 1}, {5, 3}, {5, 2, 1}, {4, 4}, {4, 3, 1}, {4, 2, 2}, {3, 3, 2}}
    ---
    data:
        got: {{8}, {7, 1}, {6, 2}, {6, 1, 1}, {5, 3}, {5, 2, 1}, {4, 4}, {4, 3, 1}, {4, 2, 2}, {3, 3, 2}}
        expect: {{8}, {7, 1}, {6, 2}, {6, 1, 1}, {5, 3}, {5, 2, 1}, {4, 4}, {4, 3, 1}, {4, 2, 2}, {3, 3, 2}}
        expect_evaluated: {{8}, {7, 1}, {6, 2}, {6, 1, 1}, {5, 3}, {5, 2, 1}, {4, 4}, {4, 3, 1}, {4, 2, 2}, {3, 3, 2}}
    ...
# Partitions of 8 into exactly 3 integers:
ok  IntegerPartitions[8, {3}]    ==>     {{6, 1, 1}, {5, 2, 1}, {4, 3, 1}, {4, 2, 2}, {3, 3, 2}}
    ---
    data:
        got: {{6, 1, 1}, {5, 2, 1}, {4, 3, 1}, {4, 2, 2}, {3, 3, 2}}
        expect: {{6, 1, 1}, {5, 2, 1}, {4, 3, 1}, {4, 2, 2}, {3, 3, 2}}
        expect_evaluated: {{6, 1, 1}, {5, 2, 1}, {4, 3, 1}, {4, 2, 2}, {3, 3, 2}}
    ...
# Find all partitions of 8 that involve only 1, 2, and 5:
ok  IntegerPartitions[8, All, {1, 2, 5}]    ==>     {{5, 2, 1}, {5, 1, 1, 1}, {2, 2, 2, 2}, {2, 2, 2, 1, 1}, {2, 2, 1, 1, 1, 1}, {2, 1, 1, 1, 1, 1, 1}, {1, 1, 1, 1, 1, 1, 1, 1}}
    ---
    data:
        got: {{5, 2, 1}, {5, 1, 1, 1}, {2, 2, 2, 2}, {2, 2, 2, 1, 1}, {2, 2, 1, 1, 1, 1}, {2, 1, 1, 1, 1, 1, 1}, {1, 1, 1, 1, 1, 1, 1, 1}}
        expect: {{5, 2, 1}, {5, 1, 1, 1}, {2, 2, 2, 2}, {2, 2, 2, 1, 1}, {2, 2, 1, 1, 1, 1}, {2, 1, 1, 1, 1, 1, 1}, {1, 1, 1, 1, 1, 1, 1, 1}}
        expect_evaluated: {{5, 2, 1}, {5, 1, 1, 1}, {2, 2, 2, 2}, {2, 2, 2, 1, 1}, {2, 2, 1, 1, 1, 1}, {2, 1, 1, 1, 1, 1, 1}, {1, 1, 1, 1, 1, 1, 1, 1}}
    ...
# Find partitions of 6 of even length only:
ok  IntegerPartitions[6, {2, Infinity, 2}]    ==>     {{5, 1}, {4, 2}, {3, 3}, {3, 1, 1, 1}, {2, 2, 1, 1}, {1, 1, 1, 1, 1, 1}}
    ---
    data:
        got: {{5, 1}, {4, 2}, {3, 3}, {3, 1, 1, 1}, {2, 2, 1, 1}, {1, 1, 1, 1, 1, 1}}
        expect: {{5, 1}, {4, 2}, {3, 3}, {3, 1, 1, 1}, {2, 2, 1, 1}, {1, 1, 1, 1, 1, 1}}
        expect_evaluated: {{5, 1}, {4, 2}, {3, 3}, {3, 1, 1, 1}, {2, 2, 1, 1}, {1, 1, 1, 1, 1, 1}}
    ...
# Find ways to form 3 from combinations of rational numbers:
ok  IntegerPartitions[3, 10, {1, 1/3, 3/4}]    ==>     {{3/4, 3/4, 3/4, 3/4}, {1/3, 1/3, 1/3, 1/3, 1/3, 1/3, 1/3, 1/3, 1/3}, {1/3, 1/3, 1/3, 1/3, 1/3, 1/3, 1}, {1/3, 1/3, 1/3, 1, 1}, {1, 1, 1}}
    ---
    data:
        got: {{3/4, 3/4, 3/4, 3/4}, {1/3, 1/3, 1/3, 1/3, 1/3, 1/3, 1/3, 1/3, 1/3}, {1/3, 1/3, 1/3, 1/3, 1/3, 1/3, 1}, {1/3, 1/3, 1/3, 1, 1}, {1, 1, 1}}
        expect: {{3/4, 3/4, 3/4, 3/4}, {1/3, 1/3, 1/3, 1/3, 1/3, 1/3, 1/3, 1/3, 1/3}, {1/3, 1/3, 1/3, 1/3, 1/3, 1/3, 1}, {1/3, 1/3, 1/3, 1, 1}, {1, 1, 1}}
        expect_evaluated: {{3/4, 3/4, 3/4, 3/4}, {1/3, 1/3, 1/3, 1/3, 1/3, 1/3, 1/3, 1/3, 1/3}, {1/3, 1/3, 1/3, 1/3, 1/3, 1/3, 1}, {1/3, 1/3, 1/3, 1, 1}, {1, 1, 1}}
    ...
# Find partitions involving negative numbers:
ok  IntegerPartitions[5, 10, {1, -1}]    ==>     {{-1, -1, 1, 1, 1, 1, 1, 1, 1}, {-1, 1, 1, 1, 1, 1, 1}, {1, 1, 1, 1, 1}}
    ---
    data:
        got: {{-1, -1, 1, 1, 1, 1, 1, 1, 1}, {-1, 1, 1, 1, 1, 1, 1}, {1, 1, 1, 1, 1}}
        expect: {{-1, -1, 1, 1, 1, 1, 1, 1, 1}, {-1, 1, 1, 1, 1, 1, 1}, {1, 1, 1, 1, 1}}
        expect_evaluated: {{-1, -1, 1, 1, 1, 1, 1, 1, 1}, {-1, 1, 1, 1, 1, 1, 1}, {1, 1, 1, 1, 1}}
    ...
# Find the first 10 partitions of 15:
ok  IntegerPartitions[15, All, All, 10]    ==>     {{15}, {14, 1}, {13, 2}, {13, 1, 1}, {12, 3}, {12, 2, 1}, {12, 1, 1, 1}, {11, 4}, {11, 3, 1}, {11, 2, 2}}
    ---
    data:
        got: {{15}, {14, 1}, {13, 2}, {13, 1, 1}, {12, 3}, {12, 2, 1}, {12, 1, 1, 1}, {11, 4}, {11, 3, 1}, {11, 2, 2}}
        expect: {{15}, {14, 1}, {13, 2}, {13, 1, 1}, {12, 3}, {12, 2, 1}, {12, 1, 1, 1}, {11, 4}, {11, 3, 1}, {11, 2, 2}}
        expect_evaluated: {{15}, {14, 1}, {13, 2}, {13, 1, 1}, {12, 3}, {12, 2, 1}, {12, 1, 1, 1}, {11, 4}, {11, 3, 1}, {11, 2, 2}}
    ...
# Find the last 3 partitions of 15:
ok  IntegerPartitions[15, All, All, -3]    ==>     {{2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, {2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}}
    ---
    data:
        got: {{2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, {2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}}
        expect: {{2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, {2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}}
        expect_evaluated: {{2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, {2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}}
    ...
# Find the ways to make change for 156 cents with 10 or fewer standard coins:
ok  IntegerPartitions[156, 10, {1, 5, 10, 25}]    ==>     {{25, 25, 25, 25, 25, 25, 5, 1}, {25, 25, 25, 25, 25, 10, 10, 10, 1}, {25, 25, 25, 25, 25, 10, 10, 5, 5, 1}}
    ---
    data:
        got: {{25, 25, 25, 25, 25, 25, 5, 1}, {25, 25, 25, 25, 25, 10, 10, 10, 1}, {25, 25, 25, 25, 25, 10, 10, 5, 5, 1}}
        expect: {{25, 25, 25, 25, 25, 25, 5, 1}, {25, 25, 25, 25, 25, 10, 10, 10, 1}, {25, 25, 25, 25, 25, 10, 10, 5, 5, 1}}
        expect_evaluated: {{25, 25, 25, 25, 25, 25, 5, 1}, {25, 25, 25, 25, 25, 10, 10, 10, 1}, {25, 25, 25, 25, 25, 10, 10, 5, 5, 1}}
    ...
# Find "McNugget partitions" for 50:
ok  IntegerPartitions[50, All, {6, 9, 20}]    ==>     {{20, 9, 9, 6, 6}, {20, 6, 6, 6, 6, 6}}
    ---
    data:
        got: {{20, 9, 9, 6, 6}, {20, 6, 6, 6, 6, 6}}
        expect: {{20, 9, 9, 6, 6}, {20, 6, 6, 6, 6, 6}}
        expect_evaluated: {{20, 9, 9, 6, 6}, {20, 6, 6, 6, 6, 6}}
    ...
# Find the number of "McNugget partitions" for numbers up to 50:
ok  Table[Length[IntegerPartitions[i, All, {6, 9, 20}]], {i, 50}]    ==>     {0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 2, 0, 1, 1, 0, 0, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 3, 0, 2, 2, 1, 1, 3, 0, 2, 3, 1, 2, 3, 1, 2}
    ---
    data:
        got: {0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 2, 0, 1, 1, 0, 0, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 3, 0, 2, 2, 1, 1, 3, 0, 2, 3, 1, 2, 3, 1, 2}
        expect: {0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 2, 0, 1, 1, 0, 0, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 3, 0, 2, 2, 1, 1, 3, 0, 2, 3, 1, 2, 3, 1, 2}
        expect_evaluated: {0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 2, 0, 1, 1, 0, 0, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 3, 0, 2, 2, 1, 1, 3, 0, 2, 3, 1, 2, 3, 1, 2}
    ...
# Show integers that are not "McNuggetable":
ok  Flatten[Position[%, 0]]    ==>     {1, 2, 3, 4, 5, 7, 8, 10, 11, 13, 14, 16, 17, 19, 22, 23, 25, 28, 31, 34, 37, 43} # skip
# The last case is exactly the corresponding Frobenius number:
ok  FrobeniusNumber[{6, 9, 20}]    ==>     43
    ---
    data:
        got: 43
        expect: 43
        expect_evaluated: 43
    ...
# Each sublist adds up to the original number:
ok  IntegerPartitions[4]    ==>     {{4}, {3, 1}, {2, 2}, {2, 1, 1}, {1, 1, 1, 1}}
    ---
    data:
        got: {{4}, {3, 1}, {2, 2}, {2, 1, 1}, {1, 1, 1, 1}}
        expect: {{4}, {3, 1}, {2, 2}, {2, 1, 1}, {1, 1, 1, 1}}
        expect_evaluated: {{4}, {3, 1}, {2, 2}, {2, 1, 1}, {1, 1, 1, 1}}
    ...
ok  Total /@ %    ==>     {4, 4, 4, 4, 4} # skip
# The length of RefLink[IntegerPartitions,paclet:ref/IntegerPartitions][n] is RefLink[PartitionsP,paclet:ref/PartitionsP][n]:
ok  Length[IntegerPartitions[10]]    ==>     42
    ---
    data:
        got: 42
        expect: 42
        expect_evaluated: 42
    ...
ok  PartitionsP[10]    ==>     42
    ---
    data:
        got: 42
        expect: 42
        expect_evaluated: 42
    ...
# RefLink[IntegerPartitions,paclet:ref/IntegerPartitions] gives results in reverse lexicographic order, not RefLink[Sort,paclet:ref/Sort] order:
ok  IntegerPartitions[5]    ==>     {{5}, {4, 1}, {3, 2}, {3, 1, 1}, {2, 2, 1}, {2, 1, 1, 1}, {1, 1, 1, 1, 1}}
    ---
    data:
        got: {{5}, {4, 1}, {3, 2}, {3, 1, 1}, {2, 2, 1}, {2, 1, 1, 1}, {1, 1, 1, 1, 1}}
        expect: {{5}, {4, 1}, {3, 2}, {3, 1, 1}, {2, 2, 1}, {2, 1, 1, 1}, {1, 1, 1, 1, 1}}
        expect_evaluated: {{5}, {4, 1}, {3, 2}, {3, 1, 1}, {2, 2, 1}, {2, 1, 1, 1}, {1, 1, 1, 1, 1}}
    ...
ok  Sort[%]    ==>     {{5}, {3, 2}, {4, 1}, {2, 2, 1}, {3, 1, 1}, {2, 1, 1, 1}, {1, 1, 1, 1, 1}} # skip
# For integers below 10, generate RefLink[IntegerPartitions,paclet:ref/IntegerPartitions] order by converting to strings:
ok  Reverse[Sort[ToString /@ IntegerPartitions[5]]]    ==>     {{5}, {4, 1}, {3, 2}, {3, 1, 1}, {2, 2, 1}, {2, 1, 1, 1}, {1, 1, 1, 1, 1}} # skip
# RefLink[FrobeniusSolve,paclet:ref/FrobeniusSolve] gives coefficient lists for RefLink[IntegerPartitions,paclet:ref/IntegerPartitions]:
ok  FrobeniusSolve[{6, 9, 20}, 24]    ==>     {{1, 2, 0}, {4, 0, 0}}
    ---
    data:
        got: {{1, 2, 0}, {4, 0, 0}}
        expect: {{1, 2, 0}, {4, 0, 0}}
        expect_evaluated: {{1, 2, 0}, {4, 0, 0}}
    ...
ok  IntegerPartitions[24, All, {6, 9, 20}]    ==>     {{9, 9, 6}, {6, 6, 6, 6}}
    ---
    data:
        got: {{9, 9, 6}, {6, 6, 6, 6}}
        expect: {{9, 9, 6}, {6, 6, 6, 6}}
        expect_evaluated: {{9, 9, 6}, {6, 6, 6, 6}}
    ...
# RefLink[IntegerPartitions,paclet:ref/IntegerPartitions] cannot give an infinite list of partitions:
ok  IntegerPartitions[5, All, {1, -1}]    ==>     IntegerPartitions[5, All, {1, -1}]
    ---
    data:
        got: IntegerPartitions[5, All, {1, -1}]
        expect: IntegerPartitions[5, All, {1, -1}]
        expect_evaluated: IntegerPartitions[5, All, {1, -1}]
    ...
ok  IntegerPartitions[5, 10, {1, -1}]    ==>     {{-1, -1, 1, 1, 1, 1, 1, 1, 1}, {-1, 1, 1, 1, 1, 1, 1}, {1, 1, 1, 1, 1}}
    ---
    data:
        got: {{-1, -1, 1, 1, 1, 1, 1, 1, 1}, {-1, 1, 1, 1, 1, 1, 1}, {1, 1, 1, 1, 1}}
        expect: {{-1, -1, 1, 1, 1, 1, 1, 1, 1}, {-1, 1, 1, 1, 1, 1, 1}, {1, 1, 1, 1, 1}}
        expect_evaluated: {{-1, -1, 1, 1, 1, 1, 1, 1, 1}, {-1, 1, 1, 1, 1, 1, 1}, {1, 1, 1, 1, 1}}
    ...
# There are no integer partitions of 1/2:
ok  IntegerPartitions[1/2]    ==>     {}
    ---
    data:
        got: {}
        expect: {}
        expect_evaluated: {}
    ...
# There are, however, partitions into rationals:
ok  IntegerPartitions[1/2, All, {1/6, 1/3}]    ==>     {{1/3, 1/6}, {1/6, 1/6, 1/6}}
    ---
    data:
        got: {{1/3, 1/6}, {1/6, 1/6, 1/6}}
        expect: {{1/3, 1/6}, {1/6, 1/6, 1/6}}
        expect_evaluated: {{1/3, 1/6}, {1/6, 1/6, 1/6}}
    ...
# If all items requested by the fourth argument are not present, a warning message is issued:
ok  IntegerPartitions[3, All, All, 7]    ==>     {{3}, {2, 1}, {1, 1, 1}}
    ---
    data:
        got: {{3}, {2, 1}, {1, 1, 1}}
        expect: {{3}, {2, 1}, {1, 1, 1}}
        expect_evaluated: {{3}, {2, 1}, {1, 1, 1}}
    ...
ok  IntegerPartitions[3, All, All, 7]    ==>     {{3}, {2, 1}, {1, 1, 1}}
    ---
    data:
        got: {{3}, {2, 1}, {1, 1, 1}}
        expect: {{3}, {2, 1}, {1, 1, 1}}
        expect_evaluated: {{3}, {2, 1}, {1, 1, 1}}
    ...
