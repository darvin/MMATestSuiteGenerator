#! DOCKER > wolfram -script output/Tests/Begin_Tests.m
#! TextForm[ColonForm[MessageName[$IterationLimit, itlim], StringForm[Iteration limit of `1` exceeded., Short[HoldForm[4096], 3]]]]
#! TextForm[ColonForm[MessageName[$IterationLimit, itlim], StringForm[Iteration limit of `1` exceeded., Short[HoldForm[4096], 3]]]]
#! TextForm[ColonForm[MessageName[$IterationLimit, itlim], StringForm[Iteration limit of `1` exceeded., Short[HoldForm[4096], 3]]]]
#! TextForm[ColonForm[MessageName[General, stop], StringForm[Further output of `1` will be suppressed during this calculation., Short[HoldForm[MessageName[$IterationLimit, itlim]], 3]]]]
# SYSTEM: Mathematica_10
# TEST: Begin_Tests
# Define a function f in the MyContext` RefLink[Context,paclet:ref/Context]:
ok  HoldComplete[Begin["MyContext`"]]    ==>     $Failed # skip
# Restore the context:
ok  HoldComplete[End[]]    ==>     $Failed # skip
# The function can be called using its fully qualified name:
ok  MyContext`f[a + b]    ==>     1 + (a + b)^2 # skip
# Make symbols used for package function definitions private, reducing the possibility for conflict:
ok  HoldComplete[BeginPackage["MyPackage`"]]    ==>     $Failed # skip
# When the context given to RefLink[Begin,paclet:ref/Begin] starts with ` it extends from the current context:
ok  HoldComplete[Begin["`Private`"]]    ==>     $Failed # skip
ok  HoldComplete[f[x_] := x^2 + 1 ;; End[]]    ==>     $Failed # skip
# Since the symbol f is in the package context, the function works after RefLink[EndPackage,paclet:ref/EndPackage]:
ok  Global`f[Global`a + Global`b]    ==>     1 + (Global`a + Global`b)^2 # skip
#! TextForm[ColonForm[MessageName[Get, bebal], StringForm[Unterminated uses of BeginPackage or Begin in `1`., Short[HoldForm[<< output/Tests/Begin_Tests.m], 3]]]]
