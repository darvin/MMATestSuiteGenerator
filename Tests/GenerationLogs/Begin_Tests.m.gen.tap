#! DOCKER > wolfram -script ./export_tests_from_docs.m build_docs/ReferencePages/Symbols/Begin.nb output/Tests/Begin_Tests.m
# GENERATING TESTS FROM: build_docs/ReferencePages/Symbols/Begin.nb
# WRITING OUTPUT TO:     output/Tests/Begin_Tests.m
#! TextForm[ColonForm[MessageName[StringJoin, string], StringForm[String expected at position `1` in `2`., Short[HoldForm[1], 3], Short[HoldForm[StringJoin[inNew, ; , inOld]], 3]]]]
#! TextForm[ColonForm[MessageName[StringJoin, string], StringForm[String expected at position `1` in `2`., Short[HoldForm[3], 3], Short[HoldForm[StringJoin[inNew, ; , inOld]], 3]]]]
#! TextForm[ColonForm[MessageName[$IterationLimit, itlim], StringForm[Iteration limit of `1` exceeded., Short[HoldForm[4096], 3]]]]
#! TextForm[ColonForm[MessageName[Syntax, sntxi], StringForm[Incomplete expression; more input is needed `4`., Short[HoldForm[], 3], Short[HoldForm[], 3], Short[HoldForm[], 3], Short[HoldForm[], 3]]]]
#! TextForm[ColonForm[MessageName[ToExpression, sntx], StringForm[Invalid syntax in or before "`1`"`4`., Short[HoldForm[\!\(StandardForm\`MyContext`\)
#!                               ^], 3], Short[HoldForm[], 3], Short[HoldForm[], 3], Short[HoldForm[
#! ], 3]]]]
not ok  Begin["MyContext`"]    ==>     MyContext`
#! TextForm[ColonForm[MessageName[$IterationLimit, itlim], StringForm[Iteration limit of `1` exceeded., Short[HoldForm[4096], 3]]]]
#! TextForm[ColonForm[MessageName[Syntax, sntxi], StringForm[Incomplete expression; more input is needed `4`., Short[HoldForm[], 3], Short[HoldForm[], 3], Short[HoldForm[], 3], Short[HoldForm[], 3]]]]
#! TextForm[ColonForm[MessageName[ToExpression, sntx], StringForm[Invalid syntax in or before "`1`"`4`., Short[HoldForm[\!\(StandardForm\`MyContext`\)
#!                               ^], 3], Short[HoldForm[], 3], Short[HoldForm[], 3], Short[HoldForm[
#! ], 3]]]]
not ok  End[]    ==>     MyContext`
#! TextForm[ColonForm[MessageName[$IterationLimit, itlim], StringForm[Iteration limit of `1` exceeded., Short[HoldForm[4096], 3]]]]
#! TextForm[ColonForm[MessageName[General, stop], StringForm[Further output of `1` will be suppressed during this calculation., Short[HoldForm[MessageName[$IterationLimit, itlim]], 3]]]]
not ok  MyContext`f[a+b]    ==>     1+(a+b)^2
#! TextForm[ColonForm[MessageName[Syntax, sntxi], StringForm[Incomplete expression; more input is needed `4`., Short[HoldForm[], 3], Short[HoldForm[], 3], Short[HoldForm[], 3], Short[HoldForm[], 3]]]]
#! TextForm[ColonForm[MessageName[ToExpression, sntx], StringForm[Invalid syntax in or before "`1`"`4`., Short[HoldForm[\!\(StandardForm\`MyPackage`\)
#!                               ^], 3], Short[HoldForm[], 3], Short[HoldForm[], 3], Short[HoldForm[
#! ], 3]]]]
#! TextForm[ColonForm[MessageName[General, stop], StringForm[Further output of `1` will be suppressed during this calculation., Short[HoldForm[MessageName[ToExpression, sntx]], 3]]]]
not ok  BeginPackage["MyPackage`"]    ==>     MyPackage`
#! TextForm[ColonForm[MessageName[Syntax, sntxi], StringForm[Incomplete expression; more input is needed `4`., Short[HoldForm[], 3], Short[HoldForm[], 3], Short[HoldForm[], 3], Short[HoldForm[], 3]]]]
not ok  Begin["`Private`"]    ==>     MyPackage`Private`
#! TextForm[ColonForm[MessageName[Syntax, sntxi], StringForm[Incomplete expression; more input is needed `4`., Short[HoldForm[], 3], Short[HoldForm[], 3], Short[HoldForm[], 3], Short[HoldForm[], 3]]]]
not ok  f[x_]:=x^2+1;; End[]    ==>     MyPackage`Private`
#! TextForm[ColonForm[MessageName[a, shdw], StringForm[Symbol `1` appears in multiple contexts `2`; definitions in context `3` may shadow or be shadowed by other definitions., Short[HoldForm[a], 3], Short[HoldForm[{MyPackage`, Global`}], 3], Short[HoldForm[MyPackage`], 3]]]]
#! TextForm[ColonForm[MessageName[b, shdw], StringForm[Symbol `1` appears in multiple contexts `2`; definitions in context `3` may shadow or be shadowed by other definitions., Short[HoldForm[b], 3], Short[HoldForm[{MyPackage`, Global`}], 3], Short[HoldForm[MyPackage`], 3]]]]
not ok  f[a+b]    ==>     1+(a+b)^2
#! TextForm[ColonForm[MessageName[Get, bebal], StringForm[Unterminated uses of BeginPackage or Begin in `1`., Short[HoldForm[<< ./export_tests_from_docs.m], 3]]]]
