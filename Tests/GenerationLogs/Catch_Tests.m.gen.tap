#! DOCKER > wolfram -script ./export_tests_from_docs.m build_docs/ReferencePages/Symbols/Catch.nb output/Tests/Catch_Tests.m
# GENERATING TESTS FROM: build_docs/ReferencePages/Symbols/Catch.nb
# WRITING OUTPUT TO:     output/Tests/Catch_Tests.m
#! TextForm[ColonForm[MessageName[StringJoin, string], StringForm[String expected at position `1` in `2`., Short[HoldForm[1], 3], Short[HoldForm[StringJoin[inNew, ; , inOld]], 3]]]]
#! TextForm[ColonForm[MessageName[StringJoin, string], StringForm[String expected at position `1` in `2`., Short[HoldForm[3], 3], Short[HoldForm[StringJoin[inNew, ; , inOld]], 3]]]]
#! TextForm[ColonForm[MessageName[$IterationLimit, itlim], StringForm[Iteration limit of `1` exceeded., Short[HoldForm[4096], 3]]]]
ok  Catch[a;b;Throw[c];d;e]    ==>     c
#! TextForm[ColonForm[MessageName[$IterationLimit, itlim], StringForm[Iteration limit of `1` exceeded., Short[HoldForm[4096], 3]]]]
not ok  Catch[f[2]+f[11]]    ==>     overflow
#! TextForm[ColonForm[MessageName[$IterationLimit, itlim], StringForm[Iteration limit of `1` exceeded., Short[HoldForm[4096], 3]]]]
#! TextForm[ColonForm[MessageName[General, stop], StringForm[Further output of `1` will be suppressed during this calculation., Short[HoldForm[MessageName[$IterationLimit, itlim]], 3]]]]
not ok  Catch[f[2]+f[3]]    ==>     8
ok  Catch[Do[If[i!>10^10,Throw[i]],{i,100}]]    ==>     14
ok  Catch[If[#<0,Throw[#]]&/@{1,2,0,-1,5,6}]    ==>     -1
ok  Catch[{a,Throw[b],c}]    ==>     b
ok  Catch[a^2+b^2+c^2/.b:>Throw[bbb]]    ==>     bbb
ok  Catch[{Catch[{a,Throw[b],c}],d,e}]    ==>     {b,d,e}
ok  Catch[{Throw[a],Throw[b],Throw[c]}]    ==>     a
ok  Catch[Throw/@{a,b,c}]    ==>     a
ok  f[x_]:=(If[x<0,Throw["negative"]];Sqrt[x]); Catch[Sum[f[i],{i,5,-5,-1}]]    ==>     negative
