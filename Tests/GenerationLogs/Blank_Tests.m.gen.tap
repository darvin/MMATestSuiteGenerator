#! DOCKER > wolfram -script ./export_tests_from_docs.m build_docs/ReferencePages/Symbols/Blank.nb output/Tests/Blank_Tests.m
# GENERATING TESTS FROM: build_docs/ReferencePages/Symbols/Blank.nb
# WRITING OUTPUT TO:     output/Tests/Blank_Tests.m
#! TextForm[ColonForm[MessageName[StringJoin, string], StringForm[String expected at position `1` in `2`., Short[HoldForm[1], 3], Short[HoldForm[StringJoin[inNew, ; , inOld]], 3]]]]
#! TextForm[ColonForm[MessageName[StringJoin, string], StringForm[String expected at position `1` in `2`., Short[HoldForm[3], 3], Short[HoldForm[StringJoin[inNew, ; , inOld]], 3]]]]
#! TextForm[ColonForm[MessageName[$IterationLimit, itlim], StringForm[Iteration limit of `1` exceeded., Short[HoldForm[4096], 3]]]]
ok  MatchQ[any[expression],_]    ==>     True
#! TextForm[ColonForm[MessageName[$IterationLimit, itlim], StringForm[Iteration limit of `1` exceeded., Short[HoldForm[4096], 3]]]]
ok  MatchQ[symbol, _Symbol]    ==>     True
#! TextForm[ColonForm[MessageName[$IterationLimit, itlim], StringForm[Iteration limit of `1` exceeded., Short[HoldForm[4096], 3]]]]
#! TextForm[ColonForm[MessageName[General, stop], StringForm[Further output of `1` will be suppressed during this calculation., Short[HoldForm[MessageName[$IterationLimit, itlim]], 3]]]]
ok  f[x_] := (x+1)^2; {f[1],f[a + b c]}    ==>     {4,(1+a+b c)^2}
ok  g[x_Integer] := Prime[x]-x; {g[10],g[z]}    ==>     {19,g[z]}
