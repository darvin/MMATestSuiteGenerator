#! DOCKER > wolfram -script ./export_tests_from_docs.m build_docs/ReferencePages/Symbols/Switch.nb output/Tests/Switch_Tests.m
# GENERATING TESTS FROM: build_docs/ReferencePages/Symbols/Switch.nb
# WRITING OUTPUT TO:     output/Tests/Switch_Tests.m
#! TextForm[ColonForm[MessageName[StringJoin, string], StringForm[String expected at position `1` in `2`., Short[HoldForm[1], 3], Short[HoldForm[StringJoin[inNew, ; , inOld]], 3]]]]
#! TextForm[ColonForm[MessageName[StringJoin, string], StringForm[String expected at position `1` in `2`., Short[HoldForm[3], 3], Short[HoldForm[StringJoin[inNew, ; , inOld]], 3]]]]
#! TextForm[ColonForm[MessageName[SetDelayed, write], StringForm[Tag `1` in `2` is Protected., Short[HoldForm[Span], 3], Short[HoldForm[Span[The value `1` is not True or False., f[b_]]], 3]]]]
#! TextForm[ColonForm[MessageName[MessageName, messg], StringForm[`1` cannot be set to `2`. It must be set to a string., Short[HoldForm[MessageName[f, boole]], 3], Short[HoldForm[$Failed], 3]]]]
#! TextForm[ColonForm[MessageName[$IterationLimit, itlim], StringForm[Iteration limit of `1` exceeded., Short[HoldForm[4096], 3]]]]
not ok  f::boole="The value `1` is not True or False.";; f[b_]:=Switch[b,True,1,False,0,_,Message[f::boole,b];0]; {f[True], f[False],f[x]}    ==>     {1,0,0}
#! TextForm[ColonForm[MessageName[$IterationLimit, itlim], StringForm[Iteration limit of `1` exceeded., Short[HoldForm[4096], 3]]]]
ok  t[e_] :=Switch[e,_Plus, Together,_Times,Apart,_,Identity]; e = (1+x)/(1-x) + x/(1+x);
#! t[e]    ==>     Together
#! TextForm[ColonForm[MessageName[$IterationLimit, itlim], StringForm[Iteration limit of `1` exceeded., Short[HoldForm[4096], 3]]]]
#! TextForm[ColonForm[MessageName[General, stop], StringForm[Further output of `1` will be suppressed during this calculation., Short[HoldForm[MessageName[$IterationLimit, itlim]], 3]]]]
ok  e1=t[e][e]    ==>     (-1-3 x)/((-1+x) (1+x))
