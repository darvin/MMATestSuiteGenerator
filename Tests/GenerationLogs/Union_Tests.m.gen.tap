#! DOCKER > wolfram -script ./export_tests_from_docs.m build_docs/ReferencePages/Symbols/Union.nb output/Tests/Union_Tests.m
# GENERATING TESTS FROM: build_docs/ReferencePages/Symbols/Union.nb
# WRITING OUTPUT TO:     output/Tests/Union_Tests.m
#! TextForm[ColonForm[MessageName[StringJoin, string], StringForm[String expected at position `1` in `2`., Short[HoldForm[1], 3], Short[HoldForm[StringJoin[inNew, ; , inOld]], 3]]]]
#! TextForm[ColonForm[MessageName[StringJoin, string], StringForm[String expected at position `1` in `2`., Short[HoldForm[3], 3], Short[HoldForm[StringJoin[inNew, ; , inOld]], 3]]]]
#! TextForm[ColonForm[MessageName[$IterationLimit, itlim], StringForm[Iteration limit of `1` exceeded., Short[HoldForm[4096], 3]]]]
ok  Union[{1,2,1,3,6,2,2}]    ==>     {1,2,3,6}
#! TextForm[ColonForm[MessageName[$IterationLimit, itlim], StringForm[Iteration limit of `1` exceeded., Short[HoldForm[4096], 3]]]]
ok  Union[{a,b,a,c},{d,a,e,b},{c,a}]    ==>     {a,b,c,d,e}
#! TextForm[ColonForm[MessageName[$IterationLimit, itlim], StringForm[Iteration limit of `1` exceeded., Short[HoldForm[4096], 3]]]]
#! TextForm[ColonForm[MessageName[General, stop], StringForm[Further output of `1` will be suppressed during this calculation., Short[HoldForm[MessageName[$IterationLimit, itlim]], 3]]]]
ok  {a,b,c}\[Union]{b,c,d}    ==>     {a,b,c,d}
ok  Union[{{1,2},{1,2,3}},{{2,1},{1,2}},{{3,2,1},{1,2,3}}]    ==>     {{1,2},{2,1},{1,2,3},{3,2,1}}
ok  Union[f[a,b],f[c,a],f[b,b,a]]    ==>     f[a,b,c]
ok  Union[{2,-2,1,3,1},SameTest->(Abs[#1]==Abs[#2]&)]    ==>     {-2,1,3}
ok  Union[{1.1,3.4,.5,7.6,7.1,1.9},SameTest->(Floor[#1]==Floor[#2]&)]    ==>     {0.5,1.1,3.4,7.1}
ok  Union[{{1,2},{3},{4,5,6},{9,6}}, SameTest->(Total[#1]==Total[#2]&)]    ==>     {{3},{9,6}}
ok  Union[{{1,2},{2,1},{3,2,1},{3},{4,5},{5,4,3,2,1}}, SameTest->(First[#1]==Last[#2]&)]    ==>     {{3},{1,2},{4,5}}
ok  Union[Divisors[10],Divisors[12],Divisors[20]]    ==>     {1,2,3,4,5,6,10,12,20}
ok  Union[Partition[IntegerDigits[10!,2],3,1]]    ==>     {{0,0,0},{0,1,0},{0,1,1},{1,0,0},{1,0,1},{1,1,0},{1,1,1}}
ok  Union[NestList[Mod[5#,11]&,1,100]]    ==>     {1,3,4,5,9}
ok  Union[Flatten[Map[Options[#][[All,1]]&, {FindFit, FindMinimum, FindRoot}]]]    ==>     {AccuracyGoal,Compiled,DampingFactor,Evaluated,EvaluationMonitor,Gradient,Jacobian,MaxIterations,Method,NormFunction,PrecisionGoal,StepMonitor,WorkingPrecision}
not ok  ints = RandomInteger[9,10]    ==>     {0,3,1,7,1,4,7,0,9,5}
not ok  splits = Split[Sort[ints]]    ==>     {{0,0},{1,1},{3},{4},{5},{7,7},{9}}
ok  Union[ints] === splits[[All,1]]    ==>     True
not ok  ints = RandomInteger[9,10]    ==>     {0,4,7,0,6,1,3,0,1,5}
not ok  tally= Tally[ints]    ==>     {{0,3},{4,1},{7,1},{6,1},{1,2},{3,1},{5,1}}
ok  Union[ints] === Sort[tally[[All,1]]]    ==>     True
not ok  ints = RandomInteger[1000,1000];; Timing[Length[u=Union[ints, SameTest->(Floor[#1/2]==Floor[#2/2]&)]]]    ==>     {0.719,429}
not ok  Timing[Length[fu=2*Union[Floor[ints/2]]]]    ==>     {0.,429}
not ok  Union[u-fu]    ==>     {0,1}
