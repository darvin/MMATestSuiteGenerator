#! DOCKER > wolfram -script ./export_tests_from_docs.m build_docs/ReferencePages/Symbols/FreeQ.nb output/Tests/FreeQ_Tests.m
# GENERATING TESTS FROM: build_docs/ReferencePages/Symbols/FreeQ.nb
# WRITING OUTPUT TO:     output/Tests/FreeQ_Tests.m
#! TextForm[ColonForm[MessageName[StringJoin, string], StringForm[String expected at position `1` in `2`., Short[HoldForm[1], 3], Short[HoldForm[StringJoin[inNew, ; , inOld]], 3]]]]
#! TextForm[ColonForm[MessageName[StringJoin, string], StringForm[String expected at position `1` in `2`., Short[HoldForm[3], 3], Short[HoldForm[StringJoin[inNew, ; , inOld]], 3]]]]
#! TextForm[ColonForm[MessageName[$IterationLimit, itlim], StringForm[Iteration limit of `1` exceeded., Short[HoldForm[4096], 3]]]]
ok  FreeQ[{1,2,4,1,0},0]    ==>     False
#! TextForm[ColonForm[MessageName[$IterationLimit, itlim], StringForm[Iteration limit of `1` exceeded., Short[HoldForm[4096], 3]]]]
ok  FreeQ[{{1,1,3,0},{2,1,2,2}},0]    ==>     False
#! TextForm[ColonForm[MessageName[$IterationLimit, itlim], StringForm[Iteration limit of `1` exceeded., Short[HoldForm[4096], 3]]]]
#! TextForm[ColonForm[MessageName[General, stop], StringForm[Further output of `1` will be suppressed during this calculation., Short[HoldForm[MessageName[$IterationLimit, itlim]], 3]]]]
ok  FreeQ[{a,b,b,a,a,a},_Integer]    ==>     True
ok  FreeQ[{x^2,y^3,x^5,x^6},y^_]    ==>     False
ok  f[c_ x_,x_]:=c f[x,x]/;FreeQ[c,x]; {f[3x,x],f[a x,x],f[(1+x)x,x]}    ==>     {3 f[x,x],a f[x,x],f[x (1+x),x]}
ok  Table[FreeQ[Integrate[x^n,x],Log],{n,-5,5}]    ==>     {True,True,True,True,False,True,True,True,True,True,True}
