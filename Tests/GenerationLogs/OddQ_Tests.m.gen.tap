#! DOCKER > wolfram -script ./export_tests_from_docs.m build_docs/ReferencePages/Symbols/OddQ.nb output/Tests/OddQ_Tests.m
# GENERATING TESTS FROM: build_docs/ReferencePages/Symbols/OddQ.nb
# WRITING OUTPUT TO:     output/Tests/OddQ_Tests.m
#! TextForm[ColonForm[MessageName[StringJoin, string], StringForm[String expected at position `1` in `2`., Short[HoldForm[1], 3], Short[HoldForm[StringJoin[inNew, ; , inOld]], 3]]]]
#! TextForm[ColonForm[MessageName[StringJoin, string], StringForm[String expected at position `1` in `2`., Short[HoldForm[3], 3], Short[HoldForm[StringJoin[inNew, ; , inOld]], 3]]]]
#! TextForm[ColonForm[MessageName[$IterationLimit, itlim], StringForm[Iteration limit of `1` exceeded., Short[HoldForm[4096], 3]]]]
ok  OddQ[9]    ==>     True
#! TextForm[ColonForm[MessageName[$IterationLimit, itlim], StringForm[Iteration limit of `1` exceeded., Short[HoldForm[4096], 3]]]]
ok  OddQ[x]    ==>     False
#! TextForm[ColonForm[MessageName[$IterationLimit, itlim], StringForm[Iteration limit of `1` exceeded., Short[HoldForm[4096], 3]]]]
#! TextForm[ColonForm[MessageName[General, stop], StringForm[Further output of `1` will be suppressed during this calculation., Short[HoldForm[MessageName[$IterationLimit, itlim]], 3]]]]
ok  VectorQ[{1,5,7,11},OddQ]    ==>     True
ok  VectorQ[{2,5,7,11},OddQ]    ==>     False
ok  OddQ[2]    ==>     False
ok  EvenQ[2]    ==>     True
ok  OddQ[15]    ==>     True
ok  Not[Divisible[15,2]]    ==>     True
not ok  x = 3(GoldenRatio - 1/GoldenRatio);; OddQ[x]    ==>     False
not ok  FullSimplify[x]    ==>     3
