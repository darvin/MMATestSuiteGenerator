#! DOCKER > wolfram -script ./export_tests_from_docs.m build_docs/ReferencePages/Symbols/NestWhileList.nb output/Tests/NestWhileList_Tests.m
# GENERATING TESTS FROM: build_docs/ReferencePages/Symbols/NestWhileList.nb
# WRITING OUTPUT TO:     output/Tests/NestWhileList_Tests.m
#! TextForm[ColonForm[MessageName[StringJoin, string], StringForm[String expected at position `1` in `2`., Short[HoldForm[1], 3], Short[HoldForm[StringJoin[inNew, ; , inOld]], 3]]]]
#! TextForm[ColonForm[MessageName[StringJoin, string], StringForm[String expected at position `1` in `2`., Short[HoldForm[3], 3], Short[HoldForm[StringJoin[inNew, ; , inOld]], 3]]]]
#! TextForm[ColonForm[MessageName[$IterationLimit, itlim], StringForm[Iteration limit of `1` exceeded., Short[HoldForm[4096], 3]]]]
ok  NestWhileList[#/2&,123456,EvenQ]    ==>     {123456,61728,30864,15432,7716,3858,1929}
#! TextForm[ColonForm[MessageName[$IterationLimit, itlim], StringForm[Iteration limit of `1` exceeded., Short[HoldForm[4096], 3]]]]
ok  NestWhileList[Log,100,#>0&]    ==>     {100,Log[100],Log[Log[100]],Log[Log[Log[100]]],Log[Log[Log[Log[100]]]]}
#! {10, 5, 2, 1}
#! {5, 2, 1, 0}
#! {2, 1, 0, 0}
#! TextForm[ColonForm[MessageName[$IterationLimit, itlim], StringForm[Iteration limit of `1` exceeded., Short[HoldForm[4096], 3]]]]
#! TextForm[ColonForm[MessageName[General, stop], StringForm[Further output of `1` will be suppressed during this calculation., Short[HoldForm[MessageName[$IterationLimit, itlim]], 3]]]]
ok  NestWhileList[Floor[#/2]&,10,(Print[{##}];UnsameQ[##])&,4]    ==>     {10,5,2,1,0,0}
#! {10, 5, 2, 1}
#! {10, 5, 2, 1, 0}
#! {10, 5, 2, 1, 0, 0}
ok  NestWhileList[Floor[#/2]&,10,(Print[{##}];UnsameQ[##])&,{4,6}]    ==>     {10,5,2,1,0,0}
#! {10}
#! {10, 5}
#! {10, 5, 2}
#! {10, 5, 2, 1}
#! {10, 5, 2, 1, 0}
#! {10, 5, 2, 1, 0, 0}
ok  NestWhileList[Floor[#/2]&,10,(Print[{##}];UnsameQ[##])&,All]    ==>     {10,5,2,1,0,0}
ok  NestWhileList[Floor[#/2]&,20,UnsameQ,2,4]    ==>     {20,10,5,2,1}
ok  NestWhileList[Floor[#/2]&,20,#>1&,1,\[Infinity]]    ==>     {20,10,5,2,1}
ok  NestWhileList[Floor[#/2]&,20,#>1&,1,\[Infinity],1]    ==>     {20,10,5,2,1,0}
ok  NestWhileList[Floor[#/2]&,20,#>1&,1,\[Infinity],-1]    ==>     {20,10,5,2}
ok  NestWhileList[#+1&,899,!PrimeQ[#]&]    ==>     {899,900,901,902,903,904,905,906,907}
ok  NestWhileList[Mod[2#,19]&,2,#!=1&]    ==>     {2,4,8,16,13,7,14,9,18,17,15,11,3,6,12,5,10,1}
not ok  Length[%]    ==>     18
ok  MultiplicativeOrder[2,19]    ==>     18
ok  NestWhileList[Mod[5 #, 7]&, 4, Unequal, All]    ==>     {4,6,2,3,1,5,4}
ok  NestWhileList[If[EvenQ[#],#/2,(3#+1)/2]&,400,Unequal,All]    ==>     {400,200,100,50,25,38,19,29,44,22,11,17,26,13,20,10,5,8,4,2,1,2}
ok  NestWhileList[If[EvenQ[#],#/2,(3#+1)/2]&,400,Unequal,All,\[Infinity],-1]    ==>     {400,200,100,50,25,38,19,29,44,22,11,17,26,13,20,10,5,8,4,2,1}
ok  NestWhileList[(# + 2/# )/2&,1,Abs[#1-#2]>0.001&,2]    ==>     {1,3/2,17/12,577/408,665857/470832}
ok  NestWhileList[Floor[#/2]&,10,UnsameQ,{4,4}]    ==>     {10,5,2,1,0,0}
ok  NestWhileList[Floor[#/2]&,10,UnsameQ,4]    ==>     {10,5,2,1,0,0}
ok  NestWhileList[#/2&,123456,EvenQ]    ==>     {123456,61728,30864,15432,7716,3858,1929}
ok  Reap[NestWhile[(Sow[#]/2)&,123456,EvenQ]]    ==>     {1929,{{123456,61728,30864,15432,7716,3858}}}
ok  NestWhileList[(#+3/#)/2&,1.0,UnsameQ,2]    ==>     {1.,2.,1.75,1.73214,1.73205,1.73205,1.73205}
ok  FixedPointList[(#+3/#)/2&,1.0]    ==>     {1.,2.,1.75,1.73214,1.73205,1.73205,1.73205}
ok  With[{n=123456,k=10},Reverse[Mod[NestWhileList[Quotient[#,\[NegativeVeryThinSpace]\[NegativeVeryThinSpace]k]&,n,#>=k&],k]]]    ==>     {1,2,3,4,5,6}
#! TextForm[ColonForm[MessageName[ReplaceAll, reps], StringForm[`1` is neither a list of replacement rules nor a valid dispatch table, and so cannot be used for replacing., Short[HoldForm[{dodec}], 3]]]]
#! TextForm[ColonForm[MessageName[ReplaceAll, reps], StringForm[`1` is neither a list of replacement rules nor a valid dispatch table, and so cannot be used for replacing., Short[HoldForm[{1}], 3]]]]
#! TextForm[ColonForm[MessageName[ReplaceAll, reps], StringForm[`1` is neither a list of replacement rules nor a valid dispatch table, and so cannot be used for replacing., Short[HoldForm[{dodec}], 3]]]]
#! TextForm[ColonForm[MessageName[General, stop], StringForm[Further output of `1` will be suppressed during this calculation., Short[HoldForm[MessageName[ReplaceAll, reps]], 3]]]]
#! TextForm[ColonForm[MessageName[ReplaceAll, argrx], StringForm[`1` called with `2` arguments; `3` arguments are expected., Short[HoldForm[ReplaceAll], 3], Short[HoldForm[3], 3], Short[HoldForm[2], 3]]]]
#! TextForm[ColonForm[MessageName[ReplaceAll, argrx], StringForm[`1` called with `2` arguments; `3` arguments are expected., Short[HoldForm[ReplaceAll], 3], Short[HoldForm[3], 3], Short[HoldForm[2], 3]]]]
#! TextForm[ColonForm[MessageName[ReplaceAll, argrx], StringForm[`1` called with `2` arguments; `3` arguments are expected., Short[HoldForm[ReplaceAll], 3], Short[HoldForm[3], 3], Short[HoldForm[2], 3]]]]
#! TextForm[ColonForm[MessageName[General, stop], StringForm[Further output of `1` will be suppressed during this calculation., Short[HoldForm[MessageName[ReplaceAll, argrx]], 3]]]]
