#! DOCKER > wolfram -script ./export_tests_from_docs.m build_docs/ReferencePages/Symbols/IntegerQ.nb output/Tests/IntegerQ_Tests.m
# GENERATING TESTS FROM: build_docs/ReferencePages/Symbols/IntegerQ.nb
# WRITING OUTPUT TO:     output/Tests/IntegerQ_Tests.m
#! TextForm[ColonForm[MessageName[StringJoin, string], StringForm[String expected at position `1` in `2`., Short[HoldForm[1], 3], Short[HoldForm[StringJoin[inNew, ; , inOld]], 3]]]]
#! TextForm[ColonForm[MessageName[StringJoin, string], StringForm[String expected at position `1` in `2`., Short[HoldForm[3], 3], Short[HoldForm[StringJoin[inNew, ; , inOld]], 3]]]]
#! TextForm[ColonForm[MessageName[$IterationLimit, itlim], StringForm[Iteration limit of `1` exceeded., Short[HoldForm[4096], 3]]]]
ok  IntegerQ[4]    ==>     True
#! TextForm[ColonForm[MessageName[$IterationLimit, itlim], StringForm[Iteration limit of `1` exceeded., Short[HoldForm[4096], 3]]]]
ok  IntegerQ[4+x]    ==>     False
#! TextForm[ColonForm[MessageName[$IterationLimit, itlim], StringForm[Iteration limit of `1` exceeded., Short[HoldForm[4096], 3]]]]
#! TextForm[ColonForm[MessageName[General, stop], StringForm[Further output of `1` will be suppressed during this calculation., Short[HoldForm[MessageName[$IterationLimit, itlim]], 3]]]]
ok  ArrayQ[{{1,4},{9,16}},_,IntegerQ]    ==>     True
ok  ArrayQ[{{1.,4.},{9.,16.}},_,IntegerQ]    ==>     False
ok  gaussIntegerQ[x_] := IntegerQ[Re[x]] && IntegerQ[Im[x]]; gaussIntegerQ[1 + 2 I]    ==>     True
not ok  x= 8529050985092184098210948213048204809218402184;; {IntegerQ[x],Head[x]}    ==>     {True,Integer}
ok  IntegerQ[Integer[x]]    ==>     False
ok  IntegerQ[Integer[1.2]]    ==>     False
not ok  x=GoldenRatio-1/GoldenRatio;; IntegerQ[x]    ==>     False
not ok  FullSimplify[x]    ==>     1
