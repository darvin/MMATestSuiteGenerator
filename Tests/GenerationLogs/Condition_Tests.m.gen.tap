#! DOCKER > wolfram -script ./export_tests_from_docs.m build_docs/ReferencePages/Symbols/Condition.nb output/Tests/Condition_Tests.m
# GENERATING TESTS FROM: build_docs/ReferencePages/Symbols/Condition.nb
# WRITING OUTPUT TO:     output/Tests/Condition_Tests.m
#! TextForm[ColonForm[MessageName[StringJoin, string], StringForm[String expected at position `1` in `2`., Short[HoldForm[1], 3], Short[HoldForm[StringJoin[inNew, ; , inOld]], 3]]]]
#! TextForm[ColonForm[MessageName[StringJoin, string], StringForm[String expected at position `1` in `2`., Short[HoldForm[3], 3], Short[HoldForm[StringJoin[inNew, ; , inOld]], 3]]]]
#! TextForm[ColonForm[MessageName[$IterationLimit, itlim], StringForm[Iteration limit of `1` exceeded., Short[HoldForm[4096], 3]]]]
ok  f[x_]:=ppp[x]/;x>0; f[5]    ==>     ppp[5]
#! TextForm[ColonForm[MessageName[$IterationLimit, itlim], StringForm[Iteration limit of `1` exceeded., Short[HoldForm[4096], 3]]]]
ok  f[-6]    ==>     f[-6]
#! TextForm[ColonForm[MessageName[$IterationLimit, itlim], StringForm[Iteration limit of `1` exceeded., Short[HoldForm[4096], 3]]]]
#! TextForm[ColonForm[MessageName[General, stop], StringForm[Further output of `1` will be suppressed during this calculation., Short[HoldForm[MessageName[$IterationLimit, itlim]], 3]]]]
ok  {6,-7,3,2,-1,-2}/.x_/;x<0->w    ==>     {6,w,3,2,w,w}
ok  f[x_]:=Module[{u},u^2/;((u=x-1)>0)]; f[0]    ==>     f[0]
not ok  f[6]    ==>     25
not ok  f[x_]:=Module[{a},a=Prime[10^x];
#! (FactorInteger[a+1])/;a<10^6]; f[4]    ==>     {{2,1},{3,1},{5,1},{3491,1}}
ok  f[5]    ==>     f[5]
