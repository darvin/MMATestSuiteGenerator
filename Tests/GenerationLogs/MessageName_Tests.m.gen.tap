#! DOCKER > wolfram -script ./export_tests_from_docs.m build_docs/ReferencePages/Symbols/MessageName.nb output/Tests/MessageName_Tests.m
# GENERATING TESTS FROM: build_docs/ReferencePages/Symbols/MessageName.nb
# WRITING OUTPUT TO:     output/Tests/MessageName_Tests.m
#! TextForm[ColonForm[MessageName[Sin, argx], StringForm[`1` called with `2` arguments; 1 argument is expected., Short[HoldForm[Sin], 3], Short[HoldForm[2], 3]]]]
#! TextForm[ColonForm[MessageName[Exp, argx], StringForm[`1` called with `2` arguments; 1 argument is expected., Short[HoldForm[Exp], 3], Short[HoldForm[2], 3]]]]
#! TextForm[ColonForm[MessageName[Sin, argx], StringForm[`1` called with `2` arguments; 1 argument is expected., Short[HoldForm[Sin], 3], Short[HoldForm[2], 3]]]]
#! TextForm[ColonForm[MessageName[Exp, argx], StringForm[`1` called with `2` arguments; 1 argument is expected., Short[HoldForm[Exp], 3], Short[HoldForm[2], 3]]]]
not ok  {Sin[1,2.],BesselJ[3,4.],Log[5,6.],Exp[7,8.]}    ==>     {Sin[1,2.],0.430171,1.11328,Exp[7,8.]}
#! TextForm[ColonForm[MessageName[$IterationLimit, itlim], StringForm[Iteration limit of `1` exceeded., Short[HoldForm[4096], 3]]]]
not ok  mess = MessageList[-1]    ==>     {Sin::argx,Exp::argx}
not ok  mest = Cases[mess,HoldForm[MessageName[f_,s_]]->{f,s}]    ==>     {{Sin,argx},{Exp,argx}}
not ok  oneargtest[g, 1,2]    ==>     False
ok  g[1,2]    ==>     g[1,2]
not ok  g[1.5]    ==>     1.25
