#! DOCKER > wolfram -script ./export_tests_from_docs.m build_docs/ReferencePages/Symbols/MessageName.nb output/Tests/MessageName_Tests.m
# GENERATING TESTS FROM: build_docs/ReferencePages/Symbols/MessageName.nb
# WRITING OUTPUT TO:     output/Tests/MessageName_Tests.m
#! TextForm[ColonForm[MessageName[StringJoin, string], StringForm[String expected at position `1` in `2`., Short[HoldForm[1], 3], Short[HoldForm[StringJoin[inNew, ; , inOld]], 3]]]]
#! TextForm[ColonForm[MessageName[StringJoin, string], StringForm[String expected at position `1` in `2`., Short[HoldForm[3], 3], Short[HoldForm[StringJoin[inNew, ; , inOld]], 3]]]]
#! TextForm[ColonForm[MessageName[Sin, argx], StringForm[`1` called with `2` arguments; 1 argument is expected., Short[HoldForm[Sin], 3], Short[HoldForm[2], 3]]]]
#! TextForm[ColonForm[MessageName[Exp, argx], StringForm[`1` called with `2` arguments; 1 argument is expected., Short[HoldForm[Exp], 3], Short[HoldForm[2], 3]]]]
#! TextForm[ColonForm[MessageName[$IterationLimit, itlim], StringForm[Iteration limit of `1` exceeded., Short[HoldForm[4096], 3]]]]
#! TextForm[ColonForm[MessageName[Sin, argx], StringForm[`1` called with `2` arguments; 1 argument is expected., Short[HoldForm[Sin], 3], Short[HoldForm[2], 3]]]]
#! TextForm[ColonForm[MessageName[Exp, argx], StringForm[`1` called with `2` arguments; 1 argument is expected., Short[HoldForm[Exp], 3], Short[HoldForm[2], 3]]]]
ok  {Sin[1,2.],BesselJ[3,4.],Log[5,6.],Exp[7,8.]}    ==>     {Sin[1,2.],0.430171,1.11328,Exp[7,8.]}
#! TextForm[ColonForm[MessageName[$IterationLimit, itlim], StringForm[Iteration limit of `1` exceeded., Short[HoldForm[4096], 3]]]]
#! TextForm[ColonForm[MessageName[$IterationLimit, itlim], StringForm[Iteration limit of `1` exceeded., Short[HoldForm[4096], 3]]]]
#! TextForm[ColonForm[MessageName[General, stop], StringForm[Further output of `1` will be suppressed during this calculation., Short[HoldForm[MessageName[$IterationLimit, itlim]], 3]]]]
not ok  mess = MessageList[-1]    ==>     {Sin::argx,Exp::argx}
not ok  mest = Cases[mess,HoldForm[MessageName[f_,s_]]->{f,s}]    ==>     {{Sin,argx},{Exp,argx}}
#! TextForm[ColonForm[MessageName[g, argx], StringForm[`1` called with `2` arguments; 1 argument is expected., Short[2, 3], Short[1, 3]]]]
ok  oneargtest[f_, args___] := Module[{nargs = Length[{args}]},If[nargs!= 1,Message[MessageName[f,"argx"],nargs,1];False,True]]; oneargtest[g, 1,2]    ==>     False
#! TextForm[ColonForm[MessageName[g, argx], StringForm[`1` called with `2` arguments; 1 argument is expected., Short[2, 3], Short[1, 3]]]]
#! TextForm[ColonForm[MessageName[g, argx], StringForm[`1` called with `2` arguments; 1 argument is expected., Short[2, 3], Short[1, 3]]]]
#! TextForm[ColonForm[MessageName[General, stop], StringForm[Further output of `1` will be suppressed during this calculation., Short[HoldForm[MessageName[g, argx]], 3]]]]
ok  g[args___]  := Module[{x = First[{args}]},(x-1)(x+1)] /; oneargtest[g,args]; g[1,2]    ==>     g[1,2]
ok  g[1.5]    ==>     1.25
