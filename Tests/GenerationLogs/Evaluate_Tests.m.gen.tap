#! DOCKER > wolfram -script ./export_tests_from_docs.m build_docs/ReferencePages/Symbols/Evaluate.nb output/Tests/Evaluate_Tests.m
# GENERATING TESTS FROM: build_docs/ReferencePages/Symbols/Evaluate.nb
# WRITING OUTPUT TO:     output/Tests/Evaluate_Tests.m
#! TextForm[ColonForm[MessageName[StringJoin, string], StringForm[String expected at position `1` in `2`., Short[HoldForm[1], 3], Short[HoldForm[StringJoin[inNew, ; , inOld]], 3]]]]
#! TextForm[ColonForm[MessageName[StringJoin, string], StringForm[String expected at position `1` in `2`., Short[HoldForm[3], 3], Short[HoldForm[StringJoin[inNew, ; , inOld]], 3]]]]
#! TextForm[ColonForm[MessageName[$IterationLimit, itlim], StringForm[Iteration limit of `1` exceeded., Short[HoldForm[4096], 3]]]]
ok  Hold[Evaluate[1+1],2+2]    ==>     Hold[2,2+2]
#! TextForm[ColonForm[MessageName[$IterationLimit, itlim], StringForm[Iteration limit of `1` exceeded., Short[HoldForm[4096], 3]]]]
ok  Attributes[Attributes]    ==>     {HoldAll,Listable,Protected}
#! TextForm[ColonForm[MessageName[$IterationLimit, itlim], StringForm[Iteration limit of `1` exceeded., Short[HoldForm[4096], 3]]]]
#! TextForm[ColonForm[MessageName[General, stop], StringForm[Further output of `1` will be suppressed during this calculation., Short[HoldForm[MessageName[$IterationLimit, itlim]], 3]]]]
not ok  x=Plus;; {Attributes[x],Attributes[Evaluate[x]]}    ==>     {{},{Flat,Listable,NumericFunction,OneIdentity,Orderless,Protected}}
ok  protected=Unprotect[Sqrt]    ==>     {Sqrt}
ok  Protect[Evaluate[protected]]    ==>     {Sqrt}
ok  Expand[(1+x)^3]    ==>     1+3 x+3 x^2+x^3
not ok  f[x_]:=Evaluate[%]; Definition[f]    ==>     f[x_]:=1+3 x+3 x^2+x^3
ok  ch=ChebyshevT[5,x]    ==>     5 x-20 x^3+16 x^5
not ok  Function[x,Evaluate[ch]]    ==>     Function[x,5 x-20 x^3+16 x^5]
ok  %[10]    ==>     1580050
ok  HoldComplete[Evaluate[1+2]]    ==>     HoldComplete[Evaluate[1+2]]
ok  Length[Unevaluated[1+2+3]]    ==>     3
ok  Length[1+2+3]    ==>     0
ok  Unevaluated[Evaluate[1+1]]    ==>     Unevaluated[Evaluate[1+1]]
ok  Hold[f[Evaluate[1+2]]]    ==>     Hold[f[Evaluate[1+2]]]
