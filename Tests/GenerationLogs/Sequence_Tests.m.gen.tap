#! DOCKER > wolfram -script ./export_tests_from_docs.m build_docs/ReferencePages/Symbols/Sequence.nb output/Tests/Sequence_Tests.m
# GENERATING TESTS FROM: build_docs/ReferencePages/Symbols/Sequence.nb
# WRITING OUTPUT TO:     output/Tests/Sequence_Tests.m
#! TextForm[ColonForm[MessageName[StringJoin, string], StringForm[String expected at position `1` in `2`., Short[HoldForm[1], 3], Short[HoldForm[StringJoin[inNew, ; , inOld]], 3]]]]
#! TextForm[ColonForm[MessageName[StringJoin, string], StringForm[String expected at position `1` in `2`., Short[HoldForm[3], 3], Short[HoldForm[StringJoin[inNew, ; , inOld]], 3]]]]
#! TextForm[ColonForm[MessageName[$IterationLimit, itlim], StringForm[Iteration limit of `1` exceeded., Short[HoldForm[4096], 3]]]]
ok  f[a,Sequence[b,c],d]    ==>     f[a,b,c,d]
#! TextForm[ColonForm[MessageName[$IterationLimit, itlim], StringForm[Iteration limit of `1` exceeded., Short[HoldForm[4096], 3]]]]
ok  {u,u,u}/.u->Sequence[a,b,c]    ==>     {a,b,c,a,b,c,a,b,c}
#! TextForm[ColonForm[MessageName[$IterationLimit, itlim], StringForm[Iteration limit of `1` exceeded., Short[HoldForm[4096], 3]]]]
#! TextForm[ColonForm[MessageName[General, stop], StringForm[Further output of `1` will be suppressed during this calculation., Short[HoldForm[MessageName[$IterationLimit, itlim]], 3]]]]
#! TextForm[ColonForm[MessageName[ReplaceAll, argrx], StringForm[`1` called with `2` arguments; `3` arguments are expected., Short[HoldForm[ReplaceAll], 3], Short[HoldForm[4], 3], Short[HoldForm[2], 3]]]]
#! TextForm[ColonForm[MessageName[ToString, nonopt], StringForm[Options expected (instead of `1`) beyond position `2` in `3`. An option must be a rule or a list of rules., Short[HoldForm[OutputForm], 3], Short[HoldForm[2], 3], Short[HoldForm[ToString[a, b, c, OutputForm]], 3]]]]
not ok  u=Sequence[a,b,c]    ==>     Sequence[a,b,c]
ok  {u,u,u}    ==>     {a,b,c,a,b,c,a,b,c}
ok  f[{{a,b},{c,d},{a}}]/.List->Sequence    ==>     f[a,b,c,d,a]
#! TextForm[ColonForm[MessageName[ReplaceAll, argrx], StringForm[`1` called with `2` arguments; `3` arguments are expected., Short[HoldForm[ReplaceAll], 3], Short[HoldForm[4], 3], Short[HoldForm[2], 3]]]]
#! TextForm[ColonForm[MessageName[ToString, nonopt], StringForm[Options expected (instead of `1`) beyond position `2` in `3`. An option must be a rule or a list of rules., Short[HoldForm[OutputForm], 3], Short[HoldForm[2], 3], Short[HoldForm[ToString[a, b, c, OutputForm]], 3]]]]
not ok  f[a,b,c]/.f[x__]->x    ==>     Sequence[a,b,c]
#! TextForm[ColonForm[MessageName[ReplaceAll, argrx], StringForm[`1` called with `2` arguments; `3` arguments are expected., Short[HoldForm[ReplaceAll], 3], Short[HoldForm[4], 3], Short[HoldForm[2], 3]]]]
#! TextForm[ColonForm[MessageName[General, stop], StringForm[Further output of `1` will be suppressed during this calculation., Short[HoldForm[MessageName[ReplaceAll, argrx]], 3]]]]
#! TextForm[ColonForm[MessageName[ToString, nonopt], StringForm[Options expected (instead of `1`) beyond position `2` in `3`. An option must be a rule or a list of rules., Short[HoldForm[OutputForm], 3], Short[HoldForm[2], 3], Short[HoldForm[ToString[a, b, c, OutputForm]], 3]]]]
#! TextForm[ColonForm[MessageName[General, stop], StringForm[Further output of `1` will be suppressed during this calculation., Short[HoldForm[MessageName[ToString, nonopt]], 3]]]]
not ok  ##&[a,b,c]    ==>     Sequence[a,b,c]
ok  {a,Sequence[b],c,Identity[d]}    ==>     {a,b,c,d}
#! TextForm[ColonForm[MessageName[Head, argx], StringForm[`1` called with `2` arguments; 1 argument is expected., Short[HoldForm[Head], 3], Short[HoldForm[2], 3]]]]
#! TextForm[ColonForm[MessageName[Head, argx], StringForm[`1` called with `2` arguments; 1 argument is expected., Short[HoldForm[Head], 3], Short[HoldForm[2], 3]]]]
ok  Head[Sequence[a,b]]    ==>     Head[a,b]
ok  u->Sequence[a,b]    ==>     u->Sequence[a,b]
