#! DOCKER > wolfram -script ./export_tests_from_docs.m build_docs/ReferencePages/Symbols/PossibleZeroQ.nb output/Tests/PossibleZeroQ_Tests.m
# GENERATING TESTS FROM: build_docs/ReferencePages/Symbols/PossibleZeroQ.nb
# WRITING OUTPUT TO:     output/Tests/PossibleZeroQ_Tests.m
#! TextForm[ColonForm[MessageName[StringJoin, string], StringForm[String expected at position `1` in `2`., Short[HoldForm[1], 3], Short[HoldForm[StringJoin[inNew, ; , inOld]], 3]]]]
#! TextForm[ColonForm[MessageName[StringJoin, string], StringForm[String expected at position `1` in `2`., Short[HoldForm[3], 3], Short[HoldForm[StringJoin[inNew, ; , inOld]], 3]]]]
#! TextForm[ColonForm[MessageName[$IterationLimit, itlim], StringForm[Iteration limit of `1` exceeded., Short[HoldForm[4096], 3]]]]
ok  PossibleZeroQ[E^(I Pi/4)-(-1)^(1/4)]    ==>     True
#! TextForm[ColonForm[MessageName[$IterationLimit, itlim], StringForm[Iteration limit of `1` exceeded., Short[HoldForm[4096], 3]]]]
ok  PossibleZeroQ[(x+1)(x-1)-x^2+1]    ==>     True
#! TextForm[ColonForm[MessageName[$IterationLimit, itlim], StringForm[Iteration limit of `1` exceeded., Short[HoldForm[4096], 3]]]]
#! TextForm[ColonForm[MessageName[General, stop], StringForm[Further output of `1` will be suppressed during this calculation., Short[HoldForm[MessageName[$IterationLimit, itlim]], 3]]]]
ok  PossibleZeroQ[(E+Pi)^2-E^2-Pi^2-2 E Pi]    ==>     True
ok  PossibleZeroQ[E^Pi-Pi^E]    ==>     False
ok  PossibleZeroQ[2^(2 I)-2^(-2I)-2I Sin[Log[4]]]    ==>     True
ok  PossibleZeroQ[1/x+1/y-(x+y)/(x y)]    ==>     True
ok  PossibleZeroQ[Sqrt[x^2]-x]    ==>     False
not ok  f=Sqrt[x^2]-x;; PossibleZeroQ[f]    ==>     False
not ok  PossibleZeroQ[f,Assumptions->Re[x]>0]    ==>     True
ok  zero=Sqrt[2]+Sqrt[3]-RootReduce[Sqrt[2]+Sqrt[3]]    ==>     Sqrt[2]+Sqrt[3]-Root[1-10 #1^2+#1^4&,4]
#! TextForm[ColonForm[MessageName[PossibleZeroQ, ztest1], StringForm[Unable to decide whether numeric quantity `1` is equal to zero. Assuming it is., Short[HoldForm[Sqrt[2] + Sqrt[3] - Root[1 - 10*#1^2 + #1^4 & , 4, 0]], 3]]]]
ok  PossibleZeroQ[zero]    ==>     True
#! TextForm[ColonForm[MessageName[PossibleZeroQ, ztest1], StringForm[Unable to decide whether numeric quantity `1` is equal to zero. Assuming it is., Short[HoldForm[1/10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 + Sqrt[2] + Sqrt[3] - Root[1 - 10*#1^2 + #1^4 & , 4, 0]], 3]]]]
ok  PossibleZeroQ[zero+10^-100]    ==>     True
ok  PossibleZeroQ[zero,Method->"ExactAlgebraics"]    ==>     True
ok  PossibleZeroQ[zero+10^-100,Method->"ExactAlgebraics"]    ==>     False
ok  QuadraticRoots[eq_,x_]:=
#! Module[{a,b,c,\[CapitalDelta]},
#! {c,b,a}=CoefficientList[Subtract@@eq,x];
#! If[!PossibleZeroQ[a],
#! \[CapitalDelta]=b^2-4a c;
#! x==(-b-Sqrt[\[CapitalDelta]])/(2a)||x==(-b+Sqrt[\[CapitalDelta]])/(2a),
#! If[!PossibleZeroQ[b],x==-c/b,PossibleZeroQ[c]]]]; QuadraticRoots[2Log[2]x^2-Log[4]x^2+x-1==0,x]    ==>     x==1
#! TextForm[ColonForm[MessageName[Power, infy], StringForm[Infinite expression `1` encountered., Short[HoldForm[0^(-1)], 3]]]]
not ok  Reduce[2Log[2]x^2-Log[4]x^2+x-1==0,x]    ==>     x==1
ok  e=(E+Pi)^2-E^2-Pi^2-2 E Pi;; e===0    ==>     False
not ok  e==0    ==>     True
#! TextForm[ColonForm[MessageName[$RecursionLimit, reclim], StringForm[Recursion depth of `1` exceeded., Short[HoldForm[1024], 3]]]]
not ok  ee=Log[4]+2Log[Sin[Pi/8]]-Log[2-Sqrt[2]];; ee==0    ==>     Log[4]-Log[2-Sqrt[2]]+2 Log[Sin[\[Pi]/8]]==0
#! TextForm[ColonForm[MessageName[$RecursionLimit, reclim], StringForm[Recursion depth of `1` exceeded., Short[HoldForm[1024], 3]]]]
not ok  PossibleZeroQ[ee]    ==>     True
#! TextForm[ColonForm[MessageName[$RecursionLimit, reclim], StringForm[Recursion depth of `1` exceeded., Short[HoldForm[1024], 3]]]]
#! TextForm[ColonForm[MessageName[General, stop], StringForm[Further output of `1` will be suppressed during this calculation., Short[HoldForm[MessageName[$RecursionLimit, reclim]], 3]]]]
not ok  FullSimplify[ee]    ==>     0
not ok  e=Sqrt[2]+Sqrt[3]-RootReduce[Sqrt[2]+Sqrt[3]]+10^-100;; PossibleZeroQ[e]    ==>     True
not ok  FullSimplify[e]    ==>     1/10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
