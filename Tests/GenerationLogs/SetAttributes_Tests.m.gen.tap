#! DOCKER > wolfram -script ./export_tests_from_docs.m build_docs/ReferencePages/Symbols/SetAttributes.nb output/Tests/SetAttributes_Tests.m
# GENERATING TESTS FROM: build_docs/ReferencePages/Symbols/SetAttributes.nb
# WRITING OUTPUT TO:     output/Tests/SetAttributes_Tests.m
#! TextForm[ColonForm[MessageName[StringJoin, string], StringForm[String expected at position `1` in `2`., Short[HoldForm[1], 3], Short[HoldForm[StringJoin[inNew, ; , inOld]], 3]]]]
#! TextForm[ColonForm[MessageName[StringJoin, string], StringForm[String expected at position `1` in `2`., Short[HoldForm[3], 3], Short[HoldForm[StringJoin[inNew, ; , inOld]], 3]]]]
#! TextForm[ColonForm[MessageName[ToExpression, sntx], StringForm[Invalid syntax in or before "`1`"`4`., Short[HoldForm[http://reference.wolfram.com/language/ref/SetAttributes.html; SetAttributes[f,HoldAll]; f[1+2]
       ^], 3], Short[HoldForm[], 3], Short[HoldForm[], 3], Short[HoldForm[
#! ], 3]]]]
#! TextForm[ColonForm[MessageName[$IterationLimit, itlim], StringForm[Iteration limit of `1` exceeded., Short[HoldForm[4096], 3]]]]
#! TextForm[ColonForm[MessageName[Syntax, sntxf], StringForm["`1`" cannot be followed by "`2`"`4`., Short[HoldForm[DisplayForm[RowBox[{RowBox[{http, :}]}]]], 3], Short[HoldForm[DisplayForm[RowBox[{//, RowBox[{RowBox[{RowBox[{RowBox[{reference, ., wolfram, ., com}], /, language}], /, ref}], /, RowBox[{SetAttributes, ., html}]}]}]]], 3], Short[HoldForm[], 3], Short[HoldForm[], 3]]]]
#! TextForm[ColonForm[MessageName[ToExpression, sntx], StringForm[Invalid syntax in or before "`1`"`4`., Short[HoldForm[\!\(StandardForm\`http://reference.wolfram.com/language/ref/SetAttributes.html; SetAttributes[f,HoldAll]; f[1+2]\)
#!                                                                                                                   ^], 3], Short[HoldForm[], 3], Short[HoldForm[], 3], Short[HoldForm[
#! ], 3]]]]
not ok  http://reference.wolfram.com/language/ref/SetAttributes.html; SetAttributes[f,HoldAll]; f[1+2]    ==>     f[1+2]
#! TextForm[ColonForm[MessageName[$IterationLimit, itlim], StringForm[Iteration limit of `1` exceeded., Short[HoldForm[4096], 3]]]]
ok  SetAttributes[plus,{Flat,Orderless}]; plus[a,plus[c,b]]    ==>     plus[a,b,c]
#! TextForm[ColonForm[MessageName[$IterationLimit, itlim], StringForm[Iteration limit of `1` exceeded., Short[HoldForm[4096], 3]]]]
#! TextForm[ColonForm[MessageName[General, stop], StringForm[Further output of `1` will be suppressed during this calculation., Short[HoldForm[MessageName[$IterationLimit, itlim]], 3]]]]
not ok  SetAttributes[f,Orderless]; Attributes[f]    ==>     {Flat,Orderless}
#! TextForm[ColonForm[MessageName[Attributes, attnf], StringForm[`1` is not a known attribute., Short[HoldForm[Span[HoldAll, {{HoldAll, Orderless}, {}}]], 3]]]]
not ok  SetAttributes[f,HoldAll];
#! Attributes[g]=HoldAll;; Attributes[{f,g}]    ==>     {{HoldAll,Listable},{HoldAll}}
not ok  Attributes[f]=Union[Attributes[f],{HoldFirst,NHoldFirst}]    ==>     {HoldFirst,NHoldFirst}
not ok  SetAttributes[f,{Flat,Orderless,OneIdentity}]; ClearAttributes[f,OneIdentity]; Attributes[f]    ==>     {Flat,Orderless}
not ok  Protect[f];
#! SetAttributes[g,Protected];; Attributes[{f,g}]    ==>     {{Protected},{Protected}}
not ok  Unprotect[f]    ==>     {}
ok  Attributes[SetAttributes]    ==>     {HoldFirst,Protected}
ok  SetAttributes[syms,Protected]; Attributes[syms]    ==>     {Protected}
not ok  SetAttributes[Evaluate[syms],Protected]; Attributes[{f,g,h}]    ==>     {{Protected},{Protected},{Protected}}
not ok  TableForm[Take[Sort[{#,Attributes[#]}&/@Names["System`*"],Length[#1[[2]]]>Length[#2[[2]]]&],10],TableDepth->2]    ==>     Times	{Flat,Listable,NumericFunction,OneIdentity,Orderless,Protected}
#! Plus	{Flat,Listable,NumericFunction,OneIdentity,Orderless,Protected}
#! Min	{Flat,NumericFunction,OneIdentity,Orderless,Protected}
#! Max	{Flat,NumericFunction,OneIdentity,Orderless,Protected}
#! LCM	{Flat,Listable,OneIdentity,Orderless,Protected}
#! GCD	{Flat,Listable,OneIdentity,Orderless,Protected}
#! BitXor	{Flat,Listable,OneIdentity,Orderless,Protected}
#! BitOr	{Flat,Listable,OneIdentity,Orderless,Protected}
#! BitAnd	{Flat,Listable,OneIdentity,Orderless,Protected}
#! ArithmeticGeometricMean	{Listable,NumericFunction,Orderless,Protected,ReadProtected}
