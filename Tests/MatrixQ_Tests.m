(* Created by Wolfram Mathematica 10.0 : www.wolfram.com *)
Import["CompatTests.m"]; 
TapSuite[TapComment["Test of whether an object is a matrix:"], 
 TapTestSame[MatrixQ[{{a, b}, {3, 4}}], True], 
 TapTestSame[MatrixQ[SparseArray[{{1, 1} -> a, {3, 3} -> b}]], True], 
 TapComment["These are not matrices:"], TapTestSame[MatrixQ[{{1}, {2, 3}}], 
  False], TapTestSame[MatrixQ[Array[a, {2, 2, 2}]], False], 
 TapComment["Use tests to generalize and specialize:"], 
 TapTestSame[MatrixQ[Array[a, {2, 2, 2}], ListQ], True], 
 TapTestSame[MatrixQ[RandomReal[1, {3, 3}], MachineNumberQ], True], 
 TapComment["Test if a matrix has positive (real) entries:"], 
 TapTestSame[MatrixQ[{{1, 2}, {3, 4}}, Positive], True], 
 TapTestSame[MatrixQ[{{1, 2}, {3, 4 + 5*I}}, Positive], False], 
 TapComment["Test if a matrix has real numeric entries:"], 
 TapTestSame[MatrixQ[{{Pi, Sin[1]}, {Cos[2], E}}, Im[#1] == 0 & ], True], 
 TapComment["Faster test for real-valued numbers:"], 
 TapTestSame[MatrixQ[{{1, 2.}, {3/4, 5.`20.}}, 
   NumberQ[#1] &&  !MatchQ[#1, _Complex] & ], True], 
 TapComment["This represents the Hermitian part of a matrix symbolically:"], 
 TapTestSame[hpart[a], hpart[a]], 
 TapComment["This gets the Hermitian part explicitly:"], 
 TapTestSameBROKEN[hpart[{{1, 2*I}, {3*I, 4}}], {{1, -(I/2)}, {I/2, 4}}], 
 TapTestSameBROKEN[HermitianMatrixQ[%], True], 
 TapComment["RefLink[MatrixQ,paclet:ref/MatrixQ] is a special case of \
RefLink[ArrayQ,paclet:ref/ArrayQ]:"], TapTestSameBROKEN[
  m = RandomReal[1, {2, 2}], {{0.925264, 0.522118}, {0.188581, 0.921065}}], 
 TapTestSame[{ArrayQ[m, 2], MatrixQ[m]}, {True, True}], 
 TapTestSame[{ArrayQ[m, 2, MachineNumberQ], MatrixQ[m, MachineNumberQ]}, 
  {True, True}], TapTestSame[{ArrayQ[m, 2, IntegerQ], MatrixQ[m, IntegerQ]}, 
  {False, False}], TapComment[
  "A matrix is made up of vectors of equal length:"], 
 TapTestSameBROKEN[m = RandomReal[1, {3, 2}], {{0.79747, 0.551327}, 
   {0.551977, 0.103706}, {0.188657, 0.734707}}], 
 TapTestSame[vecs = VectorQ /@ m, {True, True, True}], 
 TapTestSame[lens = Length /@ m, {2, 2, 2}], 
 TapTestSame[And @@ Append[vecs, Equal @@ lens], True], 
 TapTestSame[MatrixQ[m], True]]
